<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiJiODM2OTgzOS1iN2IxLTRiOTUtYmZmMC05MzM1MmIxZmYyYWMiLCJjb252ZXJzYXRpb25zIjp7IjQwYTVkMGM4LTQ0ZTctNGI2YS04NDNmLTNhM2Y4ZjZlZGQzYSI6eyJpZCI6IjQwYTVkMGM4LTQ0ZTctNGI2YS04NDNmLTNhM2Y4ZjZlZGQzYSIsIm5hbWUiOiJXZWxjb21lIHRvIHRoZSBBdWdtZW50IEFnZW50IiwiY3JlYXRlZEF0SXNvIjoiMjAyNS0wNC0yMlQwNDoxODoxMC4xMzhaIiwibGFzdEludGVyYWN0ZWRBdElzbyI6IjIwMjUtMDQtMjJUMDk6NDQ6NDAuNzk4WiIsImNoYXRIaXN0b3J5IjpbeyJyZXF1ZXN0X2lkIjoiZTcyNWVhODQtN2I5Yy00NWZhLTg5NWMtYjkzNjNmNDRmOTM4IiwidXVpZCI6ImRkMWNhYTA1LWJjNjYtNDg1MS05ZDQ1LWQxMjFjOWIzZjNhZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MCwidG9UaW1lc3RhbXAiOjE3NDUyOTU0OTAxMzksInNlZW5fc3RhdGUiOiJzZWVuIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjEzM2JjN2QwLTM5YjgtNGI2Zi1hNzJmLWM1MTFmYjgzN2FmMiIsInJlcXVlc3RfbWVzc2FnZSI6InVwZGF0ZSBkb2lWZSDEkeG7gyBsxrB1IGjDs2EgxJHGoW4gbeG7m2ksIHTDrW5oIHRvw6FuIHRy4burIHRp4buBbiBob+G6t2MgdGh1IHRow6ptIHRp4buBbiwgdOG6oW8gY2hpIHRp4bq/dCBow7NhIMSRxqFuIMSR4buDIHTDrW5oIHRvw6FuIHbDoCB0cuG7qyB0aeG7gW4gxJHhu5FpIHTGsOG7o25nLCB04bqhbyB2w6kgbeG7m2kgdsOgIMSR4buVaSB0cuG6oW5nIHRow6FpIHbDqSBjxakgdGjDoG5oIERBX0RPSSIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJ1cGRhdGUgZG9pVmUgxJHhu4MgbMawdSBow7NhIMSRxqFuIG3hu5tpLCB0w61uaCB0b8OhbiB0cuG7qyB0aeG7gW4gaG/hurdjIHRodSB0aMOqbSB0aeG7gW4sIHThuqFvIGNoaSB0aeG6v3QgaMOzYSDEkcahbiDEkeG7gyB0w61uaCB0b8OhbiB2w6AgdHLhu6sgdGnhu4FuIMSR4buRaSB0xrDhu6NuZywgdOG6oW8gdsOpIG3hu5tpIHbDoCDEkeG7lWkgdHLhuqFuZyB0aMOhaSB2w6kgY8WpIHRow6BuaCBEQV9ET0kifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUttazJiRHlXRjNEdmF2MjhvQjVjdG0iLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlNob3cgbWUgdGhlIERvaVZlUGFuZWwuamF2YSBmaWxlIHRvIHVuZGVyc3RhbmQgaXRzIGN1cnJlbnQgc3RydWN0dXJlIGFuZCBmdW5jdGlvbmFsaXR5XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJJ2xsIGhlbHAgeW91IHVwZGF0ZSB0aGUgRG9pVmVQYW5lbCB0byBpbXBsZW1lbnQgdGhlIGZ1bmN0aW9uYWxpdHkgZm9yIGV4Y2hhbmdpbmcgdGlja2V0cywgaW5jbHVkaW5nIHNhdmluZyBhIG5ldyBpbnZvaWNlLCBjYWxjdWxhdGluZyByZWZ1bmRzIG9yIGFkZGl0aW9uYWwgY2hhcmdlcywgY3JlYXRpbmcgaW52b2ljZSBkZXRhaWxzLCBjcmVhdGluZyBuZXcgdGlja2V0cywgYW5kIGNoYW5naW5nIHRoZSBzdGF0dXMgb2Ygb2xkIHRpY2tldHMgdG8gXCJEQV9ET0lcIiAoZXhjaGFuZ2VkKS5cblxuTGV0IG1lIGZpcnN0IGdhdGhlciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBjb2RlYmFzZSB0byB1bmRlcnN0YW5kIHRoZSBzdHJ1Y3R1cmUgYW5kIGZ1bmN0aW9uYWxpdHkuXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6InVwZGF0ZSBkb2lWZSDEkeG7gyBsxrB1IGjDs2EgxJHGoW4gbeG7m2ksIHTDrW5oIHRvw6FuIHRy4burIHRp4buBbiBob+G6t2MgdGh1IHRow6ptIHRp4buBbiwgdOG6oW8gY2hpIHRp4bq/dCBow7NhIMSRxqFuIMSR4buDIHTDrW5oIHRvw6FuIHbDoCB0cuG7qyB0aeG7gW4gxJHhu5FpIHTGsOG7o25nLCB04bqhbyB2w6kgbeG7m2kgdsOgIMSR4buVaSB0cuG6oW5nIHRow6FpIHbDqSBjxakgdGjDoG5oIERBX0RPSSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIiwiZm9sZGVyUm9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkknbGwgaGVscCB5b3UgdXBkYXRlIHRoZSBEb2lWZVBhbmVsIHRvIGltcGxlbWVudCB0aGUgZnVuY3Rpb25hbGl0eSBmb3IgZXhjaGFuZ2luZyB0aWNrZXRzLCBpbmNsdWRpbmcgc2F2aW5nIGEgbmV3IGludm9pY2UsIGNhbGN1bGF0aW5nIHJlZnVuZHMgb3IgYWRkaXRpb25hbCBjaGFyZ2VzLCBjcmVhdGluZyBpbnZvaWNlIGRldGFpbHMsIGNyZWF0aW5nIG5ldyB0aWNrZXRzLCBhbmQgY2hhbmdpbmcgdGhlIHN0YXR1cyBvZiBvbGQgdGlja2V0cyB0byBcIkRBX0RPSVwiIChleGNoYW5nZWQpLlxuXG5MZXQgbWUgZmlyc3QgZ2F0aGVyIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IGNvZGViYXNlIHRvIHVuZGVyc3RhbmQgdGhlIHN0cnVjdHVyZSBhbmQgZnVuY3Rpb25hbGl0eS5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJlYzFhY2VjMS1jMzYzLTQzM2YtOTMzMi1hYTg0NTgwMDY1OTEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFUQjFLcTJMZ3JRQ1g5YkJXN2NBSzd5IiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTaG93IG1lIHRoZSBWZVRhdSBjbGFzcywgSG9hRG9uIGNsYXNzLCBDaGlUaWV0SG9hRG9uIGNsYXNzLCBhbmQgVHJhbmdUaGFpVmVUYXUgZW51bSB0byB1bmRlcnN0YW5kIHRoZWlyIHN0cnVjdHVyZSBhbmQgcHJvcGVydGllc1wifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0IG1lIGdhdGhlciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWxhdGVkIGNsYXNzZXMgYW5kIGludGVyZmFjZXMgdGhhdCB3aWxsIGJlIG5lZWRlZCBmb3IgaW1wbGVtZW50aW5nIHRoZSB0aWNrZXQgZXhjaGFuZ2UgZnVuY3Rpb25hbGl0eS5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YVxuLi4uXG5cbnB1YmxpYyBjbGFzcyBEb2lWZVBhbmVsIGV4dGVuZHMgSlBhbmVsIHtcbiAgICAvLyDEkOG7i2EgY2jhu4kgSVAgdsOgIHBvcnQgY+G7p2EgUk1JIHNlcnZlclxuICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBSTUlfU0VSVkVSX0lQID0gXCIxMjcuMC4wLjFcIjtcbiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBpbnQgUk1JX1NFUlZFUl9QT1JUID0gOTA5MDtcbiAgICAvLyBUaMOqbSBjw6FjIGJp4bq/biBjaG8gcHJlbG9hZGluZ1xuICAgIHByaXZhdGUgYm9vbGVhbiBpc1ByZWxvYWRpbmdEYXRhID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBTd2luZ1dvcmtlcjxNYXA8U3RyaW5nLCBMaXN0PExpY2hUcmluaFRhdT4+LCBWb2lkPiBwcmVsb2FkV29ya2VyO1xuICAgIHByaXZhdGUgTWFwPFN0cmluZywgTGlzdDxMaWNoVHJpbmhUYXU+PiBjYWNoZWRMaWNoVHJpbmggPSBuZXcgQ29uY3VycmVudEhhc2hNYXA8PigpO1xuXG4gICAgcHJpdmF0ZSBEb2lWZURBTyBkb2lWZURBTztcbiAgICBwcml2YXRlIExpY2hUcmluaFRhdURBTyBsaWNoVHJpbmhUYXVEQU87XG4gICAgcHJpdmF0ZSBUb2FUYXVEb2lWZURBTyB0b2FUYXVEQU87XG4gICAgcHJpdmF0ZSBDaG9OZ29pRG9pVmVEQU8gY2hvTmdvaURBTztcbiAgICBwcml2YXRlIExvYWlIb2FEb25EQU8gbG9haUhvYURvbkRBTztcbiAgICBwcml2YXRlIEhvYURvbkRBTyBob2FEb25EQU87XG4gICAgcHJpdmF0ZSBDaGlUaWV0SG9hRG9uREFPIGNoaVRpZXRIb2FEb25EQU87XG4gICAgLy8gTcOgdSBz4bqvYyBjaMOtbmhcbiAgICBwcml2YXRlIENvbG9yIHByaW1hcnlDb2xvciA9IG5ldyBDb2xvcig0MSwgMTI4LCAxODUpOyAvLyBNw6B1IHhhbmggZMawxqFuZ1xuICAgIHByaXZhdGUgQ29sb3Igc3VjY2Vzc0NvbG9yID0gbmV3IENvbG9yKDQ2LCAyMDQsIDExMyk7IC8vIE3DoHUgeGFuaCBsw6FcbiAgICBwcml2YXRlIENvbG9yIHdhcm5pbmdDb2xvciA9IG5ldyBDb2xvcigyNDMsIDE1NiwgMTgpOyAvLyBNw6B1IHbDoG5nIGNhbVxuICAgIHByaXZhdGUgQ29sb3IgZGFuZ2VyQ29sb3IgPSBuZXcgQ29sb3IoMjMxLCA3NiwgNjApOyAgIC8vIE3DoHUgxJHhu49cbiAgICBwcml2YXRlIENvbG9yIGdyYXlDb2xvciA9IG5ldyBDb2xvcigxMDgsIDExNywgMTI1KTsgICAvLyBNw6B1IHjDoW1cbiAgICBwcml2YXRlIENvbG9yIGRhcmtUZXh0Q29sb3IgPSBuZXcgQ29sb3IoNTIsIDczLCA5NCk7ICAvLyBNw6B1IGNo4buvIHThu5FpXG4gICAgcHJpdmF0ZSBDb2xvciBsaWdodEJhY2tncm91bmQgPSBuZXcgQ29sb3IoMjQwLCAyNDAsIDI0MCk7IC8vIE3DoHUgbuG7gW4gbmjhuqF0XG5cbiAgICAvLyBDb21wb25lbnRzIGZvciBVSVxuICAgIHByaXZhdGUgSlRleHRGaWVsZCB0eHRNYVZlO1xuICAgIHByaXZhdGUgSlRleHRGaWVsZCB0eHRUZW5LaGFjaEhhbmc7XG4gICAgcHJpdmF0ZSBKVGV4dEZpZWxkIHR4dEdpYXlUbztcbiAgICBwcml2YXRlIEpUZXh0RmllbGQgdHh0TmdheURpO1xuICAgIHByaXZhdGUgSkNvbWJvQm94PFN0cmluZz4gY2JvRG9pVHVvbmc7XG4gICAgcHJpdmF0ZSBKQnV0dG9uIGJ0blRpbVZlO1xuICAgIHByaXZhdGUgSkJ1dHRvbiBidG5Eb2lWZTtcbiAgICBwcml2YXRlIEpCdXR0b24gYnRuTGFtTW9pO1xuICAgIHByaXZhdGUgSkJ1dHRvbiBidG5DaG9uTGljaFRyaW5oO1xuICAgIHByaXZhdGUgSkJ1dHRvbiBidG5DaG9uQ2hvTmdvaTtcbiAgICBwcml2YXRlIEpMYWJlbCBsYmxUcmFuZ1RoYWk7XG4gICAgcHJpdmF0ZSBKTGFiZWwgbGJsR2lhVmU7XG4gICAgcHJpdmF0ZSBKTGFiZWwgbGJsTGljaFRyaW5oO1xuICAgIHByaXZhdGUgSkxhYmVsIGxibENob05nb2k7XG4gICAgcHJpdmF0ZSBKTGFiZWwgbGJsU3RhdHVzO1xuICAgIHByaXZhdGUgSlRhYmxlIHRibExpY2hTdTtcbiAgICBwcml2YXRlIERlZmF1bHRUYWJsZU1vZGVsIG1vZGVsTGljaFN1O1xuICAgIHByaXZhdGUgSlByb2dyZXNzQmFyIHByb2dyZXNzQmFyO1xuLi4uXG5cbiAgICBwdWJsaWMgRG9pVmVQYW5lbChOaGFuVmllbiBuaGFuVmllbikge1xuICAgICAgICB0aGlzLm5oYW5WaWVuUGFuZWwgPSBuaGFuVmllbjtcbiAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShcInZpXCIsIFwiVk5cIik7XG4gICAgICAgIGN1cnJlbmN5Rm9ybWF0dGVyID0gTnVtYmVyRm9ybWF0LmdldEN1cnJlbmN5SW5zdGFuY2UobG9jYWxlKTtcblxuICAgICAgICAvLyDEkOG6o20gYuG6o28gY8OhYyBuw7p0IGhp4buDbiB0aOG7iyDEkcO6bmcgbcOgdSBz4bqvY1xuICAgICAgICBVSU1hbmFnZXIucHV0KFwiQnV0dG9uLmJhY2tncm91bmRcIiwgQ29sb3IuV0hJVEUpO1xuICAgICAgICBVSU1hbmFnZXIucHV0KFwiQnV0dG9uLm9wYXF1ZVwiLCBCb29sZWFuLlRSVUUpO1xuXG4gICAgICAgIHNldExheW91dChuZXcgQm9yZGVyTGF5b3V0KDEwLCAxMCkpO1xuICAgICAgICBzZXRCb3JkZXIobmV3IEVtcHR5Qm9yZGVyKDE1LCAxNSwgMTUsIDE1KSk7XG4gICAgICAgIHNldEJhY2tncm91bmQoQ29sb3IuV0hJVEUpO1xuXG4gICAgICAgIC8vIEto4bufaSB04bqhbyBnaWFvIGRp4buHbiB0csaw4bubY1xuICAgICAgICBpbml0aWFsaXplVUkoKTtcblxuICAgICAgICAvLyBUaGnhur90IGzhuq1wIHRy4bqhbmcgdGjDoWkgYmFuIMSR4bqndVxuICAgICAgICB1cGRhdGVTdGF0dXMoUkVBRFlfVEVYVCwgZmFsc2UpO1xuXG4gICAgICAgIC8vIEvhur90IG7hu5FpIMSR4bq/biBSTUkgc2VydmVyXG4gICAgICAgIGNvbm5lY3RUb1NlcnZlcigpO1xuICAgICAgICBzdGFydFByZWxvYWRpbmdEYXRhKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2b2lkIGNvbm5lY3RUb1NlcnZlcigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhMT0FESU5HX1RFWFQsIHRydWUpO1xuXG4gICAgICAgICAgICBSZWdpc3RyeSByZWdpc3RyeSA9IExvY2F0ZVJlZ2lzdHJ5LmdldFJlZ2lzdHJ5KFJNSV9TRVJWRVJfSVAsIFJNSV9TRVJWRVJfUE9SVCk7XG4gICAgICAgICAgICBkb2lWZURBTyA9IChEb2lWZURBTykgcmVnaXN0cnkubG9va3VwKFwiZG9pVmVEQU9cIik7XG4gICAgICAgICAgICBsaWNoVHJpbmhUYXVEQU8gPSAoTGljaFRyaW5oVGF1REFPKSByZWdpc3RyeS5sb29rdXAoXCJsaWNoVHJpbmhUYXVEQU9cIik7XG4vLyAgICAgICAgICAgIGtodXllbk1haURBTyA9IChLaHV5ZW5NYWlEQU8pIHJlZ2lzdHJ5Lmxvb2t1cChcImtodXllbk1haURBT1wiKTtcbiAgICAgICAgICAgIHRvYVRhdURBTyA9IChUb2FUYXVEb2lWZURBTykgcmVnaXN0cnkubG9va3VwKFwidG9hVGF1RG9pVmVEQU9cIik7XG4gICAgICAgICAgICBjaG9OZ29pREFPID0gKENob05nb2lEb2lWZURBTykgcmVnaXN0cnkubG9va3VwKFwiY2hvTmdvaURvaVZlREFPXCIpO1xuICAgICAgICAgICAgbG9haUhvYURvbkRBTyA9IChMb2FpSG9hRG9uREFPKSByZWdpc3RyeS5sb29rdXAoXCJsb2FpSG9hRG9uREFPXCIpO1xuICAgICAgICAgICAgaG9hRG9uREFPID0gKEhvYURvbkRBTykgcmVnaXN0cnkubG9va3VwKFwiaG9hRG9uREFPXCIpO1xuICAgICAgICAgICAgY2hpVGlldEhvYURvbkRBTyA9IChDaGlUaWV0SG9hRG9uREFPKSByZWdpc3RyeS5sb29rdXAoXCJjaGlUaWV0SG9hRG9uREFPXCIpO1xuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSBr4bq/dCBu4buRaVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoZG9pVmVEQU8udGVzdENvbm5lY3Rpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICBTd2luZ1V0aWxpdGllcy5pbnZva2VMYXRlcigoKSAtPiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoUkVBRFlfVEVYVCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQcmVsb2FkaW5nRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbi4uLlxuXG4gICAgcHJpdmF0ZSB2b2lkIGluaXRpYWxpemVVSSgpIHtcbiAgICAgICAgLy8gUGFuZWwgY2jDrW5oIGNoaWEgbMOgbSBoYWkgcGjhuqduXG4gICAgICAgIEpQYW5lbCBtYWluUGFuZWwgPSBuZXcgSlBhbmVsKG5ldyBCb3JkZXJMYXlvdXQoMTAsIDEwKSk7XG4gICAgICAgIG1haW5QYW5lbC5zZXRCYWNrZ3JvdW5kKENvbG9yLldISVRFKTtcblxuICAgICAgICAvLyBQYW5lbCBiw6puIHRyw6FpIGNo4bupYSB0aMO0bmcgdGluIHbDoCB0aGFvIHTDoWNcbiAgICAgICAgSlBhbmVsIGxlZnRQYW5lbCA9IGNyZWF0ZUxlZnRQYW5lbCgpO1xuXG4gICAgICAgIC8vIFBhbmVsIGLDqm4gcGjhuqNpIGNo4bupYSBs4buLY2ggc+G7rSDEkeG7lWkgdsOpXG4gICAgICAgIEpQYW5lbCByaWdodFBhbmVsID0gY3JlYXRlUmlnaHRQYW5lbCgpO1xuXG4gICAgICAgIC8vIENoaWEgxJHDtGkgbcOgbiBow6xuaFxuICAgICAgICBKU3BsaXRQYW5lIHNwbGl0UGFuZSA9IG5ldyBKU3BsaXRQYW5lKEpTcGxpdFBhbmUuSE9SSVpPTlRBTF9TUExJVCwgbGVmdFBhbmVsLCByaWdodFBhbmVsKTtcbiAgICAgICAgc3BsaXRQYW5lLnNldERpdmlkZXJMb2NhdGlvbig2NTApO1xuICAgICAgICBzcGxpdFBhbmUuc2V0RGl2aWRlclNpemUoNSk7XG4gICAgICAgIHNwbGl0UGFuZS5zZXRPbmVUb3VjaEV4cGFuZGFibGUodHJ1ZSk7XG4gICAgICAgIHNwbGl0UGFuZS5zZXRCYWNrZ3JvdW5kKENvbG9yLldISVRFKTtcblxuICAgICAgICAvLyBUaMOqbSBzcGxpdFBhbmUgdsOgbyBwYW5lbCBjaMOtbmhcbiAgICAgICAgbWFpblBhbmVsLmFkZChzcGxpdFBhbmUsIEJvcmRlckxheW91dC5DRU5URVIpO1xuLi4uXG5cbiAgICBwcml2YXRlIEpQYW5lbCBjcmVhdGVMZWZ0UGFuZWwoKSB7XG4gICAgICAgIEpQYW5lbCBsZWZ0UGFuZWwgPSBuZXcgSlBhbmVsKG5ldyBCb3JkZXJMYXlvdXQoMCwgMTUpKTtcbiAgICAgICAgbGVmdFBhbmVsLnNldEJhY2tncm91bmQoQ29sb3IuV0hJVEUpO1xuICAgICAgICBsZWZ0UGFuZWwuc2V0Qm9yZGVyKEJvcmRlckZhY3RvcnkuY3JlYXRlRW1wdHlCb3JkZXIoMTAsIDEwLCAxMCwgMTApKTtcblxuICAgICAgICAvLyBQYW5lbCB0w6xtIGtp4bq/bSB2w6lcbiAgICAgICAgSlBhbmVsIHNlYXJjaFBhbmVsID0gY3JlYXRlU2VhcmNoUGFuZWwoKTtcbiAgICAgICAgbGVmdFBhbmVsLmFkZChzZWFyY2hQYW5lbCwgQm9yZGVyTGF5b3V0Lk5PUlRIKTtcblxuICAgICAgICAvLyBQYW5lbCB0aMO0bmcgdGluIHbDqVxuICAgICAgICBKUGFuZWwgaW5mb1BhbmVsID0gY3JlYXRlSW5mb1BhbmVsKCk7XG4gICAgICAgIGxlZnRQYW5lbC5hZGQoaW5mb1BhbmVsLCBCb3JkZXJMYXlvdXQuQ0VOVEVSKTtcblxuICAgICAgICAvLyBQYW5lbCBuw7p0IHRoYW8gdMOhY1xuICAgICAgICBKUGFuZWwgYnV0dG9uUGFuZWwgPSBjcmVhdGVCdXR0b25QYW5lbCgpO1xuICAgICAgICBsZWZ0UGFuZWwuYWRkKGJ1dHRvblBhbmVsLCBCb3JkZXJMYXlvdXQuU09VVEgpO1xuXG4gICAgICAgIHJldHVybiBsZWZ0UGFuZWw7XG4gICAgfVxuLi4uXG5cbiAgICAgICAgICAgIHdvcmtlci5leGVjdXRlKCk7XG4gICAgICAgICAgICBsb2FkaW5nRGlhbG9nLnNldFZpc2libGUodHJ1ZSk7IC8vIEhp4buDbiB0aOG7iyBkaWFsb2cgY2jhu50gKHPhur0gdOG7sSDEkcOzbmcga2hpIHdlYmNhbSBraOG7n2kgdOG6oW8geG9uZylcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpIGtoaSBraOG7n2kgdOG6oW8gd2ViY2FtOiBcIiArIGUuZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBKUGFuZWwgY3JlYXRlSW5mb1BhbmVsKCkge1xuICAgICAgICBKUGFuZWwgaW5mb1BhbmVsID0gbmV3IEpQYW5lbChuZXcgQm9yZGVyTGF5b3V0KCkpO1xuICAgICAgICBpbmZvUGFuZWwuc2V0Qm9yZGVyKEJvcmRlckZhY3RvcnkuY3JlYXRlQ29tcG91bmRCb3JkZXIoXG4gICAgICAgICAgICAgICAgQm9yZGVyRmFjdG9yeS5jcmVhdGVUaXRsZWRCb3JkZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBCb3JkZXJGYWN0b3J5LmNyZWF0ZUxpbmVCb3JkZXIocHJpbWFyeUNvbG9yLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVGjDtG5nIFRpbiBWw6lcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlZEJvcmRlci5MRUZULCBUaXRsZWRCb3JkZXIuVE9QLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZvbnQoXCJBcmlhbFwiLCBGb250LkJPTEQsIDE0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW1hcnlDb2xvclxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgQm9yZGVyRmFjdG9yeS5jcmVhdGVFbXB0eUJvcmRlcigxNSwgMTUsIDE1LCAxNSlcbiAgICAgICAgKSk7XG4uLi5cblxuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEZvbnQobmV3IEZvbnQoXCJBcmlhbFwiLCBGb250LlBMQUlOLCAxMSkpO1xuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEZvcmVncm91bmQoQ29sb3IuV0hJVEUpO1xuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEJvcmRlclBhaW50ZWQoZmFsc2UpO1xuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldENvbnRlbnRBcmVhRmlsbGVkKGZhbHNlKTtcbiAgICAgICAgYnRuQ2hvbkxpY2hUcmluaC5zZXRGb2N1c1BhaW50ZWQoZmFsc2UpO1xuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEN1cnNvcihuZXcgQ3Vyc29yKEN1cnNvci5IQU5EX0NVUlNPUikpO1xuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEljb24oY3JlYXRlQ2FsZW5kYXJJY29uKDEyLCAxMiwgQ29sb3IuV0hJVEUpKTtcbiAgICAgICAgYnRuQ2hvbkxpY2hUcmluaC5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IGhpZW5UaGlEaWFsb2dDaG9uTGljaFRyaW5oKCkpO1xuXG4gICAgICAgIHBubExpY2hUcmluaC5hZGQoYnRuQ2hvbkxpY2hUcmluaCwgQm9yZGVyTGF5b3V0LkVBU1QpO1xuXG4gICAgICAgIGdiYy5ncmlkeCA9IDE7XG4gICAgICAgIGdiYy5ncmlkeSA9IDI7XG4gICAgICAgIGdiYy5ncmlkd2lkdGggPSAzO1xuICAgICAgICBmb3JtUGFuZWwuYWRkKHBubExpY2hUcmluaCwgZ2JjKTtcblxuICAgICAgICAvLyBIw6BuZyA0OiBDaOG7lyBuZ+G7k2lcbiAgICAgICAgYWRkRm9ybVJvdyhmb3JtUGFuZWwsIGdiYywgMywgXCJDaOG7lyBuZ+G7k2k6XCIsIFwiXCIsIGxhYmVsRm9udCk7XG5cbiAgICAgICAgSlBhbmVsIHBubENob05nb2kgPSBuZXcgSlBhbmVsKG5ldyBCb3JkZXJMYXlvdXQoNSwgMCkpO1xuICAgICAgICBwbmxDaG9OZ29pLnNldE9wYXF1ZShmYWxzZSk7XG5cbiAgICAgICAgbGJsQ2hvTmdvaSA9IG5ldyBKTGFiZWwoXCJDaMawYSBjaOG7jW5cIik7XG4gICAgICAgIGxibENob05nb2kuc2V0Rm9udChmaWVsZEZvbnQpO1xuICAgICAgICBwbmxDaG9OZ29pLmFkZChsYmxDaG9OZ29pLCBCb3JkZXJMYXlvdXQuQ0VOVEVSKTtcblxuICAgICAgICAvLyBU4bqhbyBKQnV0dG9uIHTDuXkgY2jhu4luaCBjaG8gY2jhu5cgbmfhu5NpXG4gICAgICAgIGJ0bkNob25DaG9OZ29pID0gbmV3IEpCdXR0b24oXCJDaOG7jW5cIikge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgdm9pZCBwYWludENvbXBvbmVudChHcmFwaGljcyBnKSB7XG4gICAgICAgICAgICAgICAgR3JhcGhpY3MyRCBnMiA9IChHcmFwaGljczJEKSBnLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGcyLnNldFJlbmRlcmluZ0hpbnQoUmVuZGVyaW5nSGludHMuS0VZX0FOVElBTElBU0lORywgUmVuZGVyaW5nSGludHMuVkFMVUVfQU5USUFMSUFTX09OKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TW9kZWwoKS5pc1ByZXNzZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZzIuc2V0Q29sb3IocHJpbWFyeUNvbG9yLmRhcmtlcigpLmRhcmtlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChnZXRNb2RlbCgpLmlzUm9sbG92ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZzIuc2V0Q29sb3IocHJpbWFyeUNvbG9yLmRhcmtlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGcyLnNldENvbG9yKHByaW1hcnlDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnMi5zZXRDb2xvcihuZXcgQ29sb3IoMjAwLCAyMDAsIDIwMCkpOyAvLyBNw6B1IGtoaSBuw7p0IGLhu4sgdsO0IGhp4buHdSBow7NhXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZzIuZmlsbFJlY3QoMCwgMCwgZ2V0V2lkdGgoKSwgZ2V0SGVpZ2h0KCkpO1xuICAgICAgICAgICAgICAgIGcyLmRpc3Bvc2UoKTtcblxuICAgICAgICAgICAgICAgIHN1cGVyLnBhaW50Q29tcG9uZW50KGcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGJ0bkNob25DaG9OZ29pLnNldEZvbnQobmV3IEZvbnQoXCJBcmlhbFwiLCBGb250LlBMQUlOLCAxMSkpO1xuICAgICAgICBidG5DaG9uQ2hvTmdvaS5zZXRGb3JlZ3JvdW5kKENvbG9yLldISVRFKTtcbiAgICAgICAgYnRuQ2hvbkNob05nb2kuc2V0Qm9yZGVyUGFpbnRlZChmYWxzZSk7XG4gICAgICAgIGJ0bkNob25DaG9OZ29pLnNldENvbnRlbnRBcmVhRmlsbGVkKGZhbHNlKTtcbiAgICAgICAgYnRuQ2hvbkNob05nb2kuc2V0Rm9jdXNQYWludGVkKGZhbHNlKTtcbiAgICAgICAgYnRuQ2hvbkNob05nb2kuc2V0Q3Vyc29yKG5ldyBDdXJzb3IoQ3Vyc29yLkhBTkRfQ1VSU09SKSk7XG4gICAgICAgIGJ0bkNob25DaG9OZ29pLnNldEljb24oY3JlYXRlU2VhdEljb24oMTIsIDEyLCBDb2xvci5XSElURSkpO1xuICAgICAgICBidG5DaG9uQ2hvTmdvaS5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IGhpZW5UaGlEaWFsb2dDaG9uQ2hvTmdvaSgpKTtcblxuICAgICAgICBwbmxDaG9OZ29pLmFkZChidG5DaG9uQ2hvTmdvaSwgQm9yZGVyTGF5b3V0LkVBU1QpO1xuXG4gICAgICAgIGdiYy5ncmlkeCA9IDE7XG4gICAgICAgIGdiYy5ncmlkeSA9IDM7XG4gICAgICAgIGdiYy5ncmlkd2lkdGggPSAzO1xuICAgICAgICBmb3JtUGFuZWwuYWRkKHBubENob05nb2ksIGdiYyk7XG5cbiAgICAgICAgLy8gSMOgbmcgNTogVHLhuqFuZyB0aMOhaSB2w6AgR2nDoSB2w6lcbiAgICAgICAgYWRkRm9ybVJvdyhmb3JtUGFuZWwsIGdiYywgNCwgXCJUcuG6oW5nIHRow6FpOlwiLCBcIkdpw6EgdsOpOlwiLCBsYWJlbEZvbnQpO1xuLi4uXG5cbiAgICAgICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdm9pZCBkb25lKCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVUYXVIaWVuVGFpID0gZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVUYXVIaWVuVGFpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhEb2lWZVBhbmVsLnRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIktow7RuZyB0w6xtIHRo4bqleSB2w6kgduG7m2kgbcOjOiBcIiArIG1hVmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFtTW9pKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdpYVZlQmFuRGF1ID0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGllblRoaVRob25nVGluVmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgeGVtIGPDsyB0aOG7gyDEkeG7lWkgdsOpIGtow7RuZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW4gY29UaGVEb2lWZSA9ICh2ZVRhdUhpZW5UYWkuZ2V0VHJhbmdUaGFpKCkgPT0gVHJhbmdUaGFpVmVUYXUuREFfVEhBTkhfVE9BTik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SW5wdXRGaWVsZHNFbmFibGVkKGNvVGhlRG9pVmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkRvaVZlLnNldEVuYWJsZWQoY29UaGVEb2lWZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQ2hvbkxpY2hUcmluaC5zZXRFbmFibGVkKGNvVGhlRG9pVmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkNob25DaG9OZ29pLnNldEVuYWJsZWQoY29UaGVEb2lWZSk7XG4uLi5cblxuICAgIHByaXZhdGUgdm9pZCBzZXRUcmFuZ1RoYWlDb2xvcihKTGFiZWwgbGFiZWwsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkge1xuICAgICAgICBzd2l0Y2ggKHRyYW5nVGhhaSkge1xuICAgICAgICAgICAgY2FzZSBDSE9fWEFDX05IQU46XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZCh3YXJuaW5nQ29sb3IpOyAvLyBDYW1cbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZVBlbmRpbmdJY29uKDE0LCAxNCwgd2FybmluZ0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERBX1RIQU5IX1RPQU46XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChzdWNjZXNzQ29sb3IpOyAvLyBYYW5oIGzDoVxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24oY3JlYXRlQ2hlY2tJY29uKDE0LCAxNCwgc3VjY2Vzc0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERBX1RSQTpcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRGb3JlZ3JvdW5kKGRhbmdlckNvbG9yKTsgLy8gxJDhu49cbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZUNhbmNlbEljb24oMTQsIDE0LCBkYW5nZXJDb2xvcikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEQV9ET0k6XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChncmF5Q29sb3IpOyAvLyBYw6FtXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVFeGNoYW5nZUljb24oMTQsIDE0LCBncmF5Q29sb3IpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChkYXJrVGV4dENvbG9yKTtcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuLi4uXG5cbiAgICAgICAgICAgIC8vIMSQ4buVaSB0cuG6oW5nIHRow6FpIHbDqSB0aMOgbmggQ0hPX1hBQ19OSEFOXG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTik7XG5cbiAgICAgICAgICAgIC8vIEfhu41pIEFQSSDEkeG7gyBj4bqtcCBuaOG6rXQgdsOpXG4gICAgICAgICAgICBib29sZWFuIHN1Y2Nlc3MgPSBkb2lWZURBTy5kb2lWZSh2ZVRhdUhpZW5UYWkpO1xuXG4gICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUxpY2hTdUFuZFNob3dTdWNjZXNzKHRyYW5nVGhhaUN1KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwixJDhu5VpIHbDqSBraMO0bmcgdGjDoG5oIGPDtG5nIVwiLCBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgXCJM4buXaSBraGkgdGjhu7FjIGhp4buHbiDEkeG7lWkgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKEVSUk9SX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbi4uLlxuXG4gICAgICAgIC8vIFRhYiAyOiBWTlBheSBRUlxuICAgICAgICBKUGFuZWwgcG5sVm5wYXlRUiA9IG5ldyBKUGFuZWwobmV3IEJvcmRlckxheW91dCgxMCwgMTApKTtcbiAgICAgICAgcG5sVm5wYXlRUi5zZXRCb3JkZXIoQm9yZGVyRmFjdG9yeS5jcmVhdGVFbXB0eUJvcmRlcigxMCwgMTAsIDEwLCAxMCkpO1xuXG4gICAgICAgIC8vIFBhbmVsIGhp4buDbiB0aOG7iyBtw6MgUVJcbiAgICAgICAgSlBhbmVsIHBubFFSRGlzcGxheSA9IG5ldyBKUGFuZWwobmV3IEJvcmRlckxheW91dCgpKTtcbiAgICAgICAgcG5sUVJEaXNwbGF5LnNldEJvcmRlcihCb3JkZXJGYWN0b3J5LmNyZWF0ZUxpbmVCb3JkZXIobmV3IENvbG9yKDIzMCwgMjMwLCAyMzApKSk7XG4gICAgICAgIHBubFFSRGlzcGxheS5zZXRCYWNrZ3JvdW5kKENvbG9yLldISVRFKTtcbiAgICAgICAgcG5sUVJEaXNwbGF5LnNldFByZWZlcnJlZFNpemUobmV3IERpbWVuc2lvbigyNDAsIDI0MCkpO1xuXG4gICAgICAgIC8vIExhYmVsIMSR4buDIGhp4buDbiB0aOG7iyBtw6MgUVIgKGJhbiDEkeG6p3UgY2jhu4kgaGnhu4NuIHRo4buLIGljb24gdOG6o2kpXG4gICAgICAgIEpMYWJlbCBsYmxRUkNvZGUgPSBuZXcgSkxhYmVsKCk7XG4gICAgICAgIGxibFFSQ29kZS5zZXRIb3Jpem9udGFsQWxpZ25tZW50KFN3aW5nQ29uc3RhbnRzLkNFTlRFUik7XG4gICAgICAgIGxibFFSQ29kZS5zZXRJY29uKGNyZWF0ZUxvYWRpbmdJY29uKDQ4LCA0OCkpO1xuICAgICAgICBwbmxRUkRpc3BsYXkuYWRkKGxibFFSQ29kZSwgQm9yZGVyTGF5b3V0LkNFTlRFUik7XG5cbiAgICAgICAgcG5sVm5wYXlRUi5hZGQocG5sUVJEaXNwbGF5LCBCb3JkZXJMYXlvdXQuQ0VOVEVSKTtcbi4uLlxuXG4gICAgICAgIC8vIExpc3RlbmVyIGNobyBjb21ib2JveCDEkeG7gyBjaHV54buDbiB0YWJcbiAgICAgICAgY21iUGF5bWVudFR5cGUuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBDYXJkTGF5b3V0IGNsID0gKENhcmRMYXlvdXQpIHBubFBheW1lbnRUYWJzLmdldExheW91dCgpO1xuICAgICAgICAgICAgaW50IHNlbGVjdGVkSW5kZXggPSBjbWJQYXltZW50VHlwZS5nZXRTZWxlY3RlZEluZGV4KCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2wuc2hvdyhwbmxQYXltZW50VGFicywgXCJCQU5LX1RSQU5TRkVSXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbC5zaG93KHBubFBheW1lbnRUYWJzLCBcIlZOUEFZX1FSXCIpO1xuICAgICAgICAgICAgICAgIC8vIFThuqFvIFFSIGNvZGUga2hpIGNo4buNbiB0YWIgVk5QYXlcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZVZucGF5UVJDb2RlKGxibFFSQ29kZSwgdmVUYXVIaWVuVGFpLmdldE1hVmUoKSwgdmVUYXVIaWVuVGFpLmdldEdpYVZlKCksIGxibFBheW1lbnRTdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBwbmxUcmFuc2ZlckluZm8uc2V0Qm9yZGVyKEJvcmRlckZhY3RvcnkuY3JlYXRlRW1wdHlCb3JkZXIoMCwgMCwgMTAsIDApKTtcbiAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LmFkZChwbmxUcmFuc2ZlckluZm8sIEJvcmRlckxheW91dC5OT1JUSCk7XG4gICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5hZGQocG5sUGF5bWVudFRhYnMsIEJvcmRlckxheW91dC5DRU5URVIpO1xuXG4gICAgICAgIC8vIE7DunQgbMOgbSBt4bubaSB0cuG6oW5nIHRow6FpIHRoYW5oIHRvw6FuXG4gICAgICAgIGJ0blJlZnJlc2hTdGF0dXMuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBsYmxQYXltZW50U3RhdHVzLCBkaWFsb2cpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIaeG7g24gdGjhu4sgcGFuZWwgcGjGsMahbmcgdGjhu6ljIHRoYW5oIHRvw6FuIGJhbiDEkeG6p3UgKG3hurdjIMSR4buLbmggbMOgIHRp4buBbiBt4bq3dClcbiAgICAgICAgcG5sUGF5bWVudC5hZGQocG5sQ2FzaFBheW1lbnQpO1xuICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgIHBubFBheW1lbnQuYWRkKHBubFRyYW5zZmVyUGF5bWVudCk7XG5cbiAgICAgICAgLy8gVGjDqm0gbGlzdGVuZXIgY2hvIHJhZGlvIGJ1dHRvbiDEkeG7gyBjaHV54buDbiDEkeG7lWkgZ2nhu69hIGPDoWMgcGjGsMahbmcgdGjhu6ljIHRoYW5oIHRvw6FuXG4gICAgICAgIHJhZENhc2guYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBwbmxDYXNoUGF5bWVudC5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgZGlhbG9nLnJldmFsaWRhdGUoKTtcbiAgICAgICAgICAgIGRpYWxvZy5yZXBhaW50KCk7XG4gICAgICAgIH0pO1xuLi4uXG5cbiAgICAgICAgYnRuVGhhbmhUb2FuLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAocmFkQ2FzaC5pc1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gWOG7rSBsw70gdGhhbmggdG/DoW4gdGnhu4FuIG3hurd0XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBpbnB1dCA9IHR4dEN1c3RvbWVyUGF5bWVudC5nZXRUZXh0KCkucmVwbGFjZUFsbChcIlteXFxcXGRdXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVnVpIGzDsm5nIG5o4bqtcCBz4buRIHRp4buBbiBraMOhY2ggxJHGsGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZG91YmxlIGN1c3RvbWVyUGF5bWVudCA9IERvdWJsZS5wYXJzZURvdWJsZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21lclBheW1lbnQgPCB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlPhu5EgdGnhu4FuIGtow6FjaCDEkcawYSBraMO0bmcgxJHhu6dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHh1THlUaGFuaFRvYW4oXCJUSUVOX01BVFwiLCBcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGNoYW5nZSA9IGN1c3RvbWVyUGF5bWVudCAtIHZlVGF1SGllblRhaS5nZXRHaWFWZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1BheW1lbnRTdWNjZXNzRGlhbG9nKGNoYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQWZ0ZXJTdWNjZXNzZnVsUGF5bWVudChkaWFsb2cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4uLi5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gVk5QYXkgUVJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFjDoWMgdGjhu7FjIGzhuqFpIHRy4bqhbmcgdGjDoWkgdGhhbmggdG/DoW4gbeG7mXQgbOG6p24gbuG7r2FcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW4gcGF5bWVudFN1Y2Nlc3MgPSBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBsYmxQYXltZW50U3RhdHVzLCBudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBheW1lbnRTdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1ZucGF5U3VjY2Vzc0RpYWxvZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2jGsGEgbmjhuq1uIMSRxrDhu6NjIHRow7RuZyB0aW4gdGhhbmggdG/DoW4uIFZ1aSBsw7JuZyB0aGFuaCB0b8OhbiBob+G6t2Mga2nhu4NtIHRyYSBs4bqhaS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2jGsGEgdGhhbmggdG/DoW5cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU+G7kSB0aeG7gW4ga2jDtG5nIGjhu6NwIGzhu4dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZXgpIHtcbiAgICAgICAgICAgICAgICBleC5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpIGtoaSB0aGFuaCB0b8OhbjogXCIgKyBleC5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbi4uLlxuXG4gICAgLy8gUGjGsMahbmcgdGjhu6ljIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBWTlBheVxuICAgIHByaXZhdGUgYm9vbGVhbiBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyhTdHJpbmcgbWFWZSwgSkxhYmVsIGxibFN0YXR1cywgSkRpYWxvZyBwYXJlbnREaWFsb2cpIHtcbiAgICAgICAgLy8gVOG6oW8gU3dpbmdXb3JrZXIgxJHhu4Mga2jDtG5nIGzDoG0gxJHGoSBnaWFvIGRp4buHblxuICAgICAgICBTd2luZ1dvcmtlcjxCb29sZWFuLCBWb2lkPiB3b3JrZXIgPSBuZXcgU3dpbmdXb3JrZXI8PigpIHtcbiAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgcHJvdGVjdGVkIEJvb2xlYW4gZG9JbkJhY2tncm91bmQoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJvbmcgbcO0aSB0csaw4budbmcgdGjhu7FjIHThur8sIGLhuqFuIHPhur0gZ+G7jWkgQVBJIFZOUGF5IMSR4buDIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSBnaWFvIGThu4tjaFxuICAgICAgICAgICAgICAgICAgICAvLyDhu54gxJHDonkgY2jDum5nIHRhIHPhur0gbcO0IHBo4buPbmcgdmnhu4djIGtp4buDbSB0cmEsIHRy4bqjIHbhu4Egbmfhuqt1IG5oacOqbiDEkeG7gyBkZW1vXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyb25nIHRo4buxYyB04bq/LCBz4bq9IGtp4buDbSB0cmEgZOG7sWEgdHLDqm4gbcOjIGdpYW8gZOG7i2NoIMSRw6MgbMawdVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIE3DtCBwaOG7j25nIGfhu41pIEFQSSBraeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgKDUwJSBjxqEgaOG7mWkgdGjDoG5oIGPDtG5nKVxuICAgICAgICAgICAgICAgICAgICBUaHJlYWQuc2xlZXAoMTUwMCk7IC8vIE3DtCBwaOG7j25nIHRo4budaSBnaWFuIGfhu41pIEFQSVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJhbmRvbSgpLm5leHRCb29sZWFuKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgcHJpdmF0ZSB2b2lkIGdlbmVyYXRlVm5wYXlRUkNvZGUoSkxhYmVsIGxibFFSQ29kZSwgU3RyaW5nIG1hVmUsIGRvdWJsZSBhbW91bnQsIEpMYWJlbCBsYmxTdGF0dXMpIHtcbiAgICAgICAgLy8gVOG6oW8gU3dpbmdXb3JrZXIgxJHhu4Mga2jDtG5nIGzDoG0gxJHGoSBnaWFvIGRp4buHblxuICAgICAgICBTd2luZ1dvcmtlcjxJbWFnZUljb24sIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgSW1hZ2VJY29uIGRvSW5CYWNrZ3JvdW5kKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFThuqFvIHRoYW0gc+G7kSBjaG8gQVBJIFZOUGF5XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfVHhuUmVmID0gbWFWZSArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOyAvLyBNw6MgdGhhbSBjaGnhur91IGdpYW8gZOG7i2NoXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfQW1vdW50ID0gU3RyaW5nLnZhbHVlT2YoKGxvbmcpKGFtb3VudCAqIDEwMCkpOyAvLyBT4buRIHRp4buBbiAqIDEwMCAoxJHGoW4gduG7iyB4dSlcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9PcmRlckluZm8gPSBcIlRoYW5oIHRvYW4gaG9hIGRvbiB2ZSB0YXUgXCIgKyBtYVZlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVSTCBBUEkgdOG6oW8gbcOjIFFSIGPhu6dhIFZOUGF5ICjEkcOieSBsw6AgVVJMIGdp4bqjIMSR4buLbmgsIGLhuqFuIGPhuqduIHRoYXkgdGjhur8gYuG6sW5nIFVSTCB0aOG7sWMpXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBhcGlVcmwgPSBcImh0dHBzOi8vc2FuZGJveC52bnBheW1lbnQudm4vcGF5bWVudHYyL2NyZWF0ZV9xcl9jb2RlLmh0bWxcIjtcbi4uLlxuXG4gICAgcHJpdmF0ZSB2b2lkIGxhbU1vaSgpIHtcbiAgICAgICAgdHh0TWFWZS5zZXRUZXh0KFwiXCIpO1xuICAgICAgICB0eHRUZW5LaGFjaEhhbmcuc2V0VGV4dChcIlwiKTtcbiAgICAgICAgdHh0R2lheVRvLnNldFRleHQoXCJcIik7XG4gICAgICAgIHR4dE5nYXlEaS5zZXRUZXh0KFwiXCIpO1xuICAgICAgICBjYm9Eb2lUdW9uZy5zZXRTZWxlY3RlZEluZGV4KDApO1xuXG4gICAgICAgIGxibExpY2hUcmluaC5zZXRUZXh0KFwiQ2jGsGEgY2jhu41uXCIpO1xuICAgICAgICBsYmxDaG9OZ29pLnNldFRleHQoXCJDaMawYSBjaOG7jW5cIik7XG5cbiAgICAgICAgbGJsVHJhbmdUaGFpLnNldFRleHQoXCItLS1cIik7XG4gICAgICAgIGxibFRyYW5nVGhhaS5zZXRGb3JlZ3JvdW5kKENvbG9yLkJMQUNLKTtcbiAgICAgICAgbGJsR2lhVmUuc2V0VGV4dChcIjAgVk7EkFwiKTtcblxuICAgICAgICB2ZVRhdUhpZW5UYWkgPSBudWxsO1xuICAgICAgICBsaWNoVHJpbmhEYUNob24gPSBudWxsO1xuICAgICAgICBjaG9OZ29pRGFDaG9uID0gbnVsbDtcbiAgICAgICAga2h1eWVuTWFpRGFDaG9uID0gbnVsbDtcblxuICAgICAgICBzZXRJbnB1dEZpZWxkc0VuYWJsZWQoZmFsc2UpO1xuICAgICAgICBidG5Eb2lWZS5zZXRFbmFibGVkKGZhbHNlKTtcbiAgICAgICAgYnRuQ2hvbkxpY2hUcmluaC5zZXRFbmFibGVkKGZhbHNlKTtcbiAgICAgICAgYnRuQ2hvbkNob05nb2kuc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgICAgIHVwZGF0ZVN0YXR1cyhSRUFEWV9URVhULCBmYWxzZSk7XG4gICAgfVxuLi4uXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFLbWsyYkR5V0YzRHZhdjI4b0I1Y3RtIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmciLCJmb2xkZXJSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiTGV0IG1lIGdhdGhlciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWxhdGVkIGNsYXNzZXMgYW5kIGludGVyZmFjZXMgdGhhdCB3aWxsIGJlIG5lZWRlZCBmb3IgaW1wbGVtZW50aW5nIHRoZSB0aWNrZXQgZXhjaGFuZ2UgZnVuY3Rpb25hbGl0eS5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI3MDQ5MjI2NS0wNGUwLTQzNzMtYWY5Mi0zZTcwOWRkNDQ1ZjMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFTMnZGUW9VaW00NjhTS0tBZGdOM0FTIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTaG93IG1lIHRoZSBDaGlUaWV0SG9hRG9uREFPIGludGVyZmFjZSwgaXRzIGltcGxlbWVudGF0aW9uLCBhbmQgYW55IG1ldGhvZHMgcmVsYXRlZCB0byBjcmVhdGluZyBuZXcgaW52b2ljZXMgYW5kIGludm9pY2UgZGV0YWlsc1wifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0IG1lIGdhdGhlciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBDaGlUaWV0SG9hRG9uREFPIGFuZCByZWxhdGVkIGNsYXNzZXMgdG8gdW5kZXJzdGFuZCBob3cgdG8gaW1wbGVtZW50IHRoZSB0aWNrZXQgZXhjaGFuZ2UgZnVuY3Rpb25hbGl0eS5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvVmVUYXUuamF2YVxuLi4uXG5cbkBFbnRpdHlcbkBEYXRhXG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5AVGFibGUobmFtZSA9IFwidmV0YXVcIilcbnB1YmxpYyBjbGFzcyBWZVRhdSBpbXBsZW1lbnRzIFNlcmlhbGl6YWJsZSB7XG4gICAgQElkXG4gICAgQENvbHVtbihuYW1lID0gXCJtYV92ZVwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJWQVJDSEFSKDI1NSlcIiwgdW5pcXVlID0gdHJ1ZSwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIFN0cmluZyBtYVZlO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidGVuX2toYWNoX2hhbmdcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiVkFSQ0hBUigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UpXG5cbiAgICBwcml2YXRlIFN0cmluZyB0ZW5LaGFjaEhhbmc7XG4gICAgQENvbHVtbihuYW1lID0gXCJnaWF5X3RvXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIlZBUkNIQVIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuXG4gICAgcHJpdmF0ZSBTdHJpbmcgZ2lheVRvO1xuICAgIEBDb2x1bW4obmFtZSA9IFwibmdheV9kaVwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJEQVRFXCIsbnVsbGFibGUgPSBmYWxzZSlcblxuICAgIHByaXZhdGUgTG9jYWxEYXRlIG5nYXlEaTtcbiAgICBAQ29sdW1uKG5hbWUgPSBcImRvaV90dW9uZ1wiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJWQVJDSEFSKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSlcblxuICAgIHByaXZhdGUgU3RyaW5nIGRvaVR1b25nO1xuICAgIEBDb2x1bW4obmFtZSA9IFwiZ2lhX3ZlXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIkZMT0FUXCIsIG51bGxhYmxlID0gZmFsc2UpXG5cbiAgICBwcml2YXRlIGRvdWJsZSBnaWFWZTtcblxuICAgIEBFbnVtZXJhdGVkKEVudW1UeXBlLlNUUklORylcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRyYW5nX3RoYWlcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiVkFSQ0hBUigyNTUpXCIsbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaTtcblxuICAgIEBNYW55VG9PbmVcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJsaWNoX3RyaW5oX3RhdV9tYV9saWNoXCIsIHJlZmVyZW5jZWRDb2x1bW5OYW1lID0gXCJtYV9saWNoXCIpXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBwcml2YXRlIExpY2hUcmluaFRhdSBsaWNoVHJpbmhUYXU7XG5cbiAgICBATWFueVRvT25lXG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwia2h1eWVuX21haV9tYV9rbVwiLCByZWZlcmVuY2VkQ29sdW1uTmFtZSA9IFwibWFfa21cIilcbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIHByaXZhdGUgS2h1eWVuTWFpIGtodXllbk1haTtcblxuICAgIEBPbmVUb09uZVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcImNob19uZ29pX21hX2Nob1wiLHJlZmVyZW5jZWRDb2x1bW5OYW1lID0gXCJtYV9jaG9cIilcbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgICBwcml2YXRlIENob05nb2kgY2hvTmdvaTtcblxuLy8gICAgQE1hbnlUb01hbnkobWFwcGVkQnkgPSBcInZlVGF1c1wiKVxuLy8gICAgcHJpdmF0ZSBTZXQ8SG9hRG9uPiBob2FEb25zO1xuXG4gICAgLy8gTeG7kWkgcXVhbiBo4buHIHbhu5tpIENoaVRpZXRIb2FEb25cbiAgICBAT25lVG9NYW55KG1hcHBlZEJ5ID0gXCJ2ZVRhdVwiLCBmZXRjaCA9IEZldGNoVHlwZS5MQVpZKVxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgcHJpdmF0ZSBTZXQ8Q2hpVGlldEhvYURvbj4gY2hpVGlldEhvYURvbnM7XG5cbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vVmVUYXVEQU8uamF2YVxucGFja2FnZSBkYW87XG5cbmltcG9ydCBtb2RlbC5Ib2FEb247XG5pbXBvcnQgbW9kZWwuS2hhY2hIYW5nO1xuaW1wb3J0IG1vZGVsLlZlVGF1O1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlO1xuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTWFwO1xuXG4vKipcbiAqIEBE4buxIMOhbjogUGhhblRhbkphdmFOaG9tR1BUXG4gKiBAQ2xhc3M6IFZlREFPXG4gKiBAVOG6oW8gdsOgbyBuZ8OgeTogMTgvMDQvMjAyNVxuICogQFTDoWMgZ2nhuqM6IE5ndXllbiBIdXUgU2FuZ1xuICovXG5wdWJsaWMgaW50ZXJmYWNlIFZlVGF1REFPIGV4dGVuZHMgUmVtb3RlIHtcbiAgICBib29sZWFuIHNhdmUoVmVUYXUgdmVUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxWZVRhdT4gZ2V0QWxsTGlzdCgpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgVmVUYXUgZ2V0QnlJZChTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB1cGRhdGUoVmVUYXUgdmVUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBkZWxldGUoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8VmVUYXU+IGdldEJ5SW52b2ljZUlkKFN0cmluZyBpbnZvaWNlSWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBib29sZWFuIHVwZGF0ZVN0YXR1c1RvUmV0dXJuZWQoU3RyaW5nIHRpY2tldElkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIEhvYURvbiBnZXRIb2FEb25UaGFuaFRvYW5CeU1hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgS2hhY2hIYW5nIGdldEtoYWNoSGFuZ0J5TWFWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIE1hcDxTdHJpbmcsIFN0cmluZz4gZ2V0VGhvbmdUaW5HYUJ5TWFWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvVHJhbmdUaGFpVmVUYXUuamF2YVxucGFja2FnZSBtb2RlbDtcblxucHVibGljIGVudW0gVHJhbmdUaGFpVmVUYXUge1xuICAgIENIT19YQUNfTkhBTihcIkNo4budIHjDoWMgbmjhuq1uXCIpLFxuICAgIERBX1RIQU5IX1RPQU4oXCLEkMOjIHRoYW5oIHRvw6FuXCIpLFxuICAgIERBX0RPSShcIsSQw6MgxJHhu5VpXCIpLFxuICAgIERBX1RSQShcIsSQw6MgdHLhuqNcIik7XG5cbiAgICBwcml2YXRlIGZpbmFsIFN0cmluZyB2YWx1ZTtcblxuICAgIFRyYW5nVGhhaVZlVGF1KFN0cmluZyB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIFN0cmluZyBnZXRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgVHJhbmdUaGFpVmVUYXUgZnJvbVZhbHVlKFN0cmluZyB2YWx1ZSkge1xuICAgICAgICBmb3IgKFRyYW5nVGhhaVZlVGF1IHN0YXR1cyA6IFRyYW5nVGhhaVZlVGF1LnZhbHVlcygpKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzLnZhbHVlLmVxdWFscyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oXCJObyBlbnVtIGNvbnN0YW50IGZvciB2YWx1ZTogXCIgKyB2YWx1ZSk7XG4gICAgfVxufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9MaWNoVHJpbmhUYXUuamF2YVxuLi4uXG5cbkBFbnRpdHlcbkBEYXRhXG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5AVGFibGUobmFtZSA9IFwibGljaHRyaW5odGF1XCIpXG5wdWJsaWMgY2xhc3MgTGljaFRyaW5oVGF1IGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBASWRcbiAgICBAQ29sdW1uKG5hbWUgPSBcIm1hX2xpY2hcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiVkFSQ0hBUigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UsIHVuaXF1ZSA9IHRydWUpXG4gICAgcHJpdmF0ZSBTdHJpbmcgbWFMaWNoO1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJnaW9fZGlcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiVElNRVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgTG9jYWxUaW1lIGdpb0RpO1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJuZ2F5X2RpXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIkRBVEVcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIExvY2FsRGF0ZSBuZ2F5RGk7XG5cbiAgICBARW51bWVyYXRlZChFbnVtVHlwZS5TVFJJTkcpXG4gICAgQENvbHVtbihuYW1lID0gXCJ0cmFuZ190aGFpXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIk5WQVJDSEFSKDUwKVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgVHJhbmdUaGFpIHRyYW5nVGhhaTtcblxuICAgIEBNYW55VG9PbmVcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJ0YXVfbWFfdGF1XCIsIHJlZmVyZW5jZWRDb2x1bW5OYW1lID0gXCJtYV90YXVcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIFRhdSB0YXU7XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvVGF1LmphdmFcbi4uLlxuXG5ARGF0YVxuQEVudGl0eVxuQEVxdWFsc0FuZEhhc2hDb2RlKG9ubHlFeHBsaWNpdGx5SW5jbHVkZWQgPSB0cnVlKVxuQFRhYmxlKG5hbWUgPSBcInRhdVwiKVxucHVibGljIGNsYXNzIFRhdSBpbXBsZW1lbnRzIFNlcmlhbGl6YWJsZSB7XG4gICAgQElkXG4gICAgQEVxdWFsc0FuZEhhc2hDb2RlLkluY2x1ZGVcbiAgICBAQ29sdW1uKG5hbWUgPSBcIm1hX3RhdVwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJ2YXJjaGFyKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSwgdW5pcXVlID0gdHJ1ZSlcbiAgICBwcml2YXRlIFN0cmluZyBtYVRhdTsgLy8gTcOjIHTDoHVcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRlbl90YXVcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwidmFyY2hhcigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgQEVxdWFsc0FuZEhhc2hDb2RlLkV4Y2x1ZGVcbiAgICBwcml2YXRlIFN0cmluZyB0ZW5UYXU7XG4gICAgQENvbHVtbihuYW1lID0gXCJzb190b2FcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuRXhjbHVkZS8vIFTDqm4gdMOgdVxuICAgIHByaXZhdGUgaW50IHNvVG9hO1xuICAgIC8vIFPhu5EgdG9hXG4gICAgQE1hbnlUb09uZShmZXRjaCA9IEZldGNoVHlwZS5MQVpZKVxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfdHV5ZW5cIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIFR1eWVuVGF1IHR1eWVuVGF1OyAvLyDEkOG7kWkgdMaw4bujbmcgVHV5ZW5UYXVcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vRG9pVmVEQU8uamF2YVxucGFja2FnZSBkYW87XG5cbmltcG9ydCBtb2RlbC5DaG9OZ29pO1xuaW1wb3J0IG1vZGVsLktoYWNoSGFuZztcbmltcG9ydCBtb2RlbC5UcmFuZ1RoYWlWZVRhdTtcbmltcG9ydCBtb2RlbC5WZVRhdTtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZTtcbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5cbnB1YmxpYyBpbnRlcmZhY2UgRG9pVmVEQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIFZlVGF1IGdldFZlVGF1KFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGRvaVZlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8VmVUYXU+IGdldFZlVGF1QnlUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gdGVzdENvbm5lY3Rpb24oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8VHJhbmdUaGFpVmVUYXU+IGdldEFsbFRyYW5nVGhhaVZlKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIFRow6ptIGNo4bupYyBuxINuZyBt4bubaVxuICAgIGJvb2xlYW4gZGF0VmUoVmVUYXUgdmVUYXUsIFN0cmluZyBjaG9OZ29pSWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBodXlWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHRoYW5oVG9hblZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gY2FwTmhhdFRyYW5nVGhhaVZlKFN0cmluZyBtYVZlLCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgS2hhY2hIYW5nIGdldEtoYWNoSGFuZ0J5TWFWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvS2V0UXVhVGhvbmdLZVZlLmphdmFcbnBhY2thZ2UgbW9kZWw7XG5cbmltcG9ydCBsb21ib2suRGF0YTtcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGU7XG5cbi8qKlxuICogQ2xhc3MgY2jhu6lhIGvhur90IHF14bqjIHRo4buRbmcga8OqIHbDqSB0w6B1XG4gKi9cbkBEYXRhXG5wdWJsaWMgY2xhc3MgS2V0UXVhVGhvbmdLZVZlIGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBsb25nIHNlcmlhbFZlcnNpb25VSUQgPSAxTDtcblxuICAgIHByaXZhdGUgTG9jYWxEYXRlIHRob2lHaWFuO1xuICAgIHByaXZhdGUgVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpO1xuICAgIHByaXZhdGUgU3RyaW5nIHRlblR1eWVuO1xuICAgIHByaXZhdGUgU3RyaW5nIGxvYWlUb2E7XG4gICAgcHJpdmF0ZSBpbnQgc29MdW9uZztcbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvVG9hVGF1LmphdmFcbi4uLlxuXG5wdWJsaWMgY2xhc3MgVG9hVGF1IGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcblxuICAgIEBJZFxuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5JbmNsdWRlXG4gICAgQENvbHVtbihuYW1lID0gXCJtYV90b2FcIixjb2x1bW5EZWZpbml0aW9uID0gXCJ2YXJjaGFyKDI1NSlcIixudWxsYWJsZSA9IGZhbHNlLCB1bmlxdWUgPSB0cnVlKVxuICAgIHByaXZhdGUgU3RyaW5nIG1hVG9hO1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJ0ZW5fdG9hXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcInZhcmNoYXIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgU3RyaW5nIHRlblRvYTtcblxuICAgIEBDb2x1bW4obmFtZSA9IFwic29fZ2hlXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBpbnQgc29HaGU7XG5cbiAgICBAQ29sdW1uKG5hbWUgPSBcInRodV90dVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgaW50IHRodVR1O1xuXG4gICAgQE9uZVRvTWFueShtYXBwZWRCeSA9IFwidG9hVGF1XCIsIGNhc2NhZGUgPSBDYXNjYWRlVHlwZS5BTEwsIG9ycGhhblJlbW92YWwgPSB0cnVlKVxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgcHJpdmF0ZSBTZXQ8Q2hvTmdvaT4gZGFuaFNhY2hDaG9OZ29pO1xuXG4gICAgQE1hbnlUb09uZShmZXRjaCA9IEZldGNoVHlwZS5MQVpZKVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX2xvYWlfdG9hXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBwcml2YXRlIExvYWlUb2EgbG9haVRvYTtcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9WZVRhdURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGRhby5WZVRhdURBTztcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eU1hbmFnZXI7XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlUcmFuc2FjdGlvbjtcbmltcG9ydCBtb2RlbC5Ib2FEb247XG5pbXBvcnQgbW9kZWwuS2hhY2hIYW5nO1xuaW1wb3J0IG1vZGVsLlRyYW5nVGhhaVZlVGF1O1xuaW1wb3J0IG1vZGVsLlZlVGF1O1xuaW1wb3J0IHV0aWwuSlBBVXRpbDtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlbW90ZU9iamVjdDtcbmltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTWFwO1xuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL1RyYW5nVGhhaS5qYXZhXG5wYWNrYWdlIG1vZGVsO1xuXG5wdWJsaWMgZW51bSBUcmFuZ1RoYWkge1xuICAgIERBX0tIT0lfSEFOSChcIsSQw6Mga2jhu59pIGjDoG5oXCIpLFxuICAgIENIVUFfS0hPSV9IQU5IKFwiQ2jGsGEga2jhu59pIGjDoG5oXCIpLFxuICAgIERBX0hVWShcIsSQw6MgaOG7p3lcIiksXG4gICAgSE9BVF9ET05HKFwiSG/huqF0IMSR4buZbmdcIik7XG5cbiAgICBwcml2YXRlIGZpbmFsIFN0cmluZyB2YWx1ZTtcblxuICAgIFRyYW5nVGhhaShTdHJpbmcgdmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIFRyYW5nVGhhaSBmcm9tVmFsdWUoU3RyaW5nIHZhbHVlKSB7XG4gICAgICAgIGZvciAoVHJhbmdUaGFpIHN0YXR1cyA6IFRyYW5nVGhhaS52YWx1ZXMoKSkge1xuICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZS5lcXVhbHModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKFwiTm8gZW51bSBjb25zdGFudCBmb3IgdmFsdWU6IFwiICsgdmFsdWUpO1xuICAgIH1cbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL1RyYUN1dVZlREFPLmphdmFcbi4uLlxuXG5wdWJsaWMgaW50ZXJmYWNlIFRyYUN1dVZlREFPIGV4dGVuZHMgUmVtb3RlIHtcblxuICAgIFZlVGF1IHRpbVZlVGF1VGhlb01hKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxWZVRhdT4gdGltRGFuaFNhY2hWZVRhdVRoZW9NYShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIENoaVRpZXRIb2FEb24gdGltQ2hpVGlldEhvYURvblRoZW9NYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxWZVRhdT4gdGltVmVUYXVUaGVvR2lheVRvKFN0cmluZyBnaWF5VG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBMaXN0PFZlVGF1PiB0aW1WZVRhdVRoZW9UZW5LSChTdHJpbmcgdGVuS2hhY2hIYW5nKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxWZVRhdT4gdGltVmVUYXVUaGVvQ2hpdGlldChTdHJpbmcgdGVuS2hhY2hIYW5nLCBTdHJpbmcgZ2lheVRvLCBMb2NhbERhdGUgbmdheURpLCBTdHJpbmcgbWFDaG9OZ29pLCBTdHJpbmcgZG9pVHVvbmcpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBMaXN0PFZlVGF1PiB0aW1WZVRhdVRoZW9UZW5LSFZhVGhvaUdpYW4oU3RyaW5nIGhvVGVuLCBMb2NhbERhdGUgbmdheURpRnJvbSwgTG9jYWxEYXRlIG5nYXlEaVRvKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgYm9vbGVhbiB0ZXN0Q29ubmVjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59Li4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9TY3JpcHQvc2NyaXB0LnNxbFxuc2VsZWN0ICogZnJvbSB0b2F0YXU7XG5zZWxlY3QgKiBmcm9tIHRhdTtcbnNlbGVjdCAqIGZyb20gdHV5ZW50YXU7XG5zZWxlY3QgKiBmcm9tIGxvYWl0b2E7XG4jbmF0aXZlIHF1ZXJ5XG5zZWxlY3QgKiBmcm9tIHRvYXRhdSB3aGVyZSBzb19naGUgYmV0d2VlbiA3NSBhbmQgODA7XG5cbnNlbGVjdCAqIGZyb20gdGFpa2hvYW47XG5zZWxlY3QgKiBmcm9tIG5oYW52aWVuO1xuc2VsZWN0ICogZnJvbSBsaWNobGFtdmllYztcbnNlbGVjdCAqIGZyb20ga2hhY2hoYW5nO1xuc2VsZWN0ICogZnJvbSBob2Fkb247XG5zZWxlY3QgKiBmcm9tIGNoaXRpZXRfaG9hZG9uO1xuXG5TRUxFQ1QgRElTVElOQ1QgdHJhbmdfdGhhaSBGUk9NIGxpY2h0cmluaHRhdTtcblxuVVBEQVRFIHZldGF1IFNFVCB0cmFuZ190aGFpID0gJ0RBX1RSQScgV0hFUkUgdHJhbmdfdGhhaSA9ICfEkMOjIHRy4bqjJztcblxuc2VsZWN0ICogZnJvbSB2ZXRhdVxuXG5cbnNlbGVjdCAqIGZyb20ga2hhY2hoYW5nO1xuc2VsZWN0ICogZnJvbSBsb2Fpa2hhY2hoYW5nO1xuXG5zZWxlY3QgKiBmcm9tIGhvYWRvbjtcbnNlbGVjdCAqIGZyb20gbG9haWhvYWRvbjtcbnNlbGVjdCAqIGZyb20gY2hpdGlldF9ob2Fkb247XG5cbnNlbGVjdCAqIGZyb20ga2h1eWVubWFpO1xuc2VsZWN0ICogZnJvbSBsb2FpY2hvO1xuXG5cbnNlbGVjdCAqIGZyb20gdmV0YXU7XG5cbkRFTEVURSBGUk9NIGNoaXRpZXRfaG9hZG9uO1xuREVMRVRFIEZST00gdmV0YXU7XG5BTFRFUiBUQUJMRSB2ZXRhdSBBVVRPX0lOQ1JFTUVOVCA9IDE7XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL1RhdURBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxuaW1wb3J0IG1vZGVsLkxpY2hUcmluaFRhdTtcbmltcG9ydCBtb2RlbC5UYXU7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGU7XG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuXG5wdWJsaWMgaW50ZXJmYWNlIFRhdURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgTGlzdDxUYXU+IGdldEFsbExpc3RUKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFRhdT4gZ2V0QWxsV2l0aFJvdXRlcygpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgcHVibGljIFRhdSBnZXRUYXVCeUxpY2hUcmluaFRhdShMaWNoVHJpbmhUYXUgbGljaFRyaW5oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL0hvYURvbi5qYXZhXG5wYWNrYWdlIG1vZGVsO1xuXG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLio7XG5pbXBvcnQgbG9tYm9rLkRhdGE7XG5pbXBvcnQgbG9tYm9rLkVxdWFsc0FuZEhhc2hDb2RlO1xuaW1wb3J0IGxvbWJvay5Ub1N0cmluZztcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGU7XG5pbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZVRpbWU7XG5pbXBvcnQgamF2YS51dGlsLk9iamVjdHM7XG5pbXBvcnQgamF2YS51dGlsLlNldDtcblxuQERhdGFcbkBFbnRpdHlcbkBUYWJsZShuYW1lID0gXCJob2Fkb25cIilcbkBFcXVhbHNBbmRIYXNoQ29kZShvbmx5RXhwbGljaXRseUluY2x1ZGVkID0gdHJ1ZSlcbnB1YmxpYyBjbGFzcyBIb2FEb24gaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuICAgIEBJZFxuICAgIEBDb2x1bW4obmFtZSA9IFwibWFfaGRcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwidmFyY2hhcigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UsIHVuaXF1ZSA9IHRydWUpXG4gICAgQEVxdWFsc0FuZEhhc2hDb2RlLkluY2x1ZGVcbiAgICBwcml2YXRlIFN0cmluZyBtYUhEO1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJuZ2F5X2xhcFwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJkYXRldGltZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgTG9jYWxEYXRlVGltZSBuZ2F5TGFwO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidGllbl9naWFtXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcImRvdWJsZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgZG91YmxlIHRpZW5HaWFtO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidG9uZ190aWVuXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcImRvdWJsZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgZG91YmxlIHRvbmdUaWVuO1xuXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBATWFueVRvT25lKGZldGNoID0gRmV0Y2hUeXBlLkxBWlkpXG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfa2hhY2hfaGFuZ1wiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgS2hhY2hIYW5nIGtoYWNoSGFuZztcblxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgQE1hbnlUb09uZShmZXRjaCA9IEZldGNoVHlwZS5MQVpZKVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX25oYW5fdmllblwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgTmhhblZpZW4gbnY7XG5cbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIEBNYW55VG9PbmUoZmV0Y2ggPSBGZXRjaFR5cGUuTEFaWSlcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJtYV9sb2FpX2hkXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBMb2FpSG9hRG9uIGxvYWlIb2FEb247XG5cbi8vICAgIEBNYW55VG9NYW55XG4vLyAgICBASm9pblRhYmxlKG5hbWUgPSBcImNoaXRpZXRfaG9hZG9uXCIsXG4vLyAgICAgICAgICAgIGpvaW5Db2x1bW5zID0gQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfaGRcIiksXG4vLyAgICAgICAgICAgIGludmVyc2VKb2luQ29sdW1ucyA9IEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX3ZlXCIpKVxuLy8gICAgcHJpdmF0ZSBTZXQ8VmVUYXU+IHZlVGF1cztcblxuICAgIEBPbmVUb01hbnkobWFwcGVkQnkgPSBcImhvYURvblwiKVxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgcHJpdmF0ZSBTZXQ8Q2hpVGlldEhvYURvbj4gY2hpVGlldEhvYURvbnM7XG59XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvQ2hpVGlldEhvYURvbi5qYXZhXG5wYWNrYWdlIG1vZGVsO1xuXG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS4qO1xuaW1wb3J0IGxvbWJvay5EYXRhO1xuaW1wb3J0IGxvbWJvay5Ub1N0cmluZztcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuXG5ARGF0YVxuQEVudGl0eVxuQFRhYmxlKG5hbWUgPSBcImNoaXRpZXRfaG9hZG9uXCIpXG5wdWJsaWMgY2xhc3MgQ2hpVGlldEhvYURvbiBpbXBsZW1lbnRzIFNlcmlhbGl6YWJsZSB7XG5cbiAgICBARW1iZWRkZWRJZFxuICAgIHByaXZhdGUgQ2hpVGlldEhvYURvbklkIGlkO1xuXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBATWFueVRvT25lKGZldGNoID0gRmV0Y2hUeXBlLkxBWlkpXG4gICAgQE1hcHNJZChcIm1hSERcIikgIC8vIE1hcHMgbWFIRCBpbiB0aGUgY29tcG9zaXRlIGtleVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX2hkXCIsIHJlZmVyZW5jZWRDb2x1bW5OYW1lID0gXCJtYV9oZFwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgSG9hRG9uIGhvYURvbjtcblxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgQE1hbnlUb09uZShmZXRjaCA9IEZldGNoVHlwZS5MQVpZKVxuICAgIEBNYXBzSWQoXCJtYVZlXCIpICAvLyBNYXBzIG1hVmUgaW4gdGhlIGNvbXBvc2l0ZSBrZXlcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJtYV92ZVwiLCByZWZlcmVuY2VkQ29sdW1uTmFtZSA9IFwibWFfdmVcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIFZlVGF1IHZlVGF1O1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJzb19sdW9uZ1wiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgaW50IHNvTHVvbmc7XG5cbiAgICBAQ29sdW1uKG5hbWUgPSBcIlZBVFwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgZG91YmxlIFZBVDtcblxuICAgIEBDb2x1bW4obmFtZSA9IFwidGhhbmhfdGllblwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgZG91YmxlIHRoYW5oVGllbjtcblxuICAgIEBDb2x1bW4obmFtZSA9IFwidGllbl90aHVlXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBkb3VibGUgdGllblRodWU7XG5cblxufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL0NoaVRpZXRIb2FEb25JZC5qYXZhXG5wYWNrYWdlIG1vZGVsO1xuXG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbWJlZGRhYmxlO1xuaW1wb3J0IGxvbWJvay5EYXRhO1xuaW1wb3J0IGxvbWJvay5FcXVhbHNBbmRIYXNoQ29kZTtcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuaW1wb3J0IGphdmEudXRpbC5PYmplY3RzO1xuQERhdGFcbkBFbWJlZGRhYmxlXG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5wdWJsaWMgY2xhc3MgQ2hpVGlldEhvYURvbklkIGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuSW5jbHVkZVxuICAgIHByaXZhdGUgU3RyaW5nIG1hSEQ7XG4gICAgQEVxdWFsc0FuZEhhc2hDb2RlLkluY2x1ZGVcbiAgICBwcml2YXRlIFN0cmluZyBtYVZlO1xuXG59XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvTG9haUhvYURvbi5qYXZhXG5wYWNrYWdlIG1vZGVsO1xuXG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLio7XG5pbXBvcnQgbG9tYm9rLkRhdGE7XG5pbXBvcnQgbG9tYm9rLkVxdWFsc0FuZEhhc2hDb2RlO1xuaW1wb3J0IGxvbWJvay5Ub1N0cmluZztcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuaW1wb3J0IGphdmEudXRpbC5TZXQ7XG5cbkBEYXRhXG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5ARW50aXR5XG5AVGFibGUobmFtZSA9IFwibG9haWhvYWRvblwiKVxuQFRvU3RyaW5nXG5wdWJsaWMgY2xhc3MgTG9haUhvYURvbiBpbXBsZW1lbnRzIFNlcmlhbGl6YWJsZSB7XG4gICAgQElkXG4gICAgQENvbHVtbihuYW1lID0gXCJtYV9sb2FpX2hkXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcInZhcmNoYXIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlLCB1bmlxdWUgPSB0cnVlKVxuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5JbmNsdWRlXG4gICAgcHJpdmF0ZSBTdHJpbmcgbWFMb2FpSG9hRG9uO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidGVuX2xvYWlfaGRcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiTlZBUkNIQVIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgU3RyaW5nIHRlbkxvYWlIb2FEb247XG5cbiAgICBAT25lVG9NYW55KG1hcHBlZEJ5ID0gXCJsb2FpSG9hRG9uXCIpXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBwcml2YXRlIFNldDxIb2FEb24+IGhvYURvbnM7XG5cblxuXG5cbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9DaG9OZ29pLmphdmFcbnBhY2thZ2UgbW9kZWw7XG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLio7XG5pbXBvcnQgbG9tYm9rLkRhdGE7XG5pbXBvcnQgbG9tYm9rLkVxdWFsc0FuZEhhc2hDb2RlO1xuaW1wb3J0IGxvbWJvay5Ub1N0cmluZztcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuXG5ARW50aXR5XG5ARGF0YVxuQEVxdWFsc0FuZEhhc2hDb2RlKG9ubHlFeHBsaWNpdGx5SW5jbHVkZWQgPSB0cnVlKVxuQFRhYmxlKG5hbWUgPSBcImNob19uZ29pXCIpXG5wdWJsaWMgY2xhc3MgQ2hvTmdvaSBpbXBsZW1lbnRzIFNlcmlhbGl6YWJsZSB7XG4gICAgQElkXG4gICAgQEVxdWFsc0FuZEhhc2hDb2RlLkluY2x1ZGVcbiAgICBAQ29sdW1uKG5hbWUgPSBcIm1hX2Nob1wiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJWQVJDSEFSKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSwgdW5pcXVlID0gdHJ1ZSlcbiAgICBwcml2YXRlIFN0cmluZyBtYUNobztcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRlbl9jaG9cIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiTlZBUkNIQVIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgU3RyaW5nIHRlbkNobztcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRpbmhfdHJhbmdcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiQklUXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBib29sZWFuIHRpbmhUcmFuZztcbiAgICBAQ29sdW1uKG5hbWUgPSBcImdpYV90aWVuXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIkZMT0FUXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBkb3VibGUgZ2lhVGllbjtcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9Ib2FEb25EQU9JbXBsLmphdmFcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgLy8gQ3JlYXRlOiBUaMOqbSBow7NhIMSRxqFuIG3hu5tpXG4gICAgcHVibGljIGJvb2xlYW4gc2F2ZUhvYURvbihIb2FEb24gaG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0ciA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0ci5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHhlbSBtw6MgaMOzYSDEkcahbiDEkcOjIMSRxrDhu6NjIHRoaeG6v3QgbOG6rXAgY2jGsGFcbiAgICAgICAgICAgIGlmIChob2FEb24uZ2V0TWFIRCgpID09IG51bGwgfHwgaG9hRG9uLmdldE1hSEQoKS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAvLyBO4bq/dSBjaMawYSBjw7MgbcOjIGjDs2EgxJHGoW4sIHThu7EgxJHhu5luZyBzaW5oIG3Do1xuICAgICAgICAgICAgICAgIFN0cmluZyBtYUhEID0gZ2VuZXJhdGVNYUhvYURvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvYURvbi5nZXROZ2F5TGFwKCkgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvYURvbi5nZXROZ2F5TGFwKCkudG9Mb2NhbERhdGUoKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvY2FsRGF0ZS5ub3coKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaG9hRG9uLnNldE1hSEQobWFIRCk7XG4gICAgICAgICAgICB9XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvTG9haUNoby5qYXZhXG5wYWNrYWdlIG1vZGVsO1xuXG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS4qO1xuaW1wb3J0IGxvbWJvay5EYXRhO1xuaW1wb3J0IGxvbWJvay5FcXVhbHNBbmRIYXNoQ29kZTtcbmltcG9ydCBsb21ib2suVG9TdHJpbmc7XG5cbmltcG9ydCBqYXZhLmlvLlNlcmlhbGl6YWJsZTtcbmltcG9ydCBqYXZhLnV0aWwuU2V0O1xuXG5ARW50aXR5XG5ARGF0YVxuQEVxdWFsc0FuZEhhc2hDb2RlKG9ubHlFeHBsaWNpdGx5SW5jbHVkZWQgPSB0cnVlKVxuQFRhYmxlKG5hbWUgPSBcImxvYWljaG9cIilcbnB1YmxpYyBjbGFzcyBMb2FpQ2hvIGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBASWRcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuSW5jbHVkZVxuICAgIEBDb2x1bW4obmFtZSA9IFwibWFfbG9haVwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJWQVJDSEFSKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSx1bmlxdWUgPSB0cnVlKVxuICAgIHByaXZhdGUgU3RyaW5nIG1hTG9haTtcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRlbl9sb2FpXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIk5WQVJDSEFSKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIFN0cmluZyB0ZW5Mb2FpO1xuXG5cbiAgICBAT25lVG9NYW55KG1hcHBlZEJ5ID0gXCJsb2FpQ2hvXCIpXG4gICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIHByaXZhdGUgU2V0PENob05nb2k+IGNob19uZ29pcztcbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vSG9hRG9uREFPLmphdmFcbi4uLlxuXG4vKipcbiAqIEBE4buxIMOhbjogUGhhblRhbkphdmFOaG9tR1BUXG4gKiBASW50ZXJmYWNlOiBIb2FEb25EQU9cbiAqIEBU4bqhbyB2w6BvIG5nw6B5OiAxOC8wNC8yMDI1XG4gKiBAVMOhYyBnaeG6ozogTmd1eWVuIEh1dSBTYW5nXG4gKi9cbnB1YmxpYyBpbnRlcmZhY2UgSG9hRG9uREFPIGV4dGVuZHMgUmVtb3RlIHtcbiAgICAvLyBDcmVhdGU6IFRow6ptIGjDs2EgxJHGoW4gbeG7m2lcbiAgICBib29sZWFuIHNhdmVIb2FEb24oSG9hRG9uIGhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIFJlYWQ6IEzhuqV5IGRhbmggc8OhY2ggaMOzYSDEkcahblxuICAgIExpc3Q8SG9hRG9uPiBnZXRBbGxIb2FEb25zKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIFJlYWQ6IFTDrG0gaMOzYSDEkcahbiB0aGVvIG3DoyBow7NhIMSRxqFuXG4gICAgSG9hRG9uIGdldEhvYURvbkJ5SWQoU3RyaW5nIG1hSEQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBVcGRhdGU6IEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIGjDs2EgxJHGoW5cbiAgICBib29sZWFuIHVwZGF0ZUhvYURvbihIb2FEb24gaG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gRGVsZXRlOiBYw7NhIGjDs2EgxJHGoW4gdGhlbyBtw6MgaMOzYSDEkcahblxuICAgIGJvb2xlYW4gZGVsZXRlSG9hRG9uKFN0cmluZyBtYUhEKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gUmV0cmlldmUgaW52b2ljZXMgYnkgY3VzdG9tZXIgSURcbiAgICBMaXN0PEhvYURvbj4gZ2V0QnlDdXN0b21lcklkKFN0cmluZyBjdXN0b21lcklkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgU3RyaW5nIGdlbmVyYXRlTWFIb2FEb24oTG9jYWxEYXRlIG5nYXkpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTG9haUhvYURvbiBnZXRMb2FpSG9hRG9uQnlJZChTdHJpbmcgbWFMb2FpSEQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBMaXN0PEhvYURvbj4gdGltS2llbUhvYURvbihTdHJpbmcgbWFIb2FEb24sIFN0cmluZyBzb0RpZW5UaG9haSwgU3RyaW5nIG1hTmhhblZpZW4sICAgTG9jYWxEYXRlIHR1TmdheSwgTG9jYWxEYXRlIGRlbk5nYXkpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBIb2FEb24gZ2V0SG9hRG9uQnlNYShTdHJpbmcgbWFIb2FEb24pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxIb2FEb24+IGdldEhvYURvbnNCeURhdGVSYW5nZShMb2NhbERhdGUgc3RhcnREYXRlLCBMb2NhbERhdGUgZW5kRGF0ZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PEhvYURvbj4gZ2V0SG9hRG9uc0J5RGF0ZVJhbmdlQW5kU2hpZnQoTG9jYWxEYXRlIHN0YXJ0RGF0ZSwgTG9jYWxEYXRlIGVuZERhdGUsIGludCBjYSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvdGVzdENSVUQvQ2hpVGlldEhvYURvbkRBT1Rlc3QuamF2YVxuLi4uXG4vLyAgICAgICAgQ2hpVGlldEhvYURvbklkIGlkID0gbmV3IENoaVRpZXRIb2FEb25JZCgpOyAvLyBNw6MgaMOzYSDEkcahbiB2w6AgbcOjIHbDqSBnaeG6oyDEkeG7i25oXG4vLyAgICAgICAgaWQuc2V0TWFIRChcIkhEMDAxXCIpO1xuLy8gICAgICAgIGlkLnNldE1hVmUoXCJWVDAwMVwiKTtcbi8vICAgICAgICBDaGlUaWV0SG9hRG9uIGNoaVRpZXRIb2FEb24gPSBuZXcgQ2hpVGlldEhvYURvbigpOy8vIFPhu5EgbMaw4bujbmcgdsOgIMSRxqFuIGdpw6EgZ2nhuqMgxJHhu4tuaFxuLy9cbi8vICAgICAgICBjaGlUaWV0SG9hRG9uLnNldElkKGlkKTtcbi8vICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFNvTHVvbmcoNSk7XG4vLyAgICAgICAgY2hpVGlldEhvYURvbi5zZXRWQVQoMC4xKTsgLy8gMTAlIFZBVFxuLy8gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0VGllblRodWUoY2hpVGlldEhvYURvbi5nZXRTb0x1b25nKCkgKiAxMDAwMDAgKiAwLjEpO1xuLy8gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0VGhhbmhUaWVuKChjaGlUaWV0SG9hRG9uLmdldFNvTHVvbmcoKSAqIDEwMDAwMCkgKyBjaGlUaWV0SG9hRG9uLmdldFRpZW5UaHVlKCkpO1xuLy8gICAgICAgIGJvb2xlYW4gaXNTYXZlZCA9IGNoaVRpZXRIb2FEb25EQU9JbXBsLnNhdmVDaGlUaWV0SG9hRG9uKGNoaVRpZXRIb2FEb24pO1xuLy8gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIlRow6ptIGNoaSB0aeG6v3QgaMOzYSDEkcahbjogXCIgKyAoaXNTYXZlZCA/IFwiVGjDoG5oIGPDtG5nXCIgOiBcIlRo4bqldCBi4bqhaVwiKSk7XG4vL1xuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmFcbi4uLlxuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwixJDDoyB0w6xtIHRo4bqleSBLaGFjaEhhbmc6IFwiICsga2hhY2hIYW5nLmdldE1hS2hhY2hIYW5nKCkpO1xuXG4gICAgICAgICAgICAvLyAyLiBU4bqhbyBow7NhIMSRxqFuIG3hu5tpXG4gICAgICAgICAgICBIb2FEb24gaG9hRG9uID0gbmV3IEhvYURvbigpO1xuICAgICAgICAgICAgU3RyaW5nIG1hSEQgPSBnZW5lcmF0ZU1hSEQoKTtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIkdlbmVyYXRlZCBNYUhEOiBcIiArIG1hSEQpO1xuICAgICAgICAgICAgaG9hRG8uLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFUQjFLcTJMZ3JRQ1g5YkJXN2NBSzd5In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmciLCJmb2xkZXJSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiTGV0IG1lIGdhdGhlciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBDaGlUaWV0SG9hRG9uREFPIGFuZCByZWxhdGVkIGNsYXNzZXMgdG8gdW5kZXJzdGFuZCBob3cgdG8gaW1wbGVtZW50IHRoZSB0aWNrZXQgZXhjaGFuZ2UgZnVuY3Rpb25hbGl0eS5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI4ZGE0N2RhMi00ZGIyLTQyZmYtYjVhMS0zZDAyYjc1ZTk2MjMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE5MTNySENBS3M5aEhvblVkUWk4dFhCIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTaG93IG1lIHRoZSBleGlzdGluZyBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgZG9pVmUgbWV0aG9kIGluIERvaVZlUGFuZWwuamF2YSBhbmQgYW55IHJlbGF0ZWQgbWV0aG9kcyBmb3IgdGlja2V0IGV4Y2hhbmdlXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQgbWUgZ2F0aGVyIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV4aXN0aW5nIGltcGxlbWVudGF0aW9uIG9mIHRoZSB0aWNrZXQgZXhjaGFuZ2UgZnVuY3Rpb25hbGl0eSB0byB1bmRlcnN0YW5kIHdoYXQgbmVlZHMgdG8gYmUgdXBkYXRlZC5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0NoaVRpZXRIb2FEb25EQU8uamF2YVxucGFja2FnZSBkYW87XG5cbmltcG9ydCBtb2RlbC5DaGlUaWV0SG9hRG9uO1xuaW1wb3J0IG1vZGVsLkNoaVRpZXRIb2FEb25JZDtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZTtcbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5cbnB1YmxpYyBpbnRlcmZhY2UgQ2hpVGlldEhvYURvbkRBTyBleHRlbmRzIFJlbW90ZSB7XG5cbiAgICAgLy8gUmVhZDogTOG6pXkgdOG6pXQgY+G6oyBjaGkgdGnhur90IGjDs2EgxJHGoW5cbiAgICAgcHVibGljIExpc3Q8Q2hpVGlldEhvYURvbj4gZ2V0QWxsTGlzdCgpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAgLy8gUmVhZDogVMOsbSBjaGkgdGnhur90IGjDs2EgxJHGoW4gdGhlbyBJRFxuICAgICBwdWJsaWMgQ2hpVGlldEhvYURvbiBnZXRCeUlkKENoaVRpZXRIb2FEb25JZCBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgICAvLyBDcmVhdGU6IFRow6ptIGNoaSB0aeG6v3QgaMOzYSDEkcahblxuICAgICBwdWJsaWMgYm9vbGVhbiBzYXZlKENoaVRpZXRIb2FEb24gY2hpVGlldEhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgICAvLyBVcGRhdGU6IEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIGNoaSB0aeG6v3QgaMOzYSDEkcahblxuICAgICBwdWJsaWMgYm9vbGVhbiB1cGRhdGUoQ2hpVGlldEhvYURvbiBjaGlUaWV0SG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgIC8vIERlbGV0ZTogWMOzYSBjaGkgdGnhur90IGjDs2EgxJHGoW4gdGhlbyBJRFxuICAgICBwdWJsaWMgYm9vbGVhbiBkZWxldGUoQ2hpVGlldEhvYURvbklkIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgIC8vIEzhuqV5IGRhbmggc8OhY2ggY2hpIHRp4bq/dCBow7NhIMSRxqFuIHRoZW8gbcOjIGjDs2EgxJHGoW5cbiAgICAgcHVibGljIExpc3Q8Q2hpVGlldEhvYURvbj4gZ2V0QnlIb2FEb25JZChTdHJpbmcgaG9hRG9uSWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAgLy8gTOG6pXkgZGFuaCBzw6FjaCBjaGkgdGnhur90IGjDs2EgxJHGoW4gdGhlbyBtw6MgdsOpXG4gICAgIHB1YmxpYyBMaXN0PENoaVRpZXRIb2FEb24+IGdldEJ5VmVUYXVJZChTdHJpbmcgdmVUYXVJZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0hvYURvbkRBTy5qYXZhXG4uLi5cblxuLyoqXG4gKiBAROG7sSDDoW46IFBoYW5UYW5KYXZhTmhvbUdQVFxuICogQEludGVyZmFjZTogSG9hRG9uREFPXG4gKiBAVOG6oW8gdsOgbyBuZ8OgeTogMTgvMDQvMjAyNVxuICogQFTDoWMgZ2nhuqM6IE5ndXllbiBIdXUgU2FuZ1xuICovXG5wdWJsaWMgaW50ZXJmYWNlIEhvYURvbkRBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgLy8gQ3JlYXRlOiBUaMOqbSBow7NhIMSRxqFuIG3hu5tpXG4gICAgYm9vbGVhbiBzYXZlSG9hRG9uKEhvYURvbiBob2FEb24pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBSZWFkOiBM4bqleSBkYW5oIHPDoWNoIGjDs2EgxJHGoW5cbiAgICBMaXN0PEhvYURvbj4gZ2V0QWxsSG9hRG9ucygpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBSZWFkOiBUw6xtIGjDs2EgxJHGoW4gdGhlbyBtw6MgaMOzYSDEkcahblxuICAgIEhvYURvbiBnZXRIb2FEb25CeUlkKFN0cmluZyBtYUhEKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gVXBkYXRlOiBD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbiBow7NhIMSRxqFuXG4gICAgYm9vbGVhbiB1cGRhdGVIb2FEb24oSG9hRG9uIGhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIERlbGV0ZTogWMOzYSBow7NhIMSRxqFuIHRoZW8gbcOjIGjDs2EgxJHGoW5cbiAgICBib29sZWFuIGRlbGV0ZUhvYURvbihTdHJpbmcgbWFIRCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIFJldHJpZXZlIGludm9pY2VzIGJ5IGN1c3RvbWVyIElEXG4gICAgTGlzdDxIb2FEb24+IGdldEJ5Q3VzdG9tZXJJZChTdHJpbmcgY3VzdG9tZXJJZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIFN0cmluZyBnZW5lcmF0ZU1hSG9hRG9uKExvY2FsRGF0ZSBuZ2F5KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExvYWlIb2FEb24gZ2V0TG9haUhvYURvbkJ5SWQoU3RyaW5nIG1hTG9haUhEKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxIb2FEb24+IHRpbUtpZW1Ib2FEb24oU3RyaW5nIG1hSG9hRG9uLCBTdHJpbmcgc29EaWVuVGhvYWksIFN0cmluZyBtYU5oYW5WaWVuLCAgIExvY2FsRGF0ZSB0dU5nYXksIExvY2FsRGF0ZSBkZW5OZ2F5KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgSG9hRG9uIGdldEhvYURvbkJ5TWEoU3RyaW5nIG1hSG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8SG9hRG9uPiBnZXRIb2FEb25zQnlEYXRlUmFuZ2UoTG9jYWxEYXRlIHN0YXJ0RGF0ZSwgTG9jYWxEYXRlIGVuZERhdGUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxIb2FEb24+IGdldEhvYURvbnNCeURhdGVSYW5nZUFuZFNoaWZ0KExvY2FsRGF0ZSBzdGFydERhdGUsIExvY2FsRGF0ZSBlbmREYXRlLCBpbnQgY2EpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59Li4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL0NoaVRpZXRIb2FEb25EQU9JbXBsLmphdmFcbnBhY2thZ2UgZGFvLmltcGw7XG5cbmltcG9ydCBkYW8uQ2hpVGlldEhvYURvbkRBTztcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eU1hbmFnZXI7XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlUcmFuc2FjdGlvbjtcbmltcG9ydCBtb2RlbC5DaGlUaWV0SG9hRG9uO1xuaW1wb3J0IG1vZGVsLkNoaVRpZXRIb2FEb25JZDtcbmltcG9ydCB1dGlsLkpQQVV0aWw7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS5ybWkuc2VydmVyLlVuaWNhc3RSZW1vdGVPYmplY3Q7XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5cbnB1YmxpYyBjbGFzcyBDaGlUaWV0SG9hRG9uREFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBDaGlUaWV0SG9hRG9uREFPIHtcblxuICAgIHB1YmxpYyBDaGlUaWV0SG9hRG9uREFPSW1wbCgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICAvLyBDb25zdHJ1Y3RvciBwaOG6o2kgY8OzIHRocm93cyBSZW1vdGVFeGNlcHRpb24ga2hpIGV4dGVuZHMgVW5pY2FzdFJlbW90ZU9iamVjdFxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBMaXN0PENoaVRpZXRIb2FEb24+IGdldEFsbExpc3QoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIExpc3Q8Q2hpVGlldEhvYURvbj4gbGlzdCA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuICAgICAgICAgICAgbGlzdCA9IGVtLmNyZWF0ZVF1ZXJ5KFwiU0VMRUNUIGMgRlJPTSBDaGlUaWV0SG9hRG9uIGNcIiwgQ2hpVGlldEhvYURvbi5jbGFzcykuZ2V0UmVzdWx0TGlzdCgpO1xuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggQ2hpVGlldEhvYURvblwiKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBzYXZlKENoaVRpZXRIb2FEb24gY2hpVGlldEhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHIgPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHIuYmVnaW4oKTtcbiAgICAgICAgICAgIGVtLnBlcnNpc3QoY2hpVGlldEhvYURvbik7XG4gICAgICAgICAgICB0ci5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRyLnJvbGxiYWNrKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBib29sZWFuIHVwZGF0ZShDaGlUaWV0SG9hRG9uIGNoaVRpZXRIb2FEb24pIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHRyID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRyLmJlZ2luKCk7XG4gICAgICAgICAgICBlbS5tZXJnZShjaGlUaWV0SG9hRG9uKTtcbiAgICAgICAgICAgIHRyLmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdHIucm9sbGJhY2soKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxDaGlUaWV0SG9hRG9uPiBnZXRCeUhvYURvbklkKFN0cmluZyBob2FEb25JZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICBMaXN0PENoaVRpZXRIb2FEb24+IGxpc3QgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcbiAgICAgICAgICAgIFN0cmluZyBxdWVyeSA9IFwiU0VMRUNUIGMgRlJPTSBDaGlUaWV0SG9hRG9uIGMgV0hFUkUgYy5pZC5tYUhEID0gOmhvYURvbklkXCI7XG4gICAgICAgICAgICBsaXN0ID0gZW0uY3JlYXRlUXVlcnkocXVlcnksIENoaVRpZXRIb2FEb24uY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJob2FEb25JZFwiLCBob2FEb25JZClcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCBjaGkgdGnhur90IGjDs2EgxJHGoW4gdGhlbyBtw6MgaMOzYSDEkcahbjogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBMaXN0PENoaVRpZXRIb2FEb24+IGdldEJ5VmVUYXVJZChTdHJpbmcgdmVUYXVJZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICBMaXN0PENoaVRpZXRIb2FEb24+IGxpc3QgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcbiAgICAgICAgICAgIFN0cmluZyBxdWVyeSA9IFwiU0VMRUNUIGMgRlJPTSBDaGlUaWV0SG9hRG9uIGMgV0hFUkUgYy5pZC5tYVZlID0gOnZlVGF1SWRcIjtcbiAgICAgICAgICAgIGxpc3QgPSBlbS5jcmVhdGVRdWVyeShxdWVyeSwgQ2hpVGlldEhvYURvbi5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcInZlVGF1SWRcIiwgdmVUYXVJZClcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCBjaGkgdGnhur90IGjDs2EgxJHGoW4gdGhlbyBtw6MgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9Ib2FEb25EQU9JbXBsLmphdmFcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgLy8gQ3JlYXRlOiBUaMOqbSBow7NhIMSRxqFuIG3hu5tpXG4gICAgcHVibGljIGJvb2xlYW4gc2F2ZUhvYURvbihIb2FEb24gaG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0ciA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0ci5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHhlbSBtw6MgaMOzYSDEkcahbiDEkcOjIMSRxrDhu6NjIHRoaeG6v3QgbOG6rXAgY2jGsGFcbiAgICAgICAgICAgIGlmIChob2FEb24uZ2V0TWFIRCgpID09IG51bGwgfHwgaG9hRG9uLmdldE1hSEQoKS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAvLyBO4bq/dSBjaMawYSBjw7MgbcOjIGjDs2EgxJHGoW4sIHThu7EgxJHhu5luZyBzaW5oIG3Do1xuICAgICAgICAgICAgICAgIFN0cmluZyBtYUhEID0gZ2VuZXJhdGVNYUhvYURvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvYURvbi5nZXROZ2F5TGFwKCkgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvYURvbi5nZXROZ2F5TGFwKCkudG9Mb2NhbERhdGUoKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvY2FsRGF0ZS5ub3coKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaG9hRG9uLnNldE1hSEQobWFIRCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgY8OhYyDEkeG7kWkgdMaw4bujbmcgbGnDqm4gcXVhblxuICAgICAgICAgICAgaWYgKGhvYURvbi5nZXRMb2FpSG9hRG9uKCkgIT0gbnVsbCAmJiBob2FEb24uZ2V0TG9haUhvYURvbigpLmdldE1hTG9haUhvYURvbigpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBM4bqleSBsb+G6oWkgaMOzYSDEkcahbiB04burIGRhdGFiYXNlIMSR4buDIMSR4bqjbSBi4bqjbyBsacOqbiBr4bq/dCDEkcO6bmdcbiAgICAgICAgICAgICAgICBMb2FpSG9hRG9uIGxvYWlIRCA9IGdldExvYWlIb2FEb25CeUlkKGhvYURvbi5nZXRMb2FpSG9hRG9uKCkuZ2V0TWFMb2FpSG9hRG9uKCkpO1xuICAgICAgICAgICAgICAgIGlmIChsb2FpSEQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBob2FEb24uc2V0TG9haUhvYURvbihsb2FpSEQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJLaMO0bmcgdMOsbSB0aOG6pXkgbG/huqFpIGjDs2EgxJHGoW4gduG7m2kgbcOjOiBcIiArIGhvYURvbi5nZXRMb2FpSG9hRG9uKCkuZ2V0TWFMb2FpSG9hRG9uKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTMawdSBow7NhIMSRxqFuIHbDoG8gZGF0YWJhc2VcbiAgICAgICAgICAgIGVtLnBlcnNpc3QoaG9hRG9uKTtcbiAgICAgICAgICAgIHRyLmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgaWYgKHRyLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0ci5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXgucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGzGsHUgaMOzYSDEkcahbjogXCIgKyBleC5nZXRNZXNzYWdlKCksIGV4KTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbi4uLlxuXG5cbiAgICAvLyBSZXRyaWV2ZSBpbnZvaWNlcyBieSBjdXN0b21lciBJRFxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBMaXN0PEhvYURvbj4gZ2V0QnlDdXN0b21lcklkKFN0cmluZyBjdXN0b21lcklkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBTdHJpbmcgcXVlcnkgPSBcIlNFTEVDVCBoIEZST00gSG9hRG9uIGggV0hFUkUgaC5raGFjaEhhbmcubWFLaGFjaEhhbmcgPSA6Y3VzdG9tZXJJZFwiO1xuICAgICAgICByZXR1cm4gZW0uY3JlYXRlUXVlcnkocXVlcnksIEhvYURvbi5jbGFzcylcbiAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwiY3VzdG9tZXJJZFwiLCBjdXN0b21lcklkKVxuICAgICAgICAgICAgICAgIC5nZXRSZXN1bHRMaXN0KCk7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFN0cmluZyBnZW5lcmF0ZU1hSG9hRG9uKExvY2FsRGF0ZSBuZ2F5KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0ciA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRyLmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIMSQ4buLbmggZOG6oW5nIHBo4bqnbiBuZ8OgeSB0aMOhbmcgY+G7p2EgbcOjIGjDs2EgxJHGoW4ga2jDtG5nIGPDsyBk4bqldSBcIi9cIlxuICAgICAgICAgICAgRGF0ZVRpbWVGb3JtYXR0ZXIgZm9ybWF0dGVyID0gRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKFwieXl5eU1NZGRcIik7XG4gICAgICAgICAgICBTdHJpbmcgZGF0ZVByZWZpeCA9IFwiSERcIiArIGZvcm1hdHRlci5mb3JtYXQobmdheSk7XG5cbiAgICAgICAgICAgIC8vIFF1ZXJ5IMSR4buDIHTDrG0gbcOjIGjDs2EgxJHGoW4gbOG7m24gbmjhuqV0IHRyb25nIG5nw6B5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIGgubWFIRCBGUk9NIEhvYURvbiBoIFdIRVJFIGgubWFIRCBMSUtFIDpwcmVmaXggT1JERVIgQlkgaC5tYUhEIERFU0NcIjtcbiAgICAgICAgICAgIFF1ZXJ5IHF1ZXJ5ID0gZW0uY3JlYXRlUXVlcnkoanBxbClcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcInByZWZpeFwiLCBkYXRlUHJlZml4ICsgXCIlXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRNYXhSZXN1bHRzKDEpO1xuXG4gICAgICAgICAgICBMaXN0PD8+IHJlc3VsdHMgPSBxdWVyeS5nZXRSZXN1bHRMaXN0KCk7XG5cbiAgICAgICAgICAgIC8vIFjDoWMgxJHhu4tuaCBz4buRIHRo4bupIHThu7EgdGnhur9wIHRoZW9cbiAgICAgICAgICAgIGludCBuZXh0TnVtYmVyID0gMTtcblxuICAgICAgICAgICAgaWYgKCFyZXN1bHRzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIFN0cmluZyBsYXN0Q29kZSA9IChTdHJpbmcpIHJlc3VsdHMuZ2V0KDApO1xuICAgICAgICAgICAgICAgIC8vIFRyw61jaCB4deG6pXQgc+G7kSB0aOG7qSB04buxIHThu6sgbcOjIGjDs2EgxJHGoW4gY3Xhu5FpIGPDuW5nXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9ybWF0OiBIRHl5eXlNTWRkWFhYWFxuICAgICAgICAgICAgICAgICAgICAvLyBM4bqleSA0IGvDvSB04buxIGN14buRaSBjw7luZyBj4bunYSBtw6MgaMOzYSDEkcahblxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgbnVtYmVyU3RyID0gbGFzdENvZGUuc3Vic3RyaW5nKGxhc3RDb2RlLmxlbmd0aCgpIC0gNCk7XG4gICAgICAgICAgICAgICAgICAgIG5leHROdW1iZXIgPSBJbnRlZ2VyLnBhcnNlSW50KG51bWJlclN0cikgKyAxO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE7hur91IGPDsyBs4buXaSBraGkgcGFyc2UsIG3hurdjIMSR4buLbmggbMOgIDFcbiAgICAgICAgICAgICAgICAgICAgbmV4dE51bWJlciA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0ci5jb21taXQoKTtcblxuICAgICAgICAgICAgLy8gVOG6oW8gbcOjIGjDs2EgxJHGoW4gbeG7m2kgduG7m2kgxJHhu4tuaCBk4bqhbmcgSER5eXl5TU1kZFhYWFhcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZm9ybWF0KFwiJXMlMDRkXCIsIGRhdGVQcmVmaXgsIG5leHROdW1iZXIpO1xuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgSG9hRG9uIGdldEhvYURvbkJ5TWEoU3RyaW5nIG1hSG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIGggRlJPTSBIb2FEb24gaCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCBoLmtoYWNoSGFuZyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCBoLm52IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGgubG9haUhvYURvbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGguY2hpVGlldEhvYURvbnMgY3QgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBjdC52ZVRhdSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgaC5tYUhEID0gOm1hSG9hRG9uXCI7XG5cbiAgICAgICAgICAgIHJldHVybiBlbS5jcmVhdGVRdWVyeShqcHFsLCBIb2FEb24uY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYUhvYURvblwiLCBtYUhvYURvbilcbiAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuXG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBs4bqleSB0aMO0bmcgdGluIGjDs2EgxJHGoW46IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL3Rlc3RDUlVEL0NoaVRpZXRIb2FEb25EQU9UZXN0LmphdmFcbi4uLlxuLy8gICAgICAgIENoaVRpZXRIb2FEb25JZCBpZCA9IG5ldyBDaGlUaWV0SG9hRG9uSWQoKTsgLy8gTcOjIGjDs2EgxJHGoW4gdsOgIG3DoyB2w6kgZ2nhuqMgxJHhu4tuaFxuLy8gICAgICAgIGlkLnNldE1hSEQoXCJIRDAwMVwiKTtcbi8vICAgICAgICBpZC5zZXRNYVZlKFwiVlQwMDFcIik7XG4vLyAgICAgICAgQ2hpVGlldEhvYURvbiBjaGlUaWV0SG9hRG9uID0gbmV3IENoaVRpZXRIb2FEb24oKTsvLyBT4buRIGzGsOG7o25nIHbDoCDEkcahbiBnacOhIGdp4bqjIMSR4buLbmhcbi8vXG4vLyAgICAgICAgY2hpVGlldEhvYURvbi5zZXRJZChpZCk7XG4vLyAgICAgICAgY2hpVGlldEhvYURvbi5zZXRTb0x1b25nKDUpO1xuLy8gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0VkFUKDAuMSk7IC8vIDEwJSBWQVRcbi8vICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFRpZW5UaHVlKGNoaVRpZXRIb2FEb24uZ2V0U29MdW9uZygpICogMTAwMDAwICogMC4xKTtcbi8vICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFRoYW5oVGllbigoY2hpVGlldEhvYURvbi5nZXRTb0x1b25nKCkgKiAxMDAwMDApICsgY2hpVGlldEhvYURvbi5nZXRUaWVuVGh1ZSgpKTtcbi8vICAgICAgICBib29sZWFuIGlzU2F2ZWQgPSBjaGlUaWV0SG9hRG9uREFPSW1wbC5zYXZlQ2hpVGlldEhvYURvbihjaGlUaWV0SG9hRG9uKTtcbi8vICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJUaMOqbSBjaGkgdGnhur90IGjDs2EgxJHGoW46IFwiICsgKGlzU2F2ZWQgPyBcIlRow6BuaCBjw7RuZ1wiIDogXCJUaOG6pXQgYuG6oWlcIikpO1xuLy9cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vRG9pVmVEQU8uamF2YVxuLi4uXG5cbnB1YmxpYyBpbnRlcmZhY2UgRG9pVmVEQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIFZlVGF1IGdldFZlVGF1KFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGRvaVZlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8VmVUYXU+IGdldFZlVGF1QnlUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gdGVzdENvbm5lY3Rpb24oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8VHJhbmdUaGFpVmVUYXU+IGdldEFsbFRyYW5nVGhhaVZlKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIFRow6ptIGNo4bupYyBuxINuZyBt4bubaVxuICAgIGJvb2xlYW4gZGF0VmUoVmVUYXUgdmVUYXUsIFN0cmluZyBjaG9OZ29pSWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBodXlWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHRoYW5oVG9hblZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gY2FwTmhhdFRyYW5nVGhhaVZlKFN0cmluZyBtYVZlLCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgS2hhY2hIYW5nIGdldEtoYWNoSGFuZ0J5TWFWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvQ2hpVGlldEhvYURvbi5qYXZhXG5wYWNrYWdlIG1vZGVsO1xuXG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS4qO1xuaW1wb3J0IGxvbWJvay5EYXRhO1xuaW1wb3J0IGxvbWJvay5Ub1N0cmluZztcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuXG5ARGF0YVxuQEVudGl0eVxuQFRhYmxlKG5hbWUgPSBcImNoaXRpZXRfaG9hZG9uXCIpXG5wdWJsaWMgY2xhc3MgQ2hpVGlldEhvYURvbiBpbXBsZW1lbnRzIFNlcmlhbGl6YWJsZSB7XG5cbiAgICBARW1iZWRkZWRJZFxuICAgIHByaXZhdGUgQ2hpVGlldEhvYURvbklkIGlkO1xuXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBATWFueVRvT25lKGZldGNoID0gRmV0Y2hUeXBlLkxBWlkpXG4gICAgQE1hcHNJZChcIm1hSERcIikgIC8vIE1hcHMgbWFIRCBpbiB0aGUgY29tcG9zaXRlIGtleVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX2hkXCIsIHJlZmVyZW5jZWRDb2x1bW5OYW1lID0gXCJtYV9oZFwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgSG9hRG9uIGhvYURvbjtcblxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgQE1hbnlUb09uZShmZXRjaCA9IEZldGNoVHlwZS5MQVpZKVxuICAgIEBNYXBzSWQoXCJtYVZlXCIpICAvLyBNYXBzIG1hVmUgaW4gdGhlIGNvbXBvc2l0ZSBrZXlcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJtYV92ZVwiLCByZWZlcmVuY2VkQ29sdW1uTmFtZSA9IFwibWFfdmVcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIFZlVGF1IHZlVGF1O1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJzb19sdW9uZ1wiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgaW50IHNvTHVvbmc7XG5cbiAgICBAQ29sdW1uKG5hbWUgPSBcIlZBVFwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgZG91YmxlIFZBVDtcblxuICAgIEBDb2x1bW4obmFtZSA9IFwidGhhbmhfdGllblwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgZG91YmxlIHRoYW5oVGllbjtcblxuICAgIEBDb2x1bW4obmFtZSA9IFwidGllbl90aHVlXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBkb3VibGUgdGllblRodWU7XG5cblxufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL0hvYURvbi5qYXZhXG5wYWNrYWdlIG1vZGVsO1xuXG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLio7XG5pbXBvcnQgbG9tYm9rLkRhdGE7XG5pbXBvcnQgbG9tYm9rLkVxdWFsc0FuZEhhc2hDb2RlO1xuaW1wb3J0IGxvbWJvay5Ub1N0cmluZztcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGU7XG5pbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZVRpbWU7XG5pbXBvcnQgamF2YS51dGlsLk9iamVjdHM7XG5pbXBvcnQgamF2YS51dGlsLlNldDtcblxuQERhdGFcbkBFbnRpdHlcbkBUYWJsZShuYW1lID0gXCJob2Fkb25cIilcbkBFcXVhbHNBbmRIYXNoQ29kZShvbmx5RXhwbGljaXRseUluY2x1ZGVkID0gdHJ1ZSlcbnB1YmxpYyBjbGFzcyBIb2FEb24gaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuICAgIEBJZFxuICAgIEBDb2x1bW4obmFtZSA9IFwibWFfaGRcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwidmFyY2hhcigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UsIHVuaXF1ZSA9IHRydWUpXG4gICAgQEVxdWFsc0FuZEhhc2hDb2RlLkluY2x1ZGVcbiAgICBwcml2YXRlIFN0cmluZyBtYUhEO1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJuZ2F5X2xhcFwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJkYXRldGltZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgTG9jYWxEYXRlVGltZSBuZ2F5TGFwO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidGllbl9naWFtXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcImRvdWJsZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgZG91YmxlIHRpZW5HaWFtO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidG9uZ190aWVuXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcImRvdWJsZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgZG91YmxlIHRvbmdUaWVuO1xuXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBATWFueVRvT25lKGZldGNoID0gRmV0Y2hUeXBlLkxBWlkpXG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfa2hhY2hfaGFuZ1wiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgS2hhY2hIYW5nIGtoYWNoSGFuZztcblxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgQE1hbnlUb09uZShmZXRjaCA9IEZldGNoVHlwZS5MQVpZKVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX25oYW5fdmllblwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgTmhhblZpZW4gbnY7XG5cbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIEBNYW55VG9PbmUoZmV0Y2ggPSBGZXRjaFR5cGUuTEFaWSlcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJtYV9sb2FpX2hkXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBMb2FpSG9hRG9uIGxvYWlIb2FEb247XG5cbi8vICAgIEBNYW55VG9NYW55XG4vLyAgICBASm9pblRhYmxlKG5hbWUgPSBcImNoaXRpZXRfaG9hZG9uXCIsXG4vLyAgICAgICAgICAgIGpvaW5Db2x1bW5zID0gQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfaGRcIiksXG4vLyAgICAgICAgICAgIGludmVyc2VKb2luQ29sdW1ucyA9IEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX3ZlXCIpKVxuLy8gICAgcHJpdmF0ZSBTZXQ8VmVUYXU+IHZlVGF1cztcblxuICAgIEBPbmVUb01hbnkobWFwcGVkQnkgPSBcImhvYURvblwiKVxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgcHJpdmF0ZSBTZXQ8Q2hpVGlldEhvYURvbj4gY2hpVGlldEhvYURvbnM7XG59XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvTG9haUhvYURvbi5qYXZhXG5wYWNrYWdlIG1vZGVsO1xuXG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLio7XG5pbXBvcnQgbG9tYm9rLkRhdGE7XG5pbXBvcnQgbG9tYm9rLkVxdWFsc0FuZEhhc2hDb2RlO1xuaW1wb3J0IGxvbWJvay5Ub1N0cmluZztcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuaW1wb3J0IGphdmEudXRpbC5TZXQ7XG5cbkBEYXRhXG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5ARW50aXR5XG5AVGFibGUobmFtZSA9IFwibG9haWhvYWRvblwiKVxuQFRvU3RyaW5nXG5wdWJsaWMgY2xhc3MgTG9haUhvYURvbiBpbXBsZW1lbnRzIFNlcmlhbGl6YWJsZSB7XG4gICAgQElkXG4gICAgQENvbHVtbihuYW1lID0gXCJtYV9sb2FpX2hkXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcInZhcmNoYXIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlLCB1bmlxdWUgPSB0cnVlKVxuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5JbmNsdWRlXG4gICAgcHJpdmF0ZSBTdHJpbmcgbWFMb2FpSG9hRG9uO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidGVuX2xvYWlfaGRcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiTlZBUkNIQVIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgU3RyaW5nIHRlbkxvYWlIb2FEb247XG5cbiAgICBAT25lVG9NYW55KG1hcHBlZEJ5ID0gXCJsb2FpSG9hRG9uXCIpXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBwcml2YXRlIFNldDxIb2FEb24+IGhvYURvbnM7XG5cblxuXG5cbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9DaGlUaWV0SG9hRG9uSWQuamF2YVxucGFja2FnZSBtb2RlbDtcblxuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW1iZWRkYWJsZTtcbmltcG9ydCBsb21ib2suRGF0YTtcbmltcG9ydCBsb21ib2suRXF1YWxzQW5kSGFzaENvZGU7XG5cbmltcG9ydCBqYXZhLmlvLlNlcmlhbGl6YWJsZTtcbmltcG9ydCBqYXZhLnV0aWwuT2JqZWN0cztcbkBEYXRhXG5ARW1iZWRkYWJsZVxuQEVxdWFsc0FuZEhhc2hDb2RlKG9ubHlFeHBsaWNpdGx5SW5jbHVkZWQgPSB0cnVlKVxucHVibGljIGNsYXNzIENoaVRpZXRIb2FEb25JZCBpbXBsZW1lbnRzIFNlcmlhbGl6YWJsZSB7XG4gICAgQEVxdWFsc0FuZEhhc2hDb2RlLkluY2x1ZGVcbiAgICBwcml2YXRlIFN0cmluZyBtYUhEO1xuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5JbmNsdWRlXG4gICAgcHJpdmF0ZSBTdHJpbmcgbWFWZTtcblxufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL0Nob05nb2kuamF2YVxucGFja2FnZSBtb2RlbDtcblxuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuKjtcbmltcG9ydCBsb21ib2suRGF0YTtcbmltcG9ydCBsb21ib2suRXF1YWxzQW5kSGFzaENvZGU7XG5pbXBvcnQgbG9tYm9rLlRvU3RyaW5nO1xuXG5pbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG5cbkBFbnRpdHlcbkBEYXRhXG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5AVGFibGUobmFtZSA9IFwiY2hvX25nb2lcIilcbnB1YmxpYyBjbGFzcyBDaG9OZ29pIGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBASWRcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuSW5jbHVkZVxuICAgIEBDb2x1bW4obmFtZSA9IFwibWFfY2hvXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIlZBUkNIQVIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlLCB1bmlxdWUgPSB0cnVlKVxuICAgIHByaXZhdGUgU3RyaW5nIG1hQ2hvO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidGVuX2Nob1wiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJOVkFSQ0hBUigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBTdHJpbmcgdGVuQ2hvO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidGluaF90cmFuZ1wiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJCSVRcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGJvb2xlYW4gdGluaFRyYW5nO1xuICAgIEBDb2x1bW4obmFtZSA9IFwiZ2lhX3RpZW5cIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiRkxPQVRcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGRvdWJsZSBnaWFUaWVuO1xuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL0toYWNoSGFuZy5qYXZhXG4uLi5cbiAgICBAQ29sdW1uKG5hbWUgPSBcImRpZW1fdGljaF9sdXlcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiZG91YmxlXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBkb3VibGUgZGllbVRpY2hMdXk7XG4gICAgQENvbHVtbihuYW1lID0gXCJuZ2F5X3NpbmhcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiZGF0ZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgTG9jYWxEYXRlIG5nYXlTaW5oO1xuICAgIEBDb2x1bW4obmFtZSA9IFwibmdheV90aGFtX2dpYVwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJkYXRlXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBMb2NhbERhdGUgbmdheVRoYW1nR2lhO1xuICAgIEBDb2x1bW4obmFtZSA9IFwiaGFuZ190aGFuaF92aWVuXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcInZhcmNoYXIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgU3RyaW5nIGhhbmdUaGFuaFZpZW47XG5cbiAgICBATWFueVRvT25lXG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfbG9haV9raGFjaF9oYW5nXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBwcml2YXRlIExvYWlLaGFjaEhhbmcgbG9haUtoYWNoSGFuZztcblxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgQE9uZVRvTWFueShtYXBwZWRCeSA9IFwia2hhY2hIYW5nXCIpXG4gICAgcHJpdmF0ZSBTZXQ8SG9hRG9uPiBob2FEb25zO1xufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL1RhdS5qYXZhXG4uLi5cblxuQERhdGFcbkBFbnRpdHlcbkBFcXVhbHNBbmRIYXNoQ29kZShvbmx5RXhwbGljaXRseUluY2x1ZGVkID0gdHJ1ZSlcbkBUYWJsZShuYW1lID0gXCJ0YXVcIilcbnB1YmxpYyBjbGFzcyBUYXUgaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuICAgIEBJZFxuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5JbmNsdWRlXG4gICAgQENvbHVtbihuYW1lID0gXCJtYV90YXVcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwidmFyY2hhcigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UsIHVuaXF1ZSA9IHRydWUpXG4gICAgcHJpdmF0ZSBTdHJpbmcgbWFUYXU7IC8vIE3DoyB0w6B1XG4gICAgQENvbHVtbihuYW1lID0gXCJ0ZW5fdGF1XCIsIGNvbHVtbkRlZmluaXRpb24gPSBcInZhcmNoYXIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5FeGNsdWRlXG4gICAgcHJpdmF0ZSBTdHJpbmcgdGVuVGF1O1xuICAgIEBDb2x1bW4obmFtZSA9IFwic29fdG9hXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgQEVxLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUzJ2RlFvVWltNDY4U0tLQWRnTjNBUyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIiwiZm9sZGVyUm9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSBnYXRoZXIgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXhpc3RpbmcgaW1wbGVtZW50YXRpb24gb2YgdGhlIHRpY2tldCBleGNoYW5nZSBmdW5jdGlvbmFsaXR5IHRvIHVuZGVyc3RhbmQgd2hhdCBuZWVkcyB0byBiZSB1cGRhdGVkLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjkyYWZhMWVmLWFkYzktNDlmZi05ODgwLTk3MDRlOGM4MzEzNCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTNiTGM5SmdNTHhBRjNTeTJHTHE3c3oiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwiUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgSSBoYXZlIGEgZ29vZCB1bmRlcnN0YW5kaW5nIG9mIHRoZSBjb2RlYmFzZSBhbmQgd2hhdCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZC4gTGV0IG1lIGNyZWF0ZSBhIGRldGFpbGVkIHBsYW4gZm9yIHVwZGF0aW5nIHRoZSBEb2lWZVBhbmVsIHRvIGltcGxlbWVudCB0aGUgdGlja2V0IGV4Y2hhbmdlIGZ1bmN0aW9uYWxpdHkuXG5cbiMjIFBsYW4gZm9yIFVwZGF0aW5nIERvaVZlUGFuZWxcblxuQmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIGdhdGhlcmVkLCBJJ2xsIHVwZGF0ZSB0aGUgRG9pVmVQYW5lbCB0byBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBmdW5jdGlvbmFsaXR5OlxuMS4gU2F2ZSBhIG5ldyBpbnZvaWNlIHdoZW4gZXhjaGFuZ2luZyB0aWNrZXRzXG4yLiBDYWxjdWxhdGUgcmVmdW5kcyBvciBhZGRpdGlvbmFsIGNoYXJnZXMgYmFzZWQgb24gdGhlIHByaWNlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgb2xkIGFuZCBuZXcgdGlja2V0c1xuMy4gQ3JlYXRlIGludm9pY2UgZGV0YWlscyBmb3IgdGhlIGNhbGN1bGF0aW9uXG40LiBDcmVhdGUgYSBuZXcgdGlja2V0XG41LiBDaGFuZ2UgdGhlIHN0YXR1cyBvZiB0aGUgb2xkIHRpY2tldCB0byBcIkRBX0RPSVwiIChleGNoYW5nZWQpXG5cbkhlcmUncyBteSBkZXRhaWxlZCBwbGFuOlxuXG4xLiAqKlVwZGF0ZSB0aGUgYGRvaVZlKClgIG1ldGhvZCBpbiBEb2lWZVBhbmVsLmphdmEqKjpcbiAgIC0gTW9kaWZ5IHRoZSBleGlzdGluZyBtZXRob2QgdG8gaGFuZGxlIHRoZSB0aWNrZXQgZXhjaGFuZ2UgcHJvY2Vzc1xuICAgLSBBZGQgbG9naWMgdG8gY2FsY3VsYXRlIHByaWNlIGRpZmZlcmVuY2VzIGJldHdlZW4gb2xkIGFuZCBuZXcgdGlja2V0c1xuICAgLSBDcmVhdGUgYSBuZXcgaW52b2ljZSBmb3IgdGhlIGV4Y2hhbmdlXG4gICAtIENyZWF0ZSBpbnZvaWNlIGRldGFpbHMgZm9yIHRoZSBjYWxjdWxhdGlvblxuICAgLSBVcGRhdGUgdGhlIHN0YXR1cyBvZiB0aGUgb2xkIHRpY2tldCB0byBcIkRBX0RPSVwiXG4gICAtIENyZWF0ZSBhIG5ldyB0aWNrZXQgd2l0aCB0aGUgc2VsZWN0ZWQgc2NoZWR1bGUgYW5kIHNlYXRcblxuMi4gKipBZGQgaGVscGVyIG1ldGhvZHMqKjpcbiAgIC0gQWRkIGEgbWV0aG9kIHRvIGdlbmVyYXRlIGEgbmV3IGludm9pY2UgSURcbiAgIC0gQWRkIGEgbWV0aG9kIHRvIGNyZWF0ZSBhIG5ldyBpbnZvaWNlXG4gICAtIEFkZCBhIG1ldGhvZCB0byBjcmVhdGUgaW52b2ljZSBkZXRhaWxzXG4gICAtIEFkZCBhIG1ldGhvZCB0byBoYW5kbGUgcGF5bWVudCBwcm9jZXNzaW5nIGZvciB0aGUgcHJpY2UgZGlmZmVyZW5jZVxuXG4zLiAqKlVwZGF0ZSB0aGUgVUkgdG8gc2hvdyBwcmljZSBkaWZmZXJlbmNlIGluZm9ybWF0aW9uKio6XG4gICAtIERpc3BsYXkgdGhlIHByaWNlIG9mIHRoZSBvbGQgdGlja2V0XG4gICAtIERpc3BsYXkgdGhlIHByaWNlIG9mIHRoZSBuZXcgdGlja2V0XG4gICAtIFNob3cgdGhlIHByaWNlIGRpZmZlcmVuY2UgKHJlZnVuZCBvciBhZGRpdGlvbmFsIGNoYXJnZSlcblxuTGV0IG1lIG5vdyBpbXBsZW1lbnQgdGhlc2UgY2hhbmdlczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YVxuLi4uXG5cbiAgICAgICAgICAgIFJlZ2lzdHJ5IHJlZ2lzdHJ5ID0gTG9jYXRlUmVnaXN0cnkuZ2V0UmVnaXN0cnkoUk1JX1NFUlZFUl9JUCwgUk1JX1NFUlZFUl9QT1JUKTtcbiAgICAgICAgICAgIGRvaVZlREFPID0gKERvaVZlREFPKSByZWdpc3RyeS5sb29rdXAoXCJkb2lWZURBT1wiKTtcbiAgICAgICAgICAgIGxpY2hUcmluaFRhdURBTyA9IChMaWNoVHJpbmhUYXVEQU8pIHJlZ2lzdHJ5Lmxvb2t1cChcImxpY2hUcmluaFRhdURBT1wiKTtcbi8vICAgICAgICAgICAga2h1eWVuTWFpREFPID0gKEtodXllbk1haURBTykgcmVnaXN0cnkubG9va3VwKFwia2h1eWVuTWFpREFPXCIpO1xuICAgICAgICAgICAgdG9hVGF1REFPID0gKFRvYVRhdURvaVZlREFPKSByZWdpc3RyeS5sb29rdXAoXCJ0b2FUYXVEb2lWZURBT1wiKTtcbiAgICAgICAgICAgIGNob05nb2lEQU8gPSAoQ2hvTmdvaURvaVZlREFPKSByZWdpc3RyeS5sb29rdXAoXCJjaG9OZ29pRG9pVmVEQU9cIik7XG4gICAgICAgICAgICBsb2FpSG9hRG9uREFPID0gKExvYWlIb2FEb25EQU8pIHJlZ2lzdHJ5Lmxvb2t1cChcImxvYWlIb2FEb25EQU9cIik7XG4gICAgICAgICAgICBob2FEb25EQU8gPSAoSG9hRG9uREFPKSByZWdpc3RyeS5sb29rdXAoXCJob2FEb25EQU9cIik7XG4gICAgICAgICAgICBjaGlUaWV0SG9hRG9uREFPID0gKENoaVRpZXRIb2FEb25EQU8pIHJlZ2lzdHJ5Lmxvb2t1cChcImNoaVRpZXRIb2FEb25EQU9cIik7XG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIGvhur90IG7hu5FpXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChkb2lWZURBTy50ZXN0Q29ubmVjdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgIFN3aW5nVXRpbGl0aWVzLmludm9rZUxhdGVyKCgpIC0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhSRUFEWV9URVhULCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFByZWxvYWRpbmdEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuLi4uXG5cbiAgICBwcml2YXRlIEpQYW5lbCBjcmVhdGVCdXR0b25QYW5lbCgpIHtcbiAgICAgICAgSlBhbmVsIGJ1dHRvblBhbmVsID0gbmV3IEpQYW5lbChuZXcgRmxvd0xheW91dChGbG93TGF5b3V0LkNFTlRFUiwgMjAsIDEwKSk7XG4gICAgICAgIGJ1dHRvblBhbmVsLnNldEJhY2tncm91bmQoQ29sb3IuV0hJVEUpO1xuXG4gICAgICAgIGJ0bkRvaVZlID0gbmV3IEpCdXR0b24oXCLEkOG7lWkgVsOpXCIpO1xuICAgICAgICBzdHlsZUJ1dHRvbihidG5Eb2lWZSwgcHJpbWFyeUNvbG9yLCBDb2xvci5XSElURSwgY3JlYXRlRXhjaGFuZ2VJY29uKDE2LCAxNiwgQ29sb3IuV0hJVEUpKTtcbiAgICAgICAgYnRuRG9pVmUuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiBkb2lWZSgpKTtcblxuICAgICAgICBidG5MYW1Nb2kgPSBuZXcgSkJ1dHRvbihcIkzDoG0gTeG7m2lcIik7XG4gICAgICAgIHN0eWxlQnV0dG9uKGJ0bkxhbU1vaSwgZ3JheUNvbG9yLCBDb2xvci5XSElURSwgY3JlYXRlUmVmcmVzaEljb24oMTYsIDE2LCBDb2xvci5XSElURSkpO1xuICAgICAgICBidG5MYW1Nb2kuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiBsYW1Nb2koKSk7XG4uLi5cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHByb2dyZXNzIGJhclxuICAgICAgICAgICAgaWYgKHByb2dyZXNzQmFyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zZXRWaXNpYmxlKGlzTG9hZGluZyk7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc2V0SW5kZXRlcm1pbmF0ZShpc0xvYWRpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHZvaWQgdGltVmUoKSB7XG4gICAgICAgIFN0cmluZyBtYVZlID0gdHh0TWFWZS5nZXRUZXh0KCkudHJpbSgpO1xuICAgICAgICBpZiAobWFWZS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsIFwiVnVpIGzDsm5nIG5o4bqtcCBtw6MgdsOpIVwiLCBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKExPQURJTkdfVEVYVCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIFN3aW5nV29ya2VyPFZlVGF1LCBWb2lkPiB3b3JrZXIgPSBuZXcgU3dpbmdXb3JrZXI8PigpIHtcbiAgICAgICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgVmVUYXUgZG9JbkJhY2tncm91bmQoKSB0aHJvd3MgRXhjZXB0aW9uIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvaVZlREFPLmdldFZlVGF1KG1hVmUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2b2lkIGRvbmUoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZVRhdUhpZW5UYWkgPSBnZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZVRhdUhpZW5UYWkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKERvaVZlUGFuZWwudGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiS2jDtG5nIHTDrG0gdGjhuqV5IHbDqSB24bubaSBtw6M6IFwiICsgbWFWZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW1Nb2koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2lhVmVCYW5EYXUgPSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWVuVGhpVGhvbmdUaW5WZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB4ZW0gY8OzIHRo4buDIMSR4buVaSB2w6kga2jDtG5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbiBjb1RoZURvaVZlID0gKHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKSA9PSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJbnB1dEZpZWxkc0VuYWJsZWQoY29UaGVEb2lWZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuRG9pVmUuc2V0RW5hYmxlZChjb1RoZURvaVZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEVuYWJsZWQoY29UaGVEb2lWZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQ2hvbkNob05nb2kuc2V0RW5hYmxlZChjb1RoZURvaVZlKTtcbi4uLlxuXG4gICAgcHJpdmF0ZSB2b2lkIGRvaVZlKCkge1xuICAgICAgICBpZiAodmVUYXVIaWVuVGFpID09IG51bGwpIHJldHVybjtcblxuICAgICAgICAvLyBLaeG7g20gdHJhIGThu68gbGnhu4d1IMSR4bqndSB2w6BvXG4gICAgICAgIFN0cmluZyB0ZW5LaGFjaEhhbmcgPSB0eHRUZW5LaGFjaEhhbmcuZ2V0VGV4dCgpLnRyaW0oKTtcbiAgICAgICAgaWYgKHRlbktoYWNoSGFuZy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsIFwiVnVpIGzDsm5nIG5o4bqtcCB0w6puIGtow6FjaCBow6BuZyFcIiwgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgdHh0VGVuS2hhY2hIYW5nLnJlcXVlc3RGb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgU3RyaW5nIGdpYXlUbyA9IHR4dEdpYXlUby5nZXRUZXh0KCkudHJpbSgpO1xuICAgICAgICBpZiAoZ2lheVRvLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcywgXCJWdWkgbMOybmcgbmjhuq1wIGdp4bqleSB04budIVwiLCBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICB0eHRHaWF5VG8ucmVxdWVzdEZvY3VzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbi4uLlxuXG4gICAgICAgICAgICAvLyDEkOG7lWkgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIENIT19YQUNfTkhBTlxuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pO1xuXG4gICAgICAgICAgICAvLyBH4buNaSBBUEkgxJHhu4MgY+G6rXAgbmjhuq10IHbDqVxuICAgICAgICAgICAgYm9vbGVhbiBzdWNjZXNzID0gZG9pVmVEQU8uZG9pVmUodmVUYXVIaWVuVGFpKTtcblxuICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVMaWNoU3VBbmRTaG93U3VjY2Vzcyh0cmFuZ1RoYWlDdSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIsSQ4buVaSB2w6kga2jDtG5nIHRow6BuaCBjw7RuZyFcIiwgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gxJHhu5VpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4uLi5cblxuICAgICAgICAvLyBMaXN0ZW5lciBjaG8gY29tYm9ib3ggxJHhu4MgY2h1eeG7g24gdGFiXG4gICAgICAgIGNtYlBheW1lbnRUeXBlLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgQ2FyZExheW91dCBjbCA9IChDYXJkTGF5b3V0KSBwbmxQYXltZW50VGFicy5nZXRMYXlvdXQoKTtcbiAgICAgICAgICAgIGludCBzZWxlY3RlZEluZGV4ID0gY21iUGF5bWVudFR5cGUuZ2V0U2VsZWN0ZWRJbmRleCgpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPT0gMCkge1xuICAgICAgICAgICAgICAgIGNsLnNob3cocG5sUGF5bWVudFRhYnMsIFwiQkFOS19UUkFOU0ZFUlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2wuc2hvdyhwbmxQYXltZW50VGFicywgXCJWTlBBWV9RUlwiKTtcbiAgICAgICAgICAgICAgICAvLyBU4bqhbyBRUiBjb2RlIGtoaSBjaOG7jW4gdGFiIFZOUGF5XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVWbnBheVFSQ29kZShsYmxRUkNvZGUsIHZlVGF1SGllblRhaS5nZXRNYVZlKCksIHZlVGF1SGllblRhaS5nZXRHaWFWZSgpLCBsYmxQYXltZW50U3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcG5sVHJhbnNmZXJJbmZvLnNldEJvcmRlcihCb3JkZXJGYWN0b3J5LmNyZWF0ZUVtcHR5Qm9yZGVyKDAsIDAsIDEwLCAwKSk7XG4gICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5hZGQocG5sVHJhbnNmZXJJbmZvLCBCb3JkZXJMYXlvdXQuTk9SVEgpO1xuICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuYWRkKHBubFBheW1lbnRUYWJzLCBCb3JkZXJMYXlvdXQuQ0VOVEVSKTtcblxuICAgICAgICAvLyBOw7p0IGzDoG0gbeG7m2kgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhblxuICAgICAgICBidG5SZWZyZXNoU3RhdHVzLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgY2hlY2tWbnBheVBheW1lbnRTdGF0dXModmVUYXVIaWVuVGFpLmdldE1hVmUoKSwgbGJsUGF5bWVudFN0YXR1cywgZGlhbG9nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSGnhu4NuIHRo4buLIHBhbmVsIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhbiBiYW4gxJHhuqd1ICht4bq3YyDEkeG7i25oIGzDoCB0aeG7gW4gbeG6t3QpXG4gICAgICAgIHBubFBheW1lbnQuYWRkKHBubENhc2hQYXltZW50KTtcbiAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICBwbmxQYXltZW50LmFkZChwbmxUcmFuc2ZlclBheW1lbnQpO1xuXG4gICAgICAgIC8vIFRow6ptIGxpc3RlbmVyIGNobyByYWRpbyBidXR0b24gxJHhu4MgY2h1eeG7g24gxJHhu5VpIGdp4buvYSBjw6FjIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhblxuICAgICAgICByYWRDYXNoLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgcG5sQ2FzaFBheW1lbnQuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIGRpYWxvZy5yZXZhbGlkYXRlKCk7XG4gICAgICAgICAgICBkaWFsb2cucmVwYWludCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICByYWRUcmFuc2Zlci5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgIHBubENhc2hQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICBkaWFsb2cucmV2YWxpZGF0ZSgpO1xuICAgICAgICAgICAgZGlhbG9nLnJlcGFpbnQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRkIGRvY3VtZW50IGxpc3RlbmVyIGZvciBhdXRvbWF0aWMgY2hhbmdlIGNhbGN1bGF0aW9uXG4gICAgICAgIHR4dEN1c3RvbWVyUGF5bWVudC5nZXREb2N1bWVudCgpLmFkZERvY3VtZW50TGlzdGVuZXIobmV3IERvY3VtZW50TGlzdGVuZXIoKSB7XG4gICAgICAgICAgICBwcml2YXRlIHZvaWQgdXBkYXRlQ2hhbmdlKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBpbnB1dCA9IHR4dEN1c3RvbWVyUGF5bWVudC5nZXRUZXh0KCkucmVwbGFjZUFsbChcIlteXFxcXGRdXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGN1c3RvbWVyUGF5bWVudCA9IERvdWJsZS5wYXJzZURvdWJsZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgY2hhbmdlID0gY3VzdG9tZXJQYXltZW50IC0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYmxDaGFuZ2Uuc2V0VGV4dChjdXJyZW5jeUZvcm1hdHRlci5mb3JtYXQoTWF0aC5tYXgoMCwgY2hhbmdlKSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGJsQ2hhbmdlLnNldFRleHQoXCIwIFZOxJBcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgICAgICBsYmxDaGFuZ2Uuc2V0VGV4dChcIjAgVk7EkFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4uLi5cblxuICAgICAgICBidG5UaGFuaFRvYW4uYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChyYWRDYXNoLmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBY4butIGzDvSB0aGFuaCB0b8OhbiB0aeG7gW4gbeG6t3RcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGlucHV0ID0gdHh0Q3VzdG9tZXJQYXltZW50LmdldFRleHQoKS5yZXBsYWNlQWxsKFwiW15cXFxcZF1cIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWdWkgbMOybmcgbmjhuq1wIHPhu5EgdGnhu4FuIGtow6FjaCDEkcawYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkb3VibGUgY3VzdG9tZXJQYXltZW50ID0gRG91YmxlLnBhcnNlRG91YmxlKGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1c3RvbWVyUGF5bWVudCA8IHZlVGF1SGllblRhaS5nZXRHaWFWZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiU+G7kSB0aeG7gW4ga2jDoWNoIMSRxrBhIGtow7RuZyDEkeG7p1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoeHVMeVRoYW5oVG9hbihcIlRJRU5fTUFUXCIsIFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgY2hhbmdlID0gY3VzdG9tZXJQYXltZW50IC0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93UGF5bWVudFN1Y2Nlc3NEaWFsb2coY2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbi4uLlxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBWTlBheSBRUlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gWMOhYyB0aOG7sWMgbOG6oWkgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBt4buZdCBs4bqnbiBu4buvYVxuICAgICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbiBwYXltZW50U3VjY2VzcyA9IGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKHZlVGF1SGllblRhaS5nZXRNYVZlKCksIGxibFBheW1lbnRTdGF0dXMsIG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF5bWVudFN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Vm5wYXlTdWNjZXNzRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0FmdGVyU3VjY2Vzc2Z1bFBheW1lbnQoZGlhbG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDaMawYSBuaOG6rW4gxJHGsOG7o2MgdGjDtG5nIHRpbiB0aGFuaCB0b8Ohbi4gVnVpIGzDsm5nIHRoYW5oIHRvw6FuIGhv4bq3YyBraeG7g20gdHJhIGzhuqFpLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDaMawYSB0aGFuaCB0b8OhblwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGV4KSB7XG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJT4buRIHRp4buBbiBraMO0bmcgaOG7o3AgbOG7h1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgIGV4LnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRoYW5oIHRvw6FuOiBcIiArIGV4LmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuLi4uXG5cbiAgICBwcml2YXRlIHZvaWQgZ2VuZXJhdGVWbnBheVFSQ29kZShKTGFiZWwgbGJsUVJDb2RlLCBTdHJpbmcgbWFWZSwgZG91YmxlIGFtb3VudCwgSkxhYmVsIGxibFN0YXR1cykge1xuICAgICAgICAvLyBU4bqhbyBTd2luZ1dvcmtlciDEkeG7gyBraMO0bmcgbMOgbSDEkcahIGdpYW8gZGnhu4duXG4gICAgICAgIFN3aW5nV29ya2VyPEltYWdlSWNvbiwgVm9pZD4gd29ya2VyID0gbmV3IFN3aW5nV29ya2VyPD4oKSB7XG4gICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICAgICAgICAgIHByb3RlY3RlZCBJbWFnZUljb24gZG9JbkJhY2tncm91bmQoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVOG6oW8gdGhhbSBz4buRIGNobyBBUEkgVk5QYXlcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9UeG5SZWYgPSBtYVZlICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCk7IC8vIE3DoyB0aGFtIGNoaeG6v3UgZ2lhbyBk4buLY2hcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9BbW91bnQgPSBTdHJpbmcudmFsdWVPZigobG9uZykoYW1vdW50ICogMTAwKSk7IC8vIFPhu5EgdGnhu4FuICogMTAwICjEkcahbiB24buLIHh1KVxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgdm5wX09yZGVySW5mbyA9IFwiVGhhbmggdG9hbiBob2EgZG9uIHZlIHRhdSBcIiArIG1hVmU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVVJMIEFQSSB04bqhbyBtw6MgUVIgY+G7p2EgVk5QYXkgKMSRw6J5IGzDoCBVUkwgZ2nhuqMgxJHhu4tuaCwgYuG6oW4gY+G6p24gdGhheSB0aOG6vyBi4bqxbmcgVVJMIHRo4buxYylcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGFwaVVybCA9IFwiaHR0cHM6Ly9zYW5kYm94LnZucGF5bWVudC52bi9wYXltZW50djIvY3JlYXRlX3FyX2NvZGUuaHRtbFwiO1xuLi4uXG5cbiAgICAvLyBQaMawxqFuZyB0aOG7qWMgeOG7rSBsw70gc2F1IGtoaSB0aGFuaCB0b8OhbiB0aMOgbmggY8O0bmdcbiAgICBwcml2YXRlIHZvaWQgcHJvY2Vzc0FmdGVyU3VjY2Vzc2Z1bFBheW1lbnQoSkRpYWxvZyBkaWFsb2cpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIMSQw4NfVEhBTkhfVE9BTlxuICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pO1xuXG4gICAgICAgIC8vIEfhu41pIEFQSSDEkeG7gyBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6lcbiAgICAgICAgYm9vbGVhbiBzdWNjZXNzID0gZG9pVmVEQU8uY2FwTmhhdFRyYW5nVGhhaVZlKHZlVGF1SGllblRhaS5nZXRNYVZlKCksIFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pO1xuLi4uXG4gICAgcHJpdmF0ZSBib29sZWFuIHh1THlUaGFuaFRvYW4oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIDEuIFTDrG0ga2jDoWNoIGjDoG5nIHThu6sgbcOjIHbDqVxuICAgICAgICAgICAgS2hhY2hIYW5nIGtoYWNoSGFuZyA9IGRvaVZlREFPLmdldEtoYWNoSGFuZ0J5TWFWZSh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpKTtcbiAgICAgICAgICAgIGlmIChraGFjaEhhbmcgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJLaMO0bmcgdMOsbSB0aOG6pXkgdGjDtG5nIHRpbiBraMOhY2ggaMOgbmchXCIpO1xuICAgICAgICAgICAgfVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9Eb2lWZURBTy5qYXZhXG4uLi5cblxucHVibGljIGludGVyZmFjZSBEb2lWZURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgVmVUYXUgZ2V0VmVUYXUoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZG9pVmUoVmVUYXUgdmVUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxWZVRhdT4gZ2V0VmVUYXVCeVRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB0ZXN0Q29ubmVjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxUcmFuZ1RoYWlWZVRhdT4gZ2V0QWxsVHJhbmdUaGFpVmUoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gVGjDqm0gY2jhu6ljIG7Eg25nIG3hu5tpXG4gICAgYm9vbGVhbiBkYXRWZShWZVRhdSB2ZVRhdSwgU3RyaW5nIGNob05nb2lJZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGh1eVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gdGhhbmhUb2FuVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBjYXBOaGF0VHJhbmdUaGFpVmUoU3RyaW5nIG1hVmUsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBLaGFjaEhhbmcgZ2V0S2hhY2hIYW5nQnlNYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9Eb2lWZURBT0ltcGwuamF2YVxuLi4uXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIHTDrG0gdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIHTDrG0gdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2ZVRhdTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBkb2lWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpPSU4gRkVUQ0ggxJHhu4MgdOG6o2kgdHLGsOG7m2MgZOG7ryBsaeG7h3UgbGnDqm4gcXVhblxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCB2dCBGUk9NIFZlVGF1IHZ0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQubGljaFRyaW5oVGF1IGx0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmNob05nb2kgY24gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5raHV5ZW5NYWkga20gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBsdHQudGF1IHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB0LnR1eWVuVGF1IHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2dC50cmFuZ1RoYWkgPSA6dHJhbmdUaGFpXCI7XG5cbiAgICAgICAgICAgIGxpc3QgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBWZVRhdS5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcInRyYW5nVGhhaVwiLCB0cmFuZ1RoYWkpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRSZXN1bHRMaXN0KCk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB2w6kgdGhlbyB0cuG6oW5nIHRow6FpOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggdsOpIHRoZW8gdHLhuqFuZyB0aMOhaVwiLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgY2jhu5cgbmfhu5NpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIENob05nb2kgY2hvTmdvaSA9IGVtLmZpbmQoQ2hvTmdvaS5jbGFzcywgY2hvTmdvaUlkKTtcbiAgICAgICAgICAgIGlmIChjaG9OZ29pID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSBjaOG7lyBuZ+G7k2kgY8OzIHRy4buRbmcga2jDtG5nXG4gICAgICAgICAgICBpZiAoY2hvTmdvaS5pc1RpbmhUcmFuZygpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgbOG7i2NoIHRyw6xuaCBjw7MgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICBMaWNoVHJpbmhUYXUgbGljaFRyaW5oVGF1ID0gZW0uZmluZChMaWNoVHJpbmhUYXUuY2xhc3MsIHZlVGF1LmdldExpY2hUcmluaFRhdSgpLmdldE1hTGljaCgpKTtcbiAgICAgICAgICAgIGlmIChsaWNoVHJpbmhUYXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBU4bqhbyBtw6MgdsOpIG3hu5tpIG7hur91IGNoxrBhIGPDs1xuICAgICAgICAgICAgaWYgKHZlVGF1LmdldE1hVmUoKSA9PSBudWxsIHx8IHZlVGF1LmdldE1hVmUoKS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBTdHJpbmcgbWFWZSA9IFwiVkVcIiArIFVVSUQucmFuZG9tVVVJRCgpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDgpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdmVUYXUuc2V0TWFWZShtYVZlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gdsOpXG4gICAgICAgICAgICB2ZVRhdS5zZXRDaG9OZ29pKGNob05nb2kpO1xuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTik7XG5cbiAgICAgICAgICAgIC8vIFTDrW5oIGdpw6EgdsOpXG4gICAgICAgICAgICBkb3VibGUgZ2lhVmUgPSBjaG9OZ29pLmdldEdpYVRpZW4oKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRLaHV5ZW5NYWkoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgS2h1eWVuTWFpIGtodXllbk1haSA9IGVtLmZpbmQoS2h1eWVuTWFpLmNsYXNzLCB2ZVRhdS5nZXRLaHV5ZW5NYWkoKS5nZXRNYUtNKCkpO1xuICAgICAgICAgICAgICAgIHZlVGF1LnNldEtodXllbk1haShraHV5ZW5NYWkpO1xuICAgICAgICAgICAgICAgIGdpYVZlICo9ICgxIC0ga2h1eWVuTWFpLmdldENoaWV0S2hhdSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZlVGF1LnNldEdpYVZlKGdpYVZlKTtcblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgY2jhu5cgbmfhu5NpXG4gICAgICAgICAgICBjaG9OZ29pLnNldFRpbmhUcmFuZyh0cnVlKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKGNob05nb2kpO1xuXG4gICAgICAgICAgICAvLyBMxrB1IHbDqSBt4bubaVxuICAgICAgICAgICAgZW0ucGVyc2lzdCh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB2w6kgY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgVmVUYXUgdmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCBtYVZlKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSB2w6kgKGNo4buJIGjhu6d5IMSRxrDhu6NjIHbDqSDhu58gdHLhuqFuZyB0aMOhaSBDSE9fWEFDX05IQU4gaG/hurdjIERBX1RIQU5IX1RPQU4pXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0VHJhbmdUaGFpKCkgIT0gVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOICYmXG4gICAgICAgICAgICAgICAgICAgIHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2nhuqNpIHBow7NuZyBjaOG7lyBuZ+G7k2lcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRDaG9OZ29pKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIENob05nb2kgY2hvTmdvaSA9IHZlVGF1LmdldENob05nb2koKTtcbiAgICAgICAgICAgICAgICBjaG9OZ29pLnNldFRpbmhUcmFuZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgZW0ubWVyZ2UoY2hvTmdvaSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqSB0aMOgbmggREFfVFJBXG4gICAgICAgICAgICB2ZVRhdS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuREFfVFJBKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKHZlVGF1KTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gdGhhbmhUb2FuVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB2w6kgY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgVmVUYXUgdmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCBtYVZlKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSB2w6kgKGNo4buJIHRoYW5oIHRvw6FuIMSRxrDhu6NjIHbDqSDhu58gdHLhuqFuZyB0aMOhaSBDSE9fWEFDX05IQU4pXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0VHJhbmdUaGFpKCkgIT0gVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqSB0aMOgbmggREFfVEhBTkhfVE9BTlxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pO1xuICAgICAgICAgICAgZW0ubWVyZ2UodmVUYXUpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBjYXBOaGF0VHJhbmdUaGFpVmUoU3RyaW5nIG1hVmUsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHbDqSBjw7MgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICBWZVRhdSB2ZVRhdSA9IGVtLmZpbmQoVmVUYXUuY2xhc3MsIG1hVmUpO1xuICAgICAgICAgICAgaWYgKHZlVGF1ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpXG4gICAgICAgICAgICB2ZVRhdS5zZXRUcmFuZ1RoYWkodHJhbmdUaGFpKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKHZlVGF1KTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4uLi5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTkxM3JIQ0FLczloSG9uVWRRaTh0WEIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyIsImZvbGRlclJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiJOb3cgSSBoYXZlIGEgZ29vZCB1bmRlcnN0YW5kaW5nIG9mIHRoZSBjb2RlYmFzZSBhbmQgd2hhdCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZC4gTGV0IG1lIGNyZWF0ZSBhIGRldGFpbGVkIHBsYW4gZm9yIHVwZGF0aW5nIHRoZSBEb2lWZVBhbmVsIHRvIGltcGxlbWVudCB0aGUgdGlja2V0IGV4Y2hhbmdlIGZ1bmN0aW9uYWxpdHkuXG5cbiMjIFBsYW4gZm9yIFVwZGF0aW5nIERvaVZlUGFuZWxcblxuQmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIGdhdGhlcmVkLCBJJ2xsIHVwZGF0ZSB0aGUgRG9pVmVQYW5lbCB0byBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBmdW5jdGlvbmFsaXR5OlxuMS4gU2F2ZSBhIG5ldyBpbnZvaWNlIHdoZW4gZXhjaGFuZ2luZyB0aWNrZXRzXG4yLiBDYWxjdWxhdGUgcmVmdW5kcyBvciBhZGRpdGlvbmFsIGNoYXJnZXMgYmFzZWQgb24gdGhlIHByaWNlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgb2xkIGFuZCBuZXcgdGlja2V0c1xuMy4gQ3JlYXRlIGludm9pY2UgZGV0YWlscyBmb3IgdGhlIGNhbGN1bGF0aW9uXG40LiBDcmVhdGUgYSBuZXcgdGlja2V0XG41LiBDaGFuZ2UgdGhlIHN0YXR1cyBvZiB0aGUgb2xkIHRpY2tldCB0byBcIkRBX0RPSVwiIChleGNoYW5nZWQpXG5cbkhlcmUncyBteSBkZXRhaWxlZCBwbGFuOlxuXG4xLiAqKlVwZGF0ZSB0aGUgYGRvaVZlKClgIG1ldGhvZCBpbiBEb2lWZVBhbmVsLmphdmEqKjpcbiAgIC0gTW9kaWZ5IHRoZSBleGlzdGluZyBtZXRob2QgdG8gaGFuZGxlIHRoZSB0aWNrZXQgZXhjaGFuZ2UgcHJvY2Vzc1xuICAgLSBBZGQgbG9naWMgdG8gY2FsY3VsYXRlIHByaWNlIGRpZmZlcmVuY2VzIGJldHdlZW4gb2xkIGFuZCBuZXcgdGlja2V0c1xuICAgLSBDcmVhdGUgYSBuZXcgaW52b2ljZSBmb3IgdGhlIGV4Y2hhbmdlXG4gICAtIENyZWF0ZSBpbnZvaWNlIGRldGFpbHMgZm9yIHRoZSBjYWxjdWxhdGlvblxuICAgLSBVcGRhdGUgdGhlIHN0YXR1cyBvZiB0aGUgb2xkIHRpY2tldCB0byBcIkRBX0RPSVwiXG4gICAtIENyZWF0ZSBhIG5ldyB0aWNrZXQgd2l0aCB0aGUgc2VsZWN0ZWQgc2NoZWR1bGUgYW5kIHNlYXRcblxuMi4gKipBZGQgaGVscGVyIG1ldGhvZHMqKjpcbiAgIC0gQWRkIGEgbWV0aG9kIHRvIGdlbmVyYXRlIGEgbmV3IGludm9pY2UgSURcbiAgIC0gQWRkIGEgbWV0aG9kIHRvIGNyZWF0ZSBhIG5ldyBpbnZvaWNlXG4gICAtIEFkZCBhIG1ldGhvZCB0byBjcmVhdGUgaW52b2ljZSBkZXRhaWxzXG4gICAtIEFkZCBhIG1ldGhvZCB0byBoYW5kbGUgcGF5bWVudCBwcm9jZXNzaW5nIGZvciB0aGUgcHJpY2UgZGlmZmVyZW5jZVxuXG4zLiAqKlVwZGF0ZSB0aGUgVUkgdG8gc2hvdyBwcmljZSBkaWZmZXJlbmNlIGluZm9ybWF0aW9uKio6XG4gICAtIERpc3BsYXkgdGhlIHByaWNlIG9mIHRoZSBvbGQgdGlja2V0XG4gICAtIERpc3BsYXkgdGhlIHByaWNlIG9mIHRoZSBuZXcgdGlja2V0XG4gICAtIFNob3cgdGhlIHByaWNlIGRpZmZlcmVuY2UgKHJlZnVuZCBvciBhZGRpdGlvbmFsIGNoYXJnZSlcblxuTGV0IG1lIG5vdyBpbXBsZW1lbnQgdGhlc2UgY2hhbmdlczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0NWI5MzhlNy1hYjI5LTQ4NzktOTRiMC1kMTg1MTM5ZmRkMDkiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFSY3FFVjVCOVREQTRXVEFpanFCRTh0IiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTaG93IG1lIHRoZSBkb2lWZSBtZXRob2QgaW4gRG9pVmVQYW5lbC5qYXZhXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQgbWUgdHJ5IHRvIHZpZXcgdGhlIGZpbGUgd2l0aCBhIGRpZmZlcmVudCBhcHByb2FjaDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlJhbiBpbnRvIFVua25vd24gZXJyb3Igd2hpbGUgdHJ5aW5nIHRvIHJlYWQgUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhIiwiaXNfZXJyb3IiOnRydWUsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDEzYkxjOUpnTUx4QUYzU3kyR0xxN3N6In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmciLCJmb2xkZXJSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiTGV0IG1lIHRyeSB0byB2aWV3IHRoZSBmaWxlIHdpdGggYSBkaWZmZXJlbnQgYXBwcm9hY2g6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiODQ0MWJmY2YtNTFjNC00ZjkzLWIyYzktNzZiNDVmOWFlOTg4IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVHUyWjk1M3ZqMUR1TGNobnVQd0p6ZiIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiU2hvdyBtZSBhbnkgbWV0aG9kcyBpbiBEb2lWZVBhbmVsLmphdmEgcmVsYXRlZCB0byBwYXltZW50IHByb2Nlc3NpbmcsIGludm9pY2UgY3JlYXRpb24sIG9yIHRpY2tldCBzdGF0dXMgdXBkYXRlc1wifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0IG1lIGdldCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBleGlzdGluZyBpbXBsZW1lbnRhdGlvbiB0byB1bmRlcnN0YW5kIGhvdyB0byB1cGRhdGUgaXQ6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmFcbi4uLlxuXG4gICAgICAgIGxibENob05nb2kgPSBuZXcgSkxhYmVsKFwiQ2jGsGEgY2jhu41uXCIpO1xuICAgICAgICBsYmxDaG9OZ29pLnNldEZvbnQoZmllbGRGb250KTtcbiAgICAgICAgcG5sQ2hvTmdvaS5hZGQobGJsQ2hvTmdvaSwgQm9yZGVyTGF5b3V0LkNFTlRFUik7XG5cbiAgICAgICAgLy8gVOG6oW8gSkJ1dHRvbiB0w7l5IGNo4buJbmggY2hvIGNo4buXIG5n4buTaVxuICAgICAgICBidG5DaG9uQ2hvTmdvaSA9IG5ldyBKQnV0dG9uKFwiQ2jhu41uXCIpIHtcbiAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgcHJvdGVjdGVkIHZvaWQgcGFpbnRDb21wb25lbnQoR3JhcGhpY3MgZykge1xuICAgICAgICAgICAgICAgIEdyYXBoaWNzMkQgZzIgPSAoR3JhcGhpY3MyRCkgZy5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICBnMi5zZXRSZW5kZXJpbmdIaW50KFJlbmRlcmluZ0hpbnRzLktFWV9BTlRJQUxJQVNJTkcsIFJlbmRlcmluZ0hpbnRzLlZBTFVFX0FOVElBTElBU19PTik7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1vZGVsKCkuaXNQcmVzc2VkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGcyLnNldENvbG9yKHByaW1hcnlDb2xvci5kYXJrZXIoKS5kYXJrZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2V0TW9kZWwoKS5pc1JvbGxvdmVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGcyLnNldENvbG9yKHByaW1hcnlDb2xvci5kYXJrZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnMi5zZXRDb2xvcihwcmltYXJ5Q29sb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZzIuc2V0Q29sb3IobmV3IENvbG9yKDIwMCwgMjAwLCAyMDApKTsgLy8gTcOgdSBraGkgbsO6dCBi4buLIHbDtCBoaeG7h3UgaMOzYVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGcyLmZpbGxSZWN0KDAsIDAsIGdldFdpZHRoKCksIGdldEhlaWdodCgpKTtcbiAgICAgICAgICAgICAgICBnMi5kaXNwb3NlKCk7XG5cbiAgICAgICAgICAgICAgICBzdXBlci5wYWludENvbXBvbmVudChnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbi4uLlxuXG4gICAgcHJpdmF0ZSBKUGFuZWwgY3JlYXRlQnV0dG9uUGFuZWwoKSB7XG4gICAgICAgIEpQYW5lbCBidXR0b25QYW5lbCA9IG5ldyBKUGFuZWwobmV3IEZsb3dMYXlvdXQoRmxvd0xheW91dC5DRU5URVIsIDIwLCAxMCkpO1xuICAgICAgICBidXR0b25QYW5lbC5zZXRCYWNrZ3JvdW5kKENvbG9yLldISVRFKTtcblxuICAgICAgICBidG5Eb2lWZSA9IG5ldyBKQnV0dG9uKFwixJDhu5VpIFbDqVwiKTtcbiAgICAgICAgc3R5bGVCdXR0b24oYnRuRG9pVmUsIHByaW1hcnlDb2xvciwgQ29sb3IuV0hJVEUsIGNyZWF0ZUV4Y2hhbmdlSWNvbigxNiwgMTYsIENvbG9yLldISVRFKSk7XG4gICAgICAgIGJ0bkRvaVZlLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4gZG9pVmUoKSk7XG5cbiAgICAgICAgYnRuTGFtTW9pID0gbmV3IEpCdXR0b24oXCJMw6BtIE3hu5tpXCIpO1xuICAgICAgICBzdHlsZUJ1dHRvbihidG5MYW1Nb2ksIGdyYXlDb2xvciwgQ29sb3IuV0hJVEUsIGNyZWF0ZVJlZnJlc2hJY29uKDE2LCAxNiwgQ29sb3IuV0hJVEUpKTtcbiAgICAgICAgYnRuTGFtTW9pLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4gbGFtTW9pKCkpO1xuLi4uXG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkgPSAoVHJhbmdUaGFpVmVUYXUpIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRyYW5nVGhhaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEQV9USEFOSF9UT0FOOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoc3VjY2Vzc0NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZVBheW1lbnRJY29uKDE0LCAxNCwgc3VjY2Vzc0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENIT19YQUNfTkhBTjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRGb3JlZ3JvdW5kKHdhcm5pbmdDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVQZW5kaW5nSWNvbigxNCwgMTQsIHdhcm5pbmdDb2xvcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRGb3JlZ3JvdW5kKGRhcmtUZXh0Q29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24obnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRIb3Jpem9udGFsQWxpZ25tZW50KEpMYWJlbC5DRU5URVIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4uLi5cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSA9IChUcmFuZ1RoYWlWZVRhdSkgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJhbmdUaGFpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERBX1RIQU5IX1RPQU46XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChzdWNjZXNzQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24oY3JlYXRlUGF5bWVudEljb24oMTQsIDE0LCBzdWNjZXNzQ29sb3IpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ0hPX1hBQ19OSEFOOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQod2FybmluZ0NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZVBlbmRpbmdJY29uKDE0LCAxNCwgd2FybmluZ0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoZGFya1RleHRDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEhvcml6b250YWxBbGlnbm1lbnQoSkxhYmVsLkNFTlRFUik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbi4uLlxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgcHJvZ3Jlc3MgYmFyXG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3NCYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnNldFZpc2libGUoaXNMb2FkaW5nKTtcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zZXRJbmRldGVybWluYXRlKGlzTG9hZGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgdm9pZCB0aW1WZSgpIHtcbiAgICAgICAgU3RyaW5nIG1hVmUgPSB0eHRNYVZlLmdldFRleHQoKS50cmltKCk7XG4gICAgICAgIGlmIChtYVZlLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcywgXCJWdWkgbMOybmcgbmjhuq1wIG3DoyB2w6khXCIsIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoTE9BRElOR19URVhULCB0cnVlKTtcblxuICAgICAgICAgICAgU3dpbmdXb3JrZXI8VmVUYXUsIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBWZVRhdSBkb0luQmFja2dyb3VuZCgpIHRocm93cyBFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9pVmVEQU8uZ2V0VmVUYXUobWFWZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZvaWQgZG9uZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlVGF1SGllblRhaSA9IGdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlVGF1SGllblRhaSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coRG9pVmVQYW5lbC50aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJLaMO0bmcgdMOsbSB0aOG6pXkgdsOpIHbhu5tpIG3DozogXCIgKyBtYVZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbU1vaSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaWFWZUJhbkRhdSA9IHZlVGF1SGllblRhaS5nZXRHaWFWZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZW5UaGlUaG9uZ1RpblZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLaeG7g20gdHJhIHhlbSBjw7MgdGjhu4MgxJHhu5VpIHbDqSBraMO0bmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sZWFuIGNvVGhlRG9pVmUgPSAodmVUYXVIaWVuVGFpLmdldFRyYW5nVGhhaSgpID09IFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldElucHV0RmllbGRzRW5hYmxlZChjb1RoZURvaVZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5Eb2lWZS5zZXRFbmFibGVkKGNvVGhlRG9pVmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkNob25MaWNoVHJpbmguc2V0RW5hYmxlZChjb1RoZURvaVZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5DaG9uQ2hvTmdvaS5zZXRFbmFibGVkKGNvVGhlRG9pVmUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb1RoZURvaVZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKERvaVZlUGFuZWwudGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlbDqSBuw6B5IGPDsyB0cuG6oW5nIHRow6FpICdcIiArIHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIicuIENo4buJIHbDqSDhu58gdHLhuqFuZyB0aMOhaSAnxJDDgyBUSEFOSCBUT8OBTicgbeG7m2kgY8OzIHRo4buDIMSR4buVaS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIktow7RuZyB0aOG7gyDEkeG7lWkgdsOpXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3RhdHVzKFJFQURZX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhEb2lWZVBhbmVsLnRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRydXkgduG6pW4gZOG7ryBsaeG7h3U6IFwiICsgZS5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgd29ya2VyLmV4ZWN1dGUoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLCBcIkzhu5dpIGtoaSB0cnV5IHbhuqVuIGThu68gbGnhu4d1OiBcIiArIGUuZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdm9pZCBoaWVuVGhpVGhvbmdUaW5WZSgpIHtcbiAgICAgICAgaWYgKHZlVGF1SGllblRhaSA9PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgdHh0VGVuS2hhY2hIYW5nLnNldFRleHQodmVUYXVIaWVuVGFpLmdldFRlbktoYWNoSGFuZygpKTtcbiAgICAgICAgdHh0R2lheVRvLnNldFRleHQodmVUYXVIaWVuVGFpLmdldEdpYXlUbygpKTtcbiAgICAgICAgdHh0TmdheURpLnNldFRleHQodmVUYXVIaWVuVGFpLmdldE5nYXlEaSgpLmZvcm1hdChmb3JtYXR0ZXIpKTtcblxuICAgICAgICAvLyDEkOG6t3QgxJHhu5FpIHTGsOG7o25nXG4gICAgICAgIFN0cmluZyBkb2lUdW9uZyA9IHZlVGF1SGllblRhaS5nZXREb2lUdW9uZygpO1xuICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGNib0RvaVR1b25nLmdldEl0ZW1Db3VudCgpOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjYm9Eb2lUdW9uZy5nZXRJdGVtQXQoaSkuZXF1YWxzKGRvaVR1b25nKSkge1xuICAgICAgICAgICAgICAgIGNib0RvaVR1b25nLnNldFNlbGVjdGVkSW5kZXgoaSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbi4uLlxuXG4gICAgICAgIC8vIEhp4buDbiB0aOG7iyB0cuG6oW5nIHRow6FpIHbDoCBnacOhIHbDqSB24bubaSBtw6B1IHPhuq9jIGtow6FjIG5oYXVcbiAgICAgICAgbGJsVHJhbmdUaGFpLnNldFRleHQodmVUYXVIaWVuVGFpLmdldFRyYW5nVGhhaSgpLnRvU3RyaW5nKCkpO1xuICAgICAgICBzZXRUcmFuZ1RoYWlDb2xvcihsYmxUcmFuZ1RoYWksIHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKSk7XG5cbiAgICAgICAgbGJsR2lhVmUuc2V0VGV4dChjdXJyZW5jeUZvcm1hdHRlci5mb3JtYXQodmVUYXVIaWVuVGFpLmdldEdpYVZlKCkpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHZvaWQgc2V0VHJhbmdUaGFpQ29sb3IoSkxhYmVsIGxhYmVsLCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHtcbiAgICAgICAgc3dpdGNoICh0cmFuZ1RoYWkpIHtcbiAgICAgICAgICAgIGNhc2UgQ0hPX1hBQ19OSEFOOlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQod2FybmluZ0NvbG9yKTsgLy8gQ2FtXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVQZW5kaW5nSWNvbigxNCwgMTQsIHdhcm5pbmdDb2xvcikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEQV9USEFOSF9UT0FOOlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoc3VjY2Vzc0NvbG9yKTsgLy8gWGFuaCBsw6FcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZUNoZWNrSWNvbigxNCwgMTQsIHN1Y2Nlc3NDb2xvcikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEQV9UUkE6XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChkYW5nZXJDb2xvcik7IC8vIMSQ4buPXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVDYW5jZWxJY29uKDE0LCAxNCwgZGFuZ2VyQ29sb3IpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgREFfRE9JOlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoZ3JheUNvbG9yKTsgLy8gWMOhbVxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24oY3JlYXRlRXhjaGFuZ2VJY29uKDE0LCAxNCwgZ3JheUNvbG9yKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoZGFya1RleHRDb2xvcik7XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdm9pZCBkb2lWZSgpIHtcbiAgICAgICAgaWYgKHZlVGF1SGllblRhaSA9PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgLy8gS2nhu4NtIHRyYSBk4buvIGxp4buHdSDEkeG6p3UgdsOgb1xuICAgICAgICBTdHJpbmcgdGVuS2hhY2hIYW5nID0gdHh0VGVuS2hhY2hIYW5nLmdldFRleHQoKS50cmltKCk7XG4gICAgICAgIGlmICh0ZW5LaGFjaEhhbmcuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLCBcIlZ1aSBsw7JuZyBuaOG6rXAgdMOqbiBraMOhY2ggaMOgbmchXCIsIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgIHR4dFRlbktoYWNoSGFuZy5yZXF1ZXN0Rm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIFN0cmluZyBnaWF5VG8gPSB0eHRHaWF5VG8uZ2V0VGV4dCgpLnRyaW0oKTtcbiAgICAgICAgaWYgKGdpYXlUby5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsIFwiVnVpIGzDsm5nIG5o4bqtcCBnaeG6pXkgdOG7nSFcIiwgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgdHh0R2lheVRvLnJlcXVlc3RGb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4uLi5cblxuICAgICAgICAgICAgLy8gxJDhu5VpIHRy4bqhbmcgdGjDoWkgdsOpIHRow6BuaCBDSE9fWEFDX05IQU5cbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKTtcblxuICAgICAgICAgICAgLy8gR+G7jWkgQVBJIMSR4buDIGPhuq1wIG5o4bqtdCB2w6lcbiAgICAgICAgICAgIGJvb2xlYW4gc3VjY2VzcyA9IGRvaVZlREFPLmRvaVZlKHZlVGF1SGllblRhaSk7XG5cbiAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlTGljaFN1QW5kU2hvd1N1Y2Nlc3ModHJhbmdUaGFpQ3UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCLEkOG7lWkgdsOpIGtow7RuZyB0aMOgbmggY8O0bmchXCIsIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgdXBkYXRlU3RhdHVzKEVSUk9SX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIMSR4buVaSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuLi4uXG5cbiAgICBwcml2YXRlIHZvaWQgaGllblRoaURpYWxvZ0Nob25DaG9OZ29pKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGxpY2hUcmluaERhQ2hvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVnVpIGzDsm5nIGNo4buNbiBs4buLY2ggdHLDrG5oIHRyxrDhu5tjIGtoaSBjaOG7jW4gY2jhu5cgbmfhu5NpIVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSGnhu4NuIHRo4buLIGRpYWxvZyBjaOG7jW4gY2jhu5cgbmfhu5NpXG4gICAgICAgICAgICBDaG9OZ29pU2VsZWN0b3JEaWFsb2cgZGlhbG9nID0gbmV3IENob05nb2lTZWxlY3RvckRpYWxvZyhcbiAgICAgICAgICAgICAgICAgICAgKEZyYW1lKSBTd2luZ1V0aWxpdGllcy5nZXRXaW5kb3dBbmNlc3Rvcih0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgbGljaFRyaW5oRGFDaG9uLFxuICAgICAgICAgICAgICAgICAgICBjaG9OZ29pREFPLFxuICAgICAgICAgICAgICAgICAgICB0b2FUYXVEQU8sXG4gICAgICAgICAgICAgICAgICAgIHRoaXM6Onh1THlDaG9OZ29pRGFDaG9uXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZGlhbG9nLnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgXCJLaMO0bmcgdGjhu4MgaGnhu4NuIHRo4buLIGdpYW8gZGnhu4duIGNo4buNbiBjaOG7lyBuZ+G7k2k6IFwiICsgZS5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHZvaWQgeHVMeUNob05nb2lEYUNob24oQ2hvTmdvaSBjaG9OZ29pKSB7XG4gICAgICAgIGlmIChjaG9OZ29pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNob05nb2lEYUNob24gPSBjaG9OZ29pO1xuICAgICAgICAgICAgbGJsQ2hvTmdvaS5zZXRUZXh0KGNob05nb2kuZ2V0VGVuQ2hvKCkgKyBcIiAtIFwiICtcbiAgICAgICAgICAgICAgICAgICAgKGNob05nb2kuZ2V0TG9haUNobygpICE9IG51bGwgPyBjaG9OZ29pLmdldExvYWlDaG8oKS5nZXRUZW5Mb2FpKCkgOiBcIlwiKSk7XG5cbiAgICAgICAgICAgIGNhcE5oYXRHaWFWZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2b2lkIGNhcE5oYXRHaWFWZSgpIHtcbiAgICAgICAgaWYgKGNob05nb2lEYUNob24gIT0gbnVsbCkge1xuICAgICAgICAgICAgU3RyaW5nIGRvaVR1b25nID0gT2JqZWN0cy5yZXF1aXJlTm9uTnVsbChjYm9Eb2lUdW9uZy5nZXRTZWxlY3RlZEl0ZW0oKSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGRvdWJsZSBnaWFWZSA9IHRpbmhHaWFWZShjaG9OZ29pRGFDaG9uLCBraHV5ZW5NYWlEYUNob24sIGRvaVR1b25nKTtcbiAgICAgICAgICAgIGxibEdpYVZlLnNldFRleHQoY3VycmVuY3lGb3JtYXR0ZXIuZm9ybWF0KGdpYVZlKSk7XG4gICAgICAgIH1cbiAgICB9XG4uLi5cblxuICAgICAgICAvLyBMaXN0ZW5lciBjaG8gY29tYm9ib3ggxJHhu4MgY2h1eeG7g24gdGFiXG4gICAgICAgIGNtYlBheW1lbnRUeXBlLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgQ2FyZExheW91dCBjbCA9IChDYXJkTGF5b3V0KSBwbmxQYXltZW50VGFicy5nZXRMYXlvdXQoKTtcbiAgICAgICAgICAgIGludCBzZWxlY3RlZEluZGV4ID0gY21iUGF5bWVudFR5cGUuZ2V0U2VsZWN0ZWRJbmRleCgpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPT0gMCkge1xuICAgICAgICAgICAgICAgIGNsLnNob3cocG5sUGF5bWVudFRhYnMsIFwiQkFOS19UUkFOU0ZFUlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2wuc2hvdyhwbmxQYXltZW50VGFicywgXCJWTlBBWV9RUlwiKTtcbiAgICAgICAgICAgICAgICAvLyBU4bqhbyBRUiBjb2RlIGtoaSBjaOG7jW4gdGFiIFZOUGF5XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVWbnBheVFSQ29kZShsYmxRUkNvZGUsIHZlVGF1SGllblRhaS5nZXRNYVZlKCksIHZlVGF1SGllblRhaS5nZXRHaWFWZSgpLCBsYmxQYXltZW50U3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcG5sVHJhbnNmZXJJbmZvLnNldEJvcmRlcihCb3JkZXJGYWN0b3J5LmNyZWF0ZUVtcHR5Qm9yZGVyKDAsIDAsIDEwLCAwKSk7XG4gICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5hZGQocG5sVHJhbnNmZXJJbmZvLCBCb3JkZXJMYXlvdXQuTk9SVEgpO1xuICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuYWRkKHBubFBheW1lbnRUYWJzLCBCb3JkZXJMYXlvdXQuQ0VOVEVSKTtcblxuICAgICAgICAvLyBOw7p0IGzDoG0gbeG7m2kgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhblxuICAgICAgICBidG5SZWZyZXNoU3RhdHVzLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgY2hlY2tWbnBheVBheW1lbnRTdGF0dXModmVUYXVIaWVuVGFpLmdldE1hVmUoKSwgbGJsUGF5bWVudFN0YXR1cywgZGlhbG9nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSGnhu4NuIHRo4buLIHBhbmVsIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhbiBiYW4gxJHhuqd1ICht4bq3YyDEkeG7i25oIGzDoCB0aeG7gW4gbeG6t3QpXG4gICAgICAgIHBubFBheW1lbnQuYWRkKHBubENhc2hQYXltZW50KTtcbiAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICBwbmxQYXltZW50LmFkZChwbmxUcmFuc2ZlclBheW1lbnQpO1xuXG4gICAgICAgIC8vIFRow6ptIGxpc3RlbmVyIGNobyByYWRpbyBidXR0b24gxJHhu4MgY2h1eeG7g24gxJHhu5VpIGdp4buvYSBjw6FjIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhblxuICAgICAgICByYWRDYXNoLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgcG5sQ2FzaFBheW1lbnQuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIGRpYWxvZy5yZXZhbGlkYXRlKCk7XG4gICAgICAgICAgICBkaWFsb2cucmVwYWludCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICByYWRUcmFuc2Zlci5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgIHBubENhc2hQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICBkaWFsb2cucmV2YWxpZGF0ZSgpO1xuICAgICAgICAgICAgZGlhbG9nLnJlcGFpbnQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRkIGRvY3VtZW50IGxpc3RlbmVyIGZvciBhdXRvbWF0aWMgY2hhbmdlIGNhbGN1bGF0aW9uXG4gICAgICAgIHR4dEN1c3RvbWVyUGF5bWVudC5nZXREb2N1bWVudCgpLmFkZERvY3VtZW50TGlzdGVuZXIobmV3IERvY3VtZW50TGlzdGVuZXIoKSB7XG4gICAgICAgICAgICBwcml2YXRlIHZvaWQgdXBkYXRlQ2hhbmdlKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBpbnB1dCA9IHR4dEN1c3RvbWVyUGF5bWVudC5nZXRUZXh0KCkucmVwbGFjZUFsbChcIlteXFxcXGRdXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGN1c3RvbWVyUGF5bWVudCA9IERvdWJsZS5wYXJzZURvdWJsZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgY2hhbmdlID0gY3VzdG9tZXJQYXltZW50IC0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYmxDaGFuZ2Uuc2V0VGV4dChjdXJyZW5jeUZvcm1hdHRlci5mb3JtYXQoTWF0aC5tYXgoMCwgY2hhbmdlKSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGJsQ2hhbmdlLnNldFRleHQoXCIwIFZOxJBcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgICAgICBsYmxDaGFuZ2Uuc2V0VGV4dChcIjAgVk7EkFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4uLi5cblxuICAgICAgICBidG5UaGFuaFRvYW4uYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChyYWRDYXNoLmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBY4butIGzDvSB0aGFuaCB0b8OhbiB0aeG7gW4gbeG6t3RcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGlucHV0ID0gdHh0Q3VzdG9tZXJQYXltZW50LmdldFRleHQoKS5yZXBsYWNlQWxsKFwiW15cXFxcZF1cIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWdWkgbMOybmcgbmjhuq1wIHPhu5EgdGnhu4FuIGtow6FjaCDEkcawYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkb3VibGUgY3VzdG9tZXJQYXltZW50ID0gRG91YmxlLnBhcnNlRG91YmxlKGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1c3RvbWVyUGF5bWVudCA8IHZlVGF1SGllblRhaS5nZXRHaWFWZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiU+G7kSB0aeG7gW4ga2jDoWNoIMSRxrBhIGtow7RuZyDEkeG7p1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoeHVMeVRoYW5oVG9hbihcIlRJRU5fTUFUXCIsIFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgY2hhbmdlID0gY3VzdG9tZXJQYXltZW50IC0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93UGF5bWVudFN1Y2Nlc3NEaWFsb2coY2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbi4uLlxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBWTlBheSBRUlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gWMOhYyB0aOG7sWMgbOG6oWkgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBt4buZdCBs4bqnbiBu4buvYVxuICAgICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbiBwYXltZW50U3VjY2VzcyA9IGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKHZlVGF1SGllblRhaS5nZXRNYVZlKCksIGxibFBheW1lbnRTdGF0dXMsIG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF5bWVudFN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Vm5wYXlTdWNjZXNzRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0FmdGVyU3VjY2Vzc2Z1bFBheW1lbnQoZGlhbG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDaMawYSBuaOG6rW4gxJHGsOG7o2MgdGjDtG5nIHRpbiB0aGFuaCB0b8Ohbi4gVnVpIGzDsm5nIHRoYW5oIHRvw6FuIGhv4bq3YyBraeG7g20gdHJhIGzhuqFpLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDaMawYSB0aGFuaCB0b8OhblwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGV4KSB7XG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJT4buRIHRp4buBbiBraMO0bmcgaOG7o3AgbOG7h1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgIGV4LnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRoYW5oIHRvw6FuOiBcIiArIGV4LmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuLi4uXG5cbiAgICAvLyBQaMawxqFuZyB0aOG7qWMga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHRoYW5oIHRvw6FuIFZOUGF5XG4gICAgcHJpdmF0ZSBib29sZWFuIGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKFN0cmluZyBtYVZlLCBKTGFiZWwgbGJsU3RhdHVzLCBKRGlhbG9nIHBhcmVudERpYWxvZykge1xuICAgICAgICAvLyBU4bqhbyBTd2luZ1dvcmtlciDEkeG7gyBraMO0bmcgbMOgbSDEkcahIGdpYW8gZGnhu4duXG4gICAgICAgIFN3aW5nV29ya2VyPEJvb2xlYW4sIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgQm9vbGVhbiBkb0luQmFja2dyb3VuZCgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcm9uZyBtw7RpIHRyxrDhu51uZyB0aOG7sWMgdOG6vywgYuG6oW4gc+G6vSBn4buNaSBBUEkgVk5QYXkgxJHhu4Mga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIGdpYW8gZOG7i2NoXG4gICAgICAgICAgICAgICAgICAgIC8vIOG7niDEkcOieSBjaMO6bmcgdGEgc+G6vSBtw7QgcGjhu49uZyB2aeG7h2Mga2nhu4NtIHRyYSwgdHLhuqMgduG7gSBuZ+G6q3Ugbmhpw6puIMSR4buDIGRlbW9cbiAgICAgICAgICAgICAgICAgICAgLy8gVHJvbmcgdGjhu7FjIHThur8sIHPhur0ga2nhu4NtIHRyYSBk4buxYSB0csOqbiBtw6MgZ2lhbyBk4buLY2ggxJHDoyBsxrB1XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTcO0IHBo4buPbmcgZ+G7jWkgQVBJIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSAoNTAlIGPGoSBo4buZaSB0aMOgbmggY8O0bmcpXG4gICAgICAgICAgICAgICAgICAgIFRocmVhZC5zbGVlcCgxNTAwKTsgLy8gTcO0IHBo4buPbmcgdGjhu51pIGdpYW4gZ+G7jWkgQVBJXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZG9tKCkubmV4dEJvb2xlYW4oKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICBwcml2YXRlIHZvaWQgZ2VuZXJhdGVWbnBheVFSQ29kZShKTGFiZWwgbGJsUVJDb2RlLCBTdHJpbmcgbWFWZSwgZG91YmxlIGFtb3VudCwgSkxhYmVsIGxibFN0YXR1cykge1xuICAgICAgICAvLyBU4bqhbyBTd2luZ1dvcmtlciDEkeG7gyBraMO0bmcgbMOgbSDEkcahIGdpYW8gZGnhu4duXG4gICAgICAgIFN3aW5nV29ya2VyPEltYWdlSWNvbiwgVm9pZD4gd29ya2VyID0gbmV3IFN3aW5nV29ya2VyPD4oKSB7XG4gICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICAgICAgICAgIHByb3RlY3RlZCBJbWFnZUljb24gZG9JbkJhY2tncm91bmQoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVOG6oW8gdGhhbSBz4buRIGNobyBBUEkgVk5QYXlcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9UeG5SZWYgPSBtYVZlICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCk7IC8vIE3DoyB0aGFtIGNoaeG6v3UgZ2lhbyBk4buLY2hcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9BbW91bnQgPSBTdHJpbmcudmFsdWVPZigobG9uZykoYW1vdW50ICogMTAwKSk7IC8vIFPhu5EgdGnhu4FuICogMTAwICjEkcahbiB24buLIHh1KVxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgdm5wX09yZGVySW5mbyA9IFwiVGhhbmggdG9hbiBob2EgZG9uIHZlIHRhdSBcIiArIG1hVmU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVVJMIEFQSSB04bqhbyBtw6MgUVIgY+G7p2EgVk5QYXkgKMSRw6J5IGzDoCBVUkwgZ2nhuqMgxJHhu4tuaCwgYuG6oW4gY+G6p24gdGhheSB0aOG6vyBi4bqxbmcgVVJMIHRo4buxYylcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGFwaVVybCA9IFwiaHR0cHM6Ly9zYW5kYm94LnZucGF5bWVudC52bi9wYXltZW50djIvY3JlYXRlX3FyX2NvZGUuaHRtbFwiO1xuLi4uXG5cbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGRpYWxvZy5kaXNwb3NlKCk7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoU1VDQ0VTU19URVhULCBmYWxzZSk7XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBs4bqhaSB0cuG6oW5nIHRow6FpIHRyw6puIGdpYW8gZGnhu4duXG4gICAgICAgICAgICBsYmxUcmFuZ1RoYWkuc2V0VGV4dCh2ZVRhdUhpZW5UYWkuZ2V0VHJhbmdUaGFpKCkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBzZXRUcmFuZ1RoYWlDb2xvcihsYmxUcmFuZ1RoYWksIHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKSk7XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBs4bqhaSBi4bqjbmcgbOG7i2NoIHPhu61cbiAgICAgICAgICAgIERlZmF1bHRUYWJsZU1vZGVsIG1vZGVsID0gKERlZmF1bHRUYWJsZU1vZGVsKSB0YmxMaWNoU3UuZ2V0TW9kZWwoKTtcbiAgICAgICAgICAgIGludCByb3dDb3VudCA9IG1vZGVsLmdldFJvd0NvdW50KCk7XG4gICAgICAgICAgICBpZiAocm93Q291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IGTDsm5nIGN14buRaSBjw7luZyAoduG7q2EgdGjDqm0pXG4gICAgICAgICAgICAgICAgbW9kZWwuc2V0VmFsdWVBdChUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOLCByb3dDb3VudCAtIDEsIDMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYW1Nb2koKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgXCJLaMO0bmcgdGjhu4MgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICB9XG4uLi5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVJjcUVWNUI5VERBNFdUQWlqcUJFOHQifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyIsImZvbGRlclJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiJMZXQgbWUgZ2V0IG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGV4aXN0aW5nIGltcGxlbWVudGF0aW9uIHRvIHVuZGVyc3RhbmQgaG93IHRvIHVwZGF0ZSBpdDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI5NWU0ZmU4YS0zNmU5LTQ2NDQtYmU3ZS0wMTBiMDk1MWJkMjYiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDExMWM4QkpLZVVIaHVFanlvZUdjZk1qIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmFcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiICAgIHByaXZhdGUgdm9pZCBkb2lWZSgpIHtcXG4gICAgICAgIGlmICh2ZVRhdUhpZW5UYWkgPT0gbnVsbCkgcmV0dXJuO1xcblxcbiAgICAgICAgLy8gS2lcXHUxZWMzbSB0cmEgZFxcdTFlZWYgbGlcXHUxZWM3dSBcXHUwMTExXFx1MWVhN3UgdlxcdTAwZTBvXFxuICAgICAgICBTdHJpbmcgdGVuS2hhY2hIYW5nID0gdHh0VGVuS2hhY2hIYW5nLmdldFRleHQoKS50cmltKCk7XFxuICAgICAgICBpZiAodGVuS2hhY2hIYW5nLmlzRW1wdHkoKSkge1xcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsIFxcXCJWdWkgbFxcdTAwZjJuZyBuaFxcdTFlYWRwIHRcXHUwMGVhbiBraFxcdTAwZTFjaCBoXFx1MDBlMG5nIVxcXCIsIFxcXCJUaFxcdTAwZjRuZyBiXFx1MDBlMW9cXFwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xcbiAgICAgICAgICAgIHR4dFRlbktoYWNoSGFuZy5yZXF1ZXN0Rm9jdXMoKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICBTdHJpbmcgZ2lheVRvID0gdHh0R2lheVRvLmdldFRleHQoKS50cmltKCk7XFxuICAgICAgICBpZiAoZ2lheVRvLmlzRW1wdHkoKSkge1xcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsIFxcXCJWdWkgbFxcdTAwZjJuZyBuaFxcdTFlYWRwIGdpXFx1MWVhNXkgdFxcdTFlZGQhXFxcIiwgXFxcIlRoXFx1MDBmNG5nIGJcXHUwMGUxb1xcXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XFxuICAgICAgICAgICAgdHh0R2lheVRvLnJlcXVlc3RGb2N1cygpO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIFN0cmluZyBuZ2F5RGlTdHIgPSB0eHROZ2F5RGkuZ2V0VGV4dCgpLnRyaW0oKTtcXG4gICAgICAgIExvY2FsRGF0ZSBuZ2F5RGk7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIG5nYXlEaSA9IExvY2FsRGF0ZS5wYXJzZShuZ2F5RGlTdHIsIGZvcm1hdHRlcik7XFxuICAgICAgICB9IGNhdGNoIChEYXRlVGltZVBhcnNlRXhjZXB0aW9uIGUpIHtcXG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIk5nXFx1MDBlMHkgXFx1MDExMWkga2hcXHUwMGY0bmcgaFxcdTFlZTNwIGxcXHUxZWM3LiBWdWkgbFxcdTAwZjJuZyBuaFxcdTFlYWRwIHRoZW8gXFx1MDExMVxcdTFlY2JuaCBkXFx1MWVhMW5nIGRkL01NL3l5eXkhXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJMXFx1MWVkN2lcXFwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcXG4gICAgICAgICAgICB0eHROZ2F5RGkucmVxdWVzdEZvY3VzKCk7XFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy8gS2lcXHUxZWMzbSB0cmEgeGVtIFxcdTAxMTFcXHUwMGUzIGNoXFx1MWVjZG4gbFxcdTFlY2JjaCB0clxcdTAwZWNuaCB2XFx1MDBlMCBjaFxcdTFlZDcgbmdcXHUxZWQzaSBjaFxcdTAxYjBhXFxuICAgICAgICBpZiAobGljaFRyaW5oRGFDaG9uID09IG51bGwpIHtcXG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIlZ1aSBsXFx1MDBmMm5nIGNoXFx1MWVjZG4gbFxcdTFlY2JjaCB0clxcdTAwZWNuaCB0XFx1MDBlMHUhXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJUaFxcdTAwZjRuZyBiXFx1MDBlMW9cXFwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChjaG9OZ29pRGFDaG9uID09IG51bGwpIHtcXG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIlZ1aSBsXFx1MDBmMm5nIGNoXFx1MWVjZG4gY2hcXHUxZWQ3IG5nXFx1MWVkM2khXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJUaFxcdTAwZjRuZyBiXFx1MDBlMW9cXFwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKExPQURJTkdfVEVYVCwgdHJ1ZSk7XFxuXFxuICAgICAgICAgICAgLy8gTFxcdTAxYjB1IHRyXFx1MWVlZiB0clxcdTFlYTFuZyB0aFxcdTAwZTFpIGNcXHUwMTY5IFxcdTAxMTFcXHUxZWMzIGhpXFx1MWVjM24gdGhcXHUxZWNiIHRyb25nIGxcXHUxZWNiY2ggc1xcdTFlZWRcXG4gICAgICAgICAgICBmaW5hbCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWlDdSA9IHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKTtcXG5cXG4gICAgICAgICAgICAvLyBDXFx1MWVhZHAgbmhcXHUxZWFkdCB0aFxcdTAwZjRuZyB0aW4gdlxcdTAwZTlcXG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0VGVuS2hhY2hIYW5nKHRlbktoYWNoSGFuZyk7XFxuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldEdpYXlUbyhnaWF5VG8pO1xcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXROZ2F5RGkobmdheURpKTtcXG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0RG9pVHVvbmcoT2JqZWN0cy5yZXF1aXJlTm9uTnVsbChjYm9Eb2lUdW9uZy5nZXRTZWxlY3RlZEl0ZW0oKSkudG9TdHJpbmcoKSk7XFxuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldExpY2hUcmluaFRhdShsaWNoVHJpbmhEYUNob24pO1xcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRDaG9OZ29pKGNob05nb2lEYUNob24pO1xcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRLaHV5ZW5NYWkoa2h1eWVuTWFpRGFDaG9uKTtcXG5cXG4gICAgICAgICAgICAvLyBUXFx1MDBlZG5oIGxcXHUxZWExaSBnaVxcdTAwZTEgdlxcdTAwZTlcXG4gICAgICAgICAgICBkb3VibGUgZ2lhVmUgPSB0aW5oR2lhVmUoY2hvTmdvaURhQ2hvbiwga2h1eWVuTWFpRGFDaG9uLCBPYmplY3RzLnJlcXVpcmVOb25OdWxsKGNib0RvaVR1b25nLmdldFNlbGVjdGVkSXRlbSgpKS50b1N0cmluZygpKTtcXG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0R2lhVmUoZ2lhVmUpO1xcblxcbiAgICAgICAgICAgIC8vIFxcdTAxMTBcXHUxZWQ1aSB0clxcdTFlYTFuZyB0aFxcdTAwZTFpIHZcXHUwMGU5IHRoXFx1MDBlMG5oIENIT19YQUNfTkhBTlxcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKTtcXG5cXG4gICAgICAgICAgICAvLyBHXFx1MWVjZGkgQVBJIFxcdTAxMTFcXHUxZWMzIGNcXHUxZWFkcCBuaFxcdTFlYWR0IHZcXHUwMGU5XFxuICAgICAgICAgICAgYm9vbGVhbiBzdWNjZXNzID0gZG9pVmVEQU8uZG9pVmUodmVUYXVIaWVuVGFpKTtcXG5cXG4gICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xcbiAgICAgICAgICAgICAgICB1cGRhdGVMaWNoU3VBbmRTaG93U3VjY2Vzcyh0cmFuZ1RoYWlDdSk7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwiXFx1MDExMFxcdTFlZDVpIHZcXHUwMGU5IGtoXFx1MDBmNG5nIHRoXFx1MDBlMG5oIGNcXHUwMGY0bmchXFxcIiwgXFxcIkxcXHUxZWQ3aVxcXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XFxuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcXG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIkxcXHUxZWQ3aSBraGkgdGhcXHUxZWYxYyBoaVxcdTFlYzduIFxcdTAxMTFcXHUxZWQ1aSB2XFx1MDBlOTogXFxcIiArIGUuZ2V0TWVzc2FnZSgpLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIkxcXHUxZWQ3aVxcXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XFxuICAgICAgICB9XFxuICAgIH1cIiwgXCJuZXdfc3RyXCI6IFwiICAgIHByaXZhdGUgdm9pZCBkb2lWZSgpIHtcXG4gICAgICAgIGlmICh2ZVRhdUhpZW5UYWkgPT0gbnVsbCkgcmV0dXJuO1xcblxcbiAgICAgICAgLy8gS2lcXHUxZWMzbSB0cmEgZFxcdTFlZWYgbGlcXHUxZWM3dSBcXHUwMTExXFx1MWVhN3UgdlxcdTAwZTBvXFxuICAgICAgICBTdHJpbmcgdGVuS2hhY2hIYW5nID0gdHh0VGVuS2hhY2hIYW5nLmdldFRleHQoKS50cmltKCk7XFxuICAgICAgICBpZiAodGVuS2hhY2hIYW5nLmlzRW1wdHkoKSkge1xcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsIFxcXCJWdWkgbFxcdTAwZjJuZyBuaFxcdTFlYWRwIHRcXHUwMGVhbiBraFxcdTAwZTFjaCBoXFx1MDBlMG5nIVxcXCIsIFxcXCJUaFxcdTAwZjRuZyBiXFx1MDBlMW9cXFwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xcbiAgICAgICAgICAgIHR4dFRlbktoYWNoSGFuZy5yZXF1ZXN0Rm9jdXMoKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICBTdHJpbmcgZ2lheVRvID0gdHh0R2lheVRvLmdldFRleHQoKS50cmltKCk7XFxuICAgICAgICBpZiAoZ2lheVRvLmlzRW1wdHkoKSkge1xcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsIFxcXCJWdWkgbFxcdTAwZjJuZyBuaFxcdTFlYWRwIGdpXFx1MWVhNXkgdFxcdTFlZGQhXFxcIiwgXFxcIlRoXFx1MDBmNG5nIGJcXHUwMGUxb1xcXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XFxuICAgICAgICAgICAgdHh0R2lheVRvLnJlcXVlc3RGb2N1cygpO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIFN0cmluZyBuZ2F5RGlTdHIgPSB0eHROZ2F5RGkuZ2V0VGV4dCgpLnRyaW0oKTtcXG4gICAgICAgIExvY2FsRGF0ZSBuZ2F5RGk7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIG5nYXlEaSA9IExvY2FsRGF0ZS5wYXJzZShuZ2F5RGlTdHIsIGZvcm1hdHRlcik7XFxuICAgICAgICB9IGNhdGNoIChEYXRlVGltZVBhcnNlRXhjZXB0aW9uIGUpIHtcXG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIk5nXFx1MDBlMHkgXFx1MDExMWkga2hcXHUwMGY0bmcgaFxcdTFlZTNwIGxcXHUxZWM3LiBWdWkgbFxcdTAwZjJuZyBuaFxcdTFlYWRwIHRoZW8gXFx1MDExMVxcdTFlY2JuaCBkXFx1MWVhMW5nIGRkL01NL3l5eXkhXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJMXFx1MWVkN2lcXFwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcXG4gICAgICAgICAgICB0eHROZ2F5RGkucmVxdWVzdEZvY3VzKCk7XFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy8gS2lcXHUxZWMzbSB0cmEgeGVtIFxcdTAxMTFcXHUwMGUzIGNoXFx1MWVjZG4gbFxcdTFlY2JjaCB0clxcdTAwZWNuaCB2XFx1MDBlMCBjaFxcdTFlZDcgbmdcXHUxZWQzaSBjaFxcdTAxYjBhXFxuICAgICAgICBpZiAobGljaFRyaW5oRGFDaG9uID09IG51bGwpIHtcXG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIlZ1aSBsXFx1MDBmMm5nIGNoXFx1MWVjZG4gbFxcdTFlY2JjaCB0clxcdTAwZWNuaCB0XFx1MDBlMHUhXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJUaFxcdTAwZjRuZyBiXFx1MDBlMW9cXFwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChjaG9OZ29pRGFDaG9uID09IG51bGwpIHtcXG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIlZ1aSBsXFx1MDBmMm5nIGNoXFx1MWVjZG4gY2hcXHUxZWQ3IG5nXFx1MWVkM2khXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJUaFxcdTAwZjRuZyBiXFx1MDBlMW9cXFwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKExPQURJTkdfVEVYVCwgdHJ1ZSk7XFxuXFxuICAgICAgICAgICAgLy8gTFxcdTAxYjB1IHRyXFx1MWVlZiB0clxcdTFlYTFuZyB0aFxcdTAwZTFpIGNcXHUwMTY5IFxcdTAxMTFcXHUxZWMzIGhpXFx1MWVjM24gdGhcXHUxZWNiIHRyb25nIGxcXHUxZWNiY2ggc1xcdTFlZWRcXG4gICAgICAgICAgICBmaW5hbCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWlDdSA9IHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKTtcXG4gICAgICAgICAgICBmaW5hbCBTdHJpbmcgbWFWZUN1ID0gdmVUYXVIaWVuVGFpLmdldE1hVmUoKTtcXG4gICAgICAgICAgICBmaW5hbCBkb3VibGUgZ2lhVmVDdSA9IHZlVGF1SGllblRhaS5nZXRHaWFWZSgpO1xcblxcbiAgICAgICAgICAgIC8vIFRcXHUxZWExbyB2XFx1MDBlOSBtXFx1MWVkYmkgdlxcdTFlZGJpIHRoXFx1MDBmNG5nIHRpbiBcXHUwMTExXFx1MDBlMyBjXFx1MWVhZHAgbmhcXHUxZWFkdFxcbiAgICAgICAgICAgIFZlVGF1IHZlTW9pID0gbmV3IFZlVGF1KCk7XFxuICAgICAgICAgICAgLy8gVFxcdTFlYTFvIG1cXHUwMGUzIHZcXHUwMGU5IG1cXHUxZWRiaVxcbiAgICAgICAgICAgIFN0cmluZyBtYVZlTW9pID0gZ2VuZXJhdGVNYVZlKCk7XFxuICAgICAgICAgICAgdmVNb2kuc2V0TWFWZShtYVZlTW9pKTtcXG4gICAgICAgICAgICB2ZU1vaS5zZXRUZW5LaGFjaEhhbmcodGVuS2hhY2hIYW5nKTtcXG4gICAgICAgICAgICB2ZU1vaS5zZXRHaWF5VG8oZ2lheVRvKTtcXG4gICAgICAgICAgICB2ZU1vaS5zZXROZ2F5RGkobmdheURpKTtcXG4gICAgICAgICAgICB2ZU1vaS5zZXREb2lUdW9uZyhPYmplY3RzLnJlcXVpcmVOb25OdWxsKGNib0RvaVR1b25nLmdldFNlbGVjdGVkSXRlbSgpKS50b1N0cmluZygpKTtcXG4gICAgICAgICAgICB2ZU1vaS5zZXRMaWNoVHJpbmhUYXUobGljaFRyaW5oRGFDaG9uKTtcXG4gICAgICAgICAgICB2ZU1vaS5zZXRDaG9OZ29pKGNob05nb2lEYUNob24pO1xcbiAgICAgICAgICAgIHZlTW9pLnNldEtodXllbk1haShraHV5ZW5NYWlEYUNob24pO1xcblxcbiAgICAgICAgICAgIC8vIFRcXHUwMGVkbmggZ2lcXHUwMGUxIHZcXHUwMGU5IG1cXHUxZWRiaVxcbiAgICAgICAgICAgIGRvdWJsZSBnaWFWZU1vaSA9IHRpbmhHaWFWZShjaG9OZ29pRGFDaG9uLCBraHV5ZW5NYWlEYUNob24sIE9iamVjdHMucmVxdWlyZU5vbk51bGwoY2JvRG9pVHVvbmcuZ2V0U2VsZWN0ZWRJdGVtKCkpLnRvU3RyaW5nKCkpO1xcbiAgICAgICAgICAgIHZlTW9pLnNldEdpYVZlKGdpYVZlTW9pKTtcXG5cXG4gICAgICAgICAgICAvLyBcXHUwMTEwXFx1MWViN3QgdHJcXHUxZWExbmcgdGhcXHUwMGUxaSB2XFx1MDBlOSBtXFx1MWVkYmkgdGhcXHUwMGUwbmggQ0hPX1hBQ19OSEFOXFxuICAgICAgICAgICAgdmVNb2kuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTik7XFxuXFxuICAgICAgICAgICAgLy8gVFxcdTAwZWRuaCBjaFxcdTAwZWFuaCBsXFx1MWVjN2NoIGdpXFx1MDBlMSB2XFx1MDBlOVxcbiAgICAgICAgICAgIGRvdWJsZSBjaGVuaExlY2hHaWFWZSA9IGdpYVZlTW9pIC0gZ2lhVmVDdTtcXG5cXG4gICAgICAgICAgICAvLyBIaVxcdTFlYzNuIHRoXFx1MWVjYiBkaWFsb2cgeFxcdTAwZTFjIG5oXFx1MWVhZG4gXFx1MDExMVxcdTFlZDVpIHZcXHUwMGU5IHZcXHUxZWRiaSB0aFxcdTAwZjRuZyB0aW4gY2hcXHUwMGVhbmggbFxcdTFlYzdjaCBnaVxcdTAwZTFcXG4gICAgICAgICAgICBpbnQgeGFjTmhhbiA9IEpPcHRpb25QYW5lLnNob3dDb25maXJtRGlhbG9nKFxcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJUaFxcdTAwZjRuZyB0aW4gXFx1MDExMVxcdTFlZDVpIHZcXHUwMGU5OlxcXFxuXFxcIiArXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCItIFZcXHUwMGU5IGNcXHUwMTY5OiBcXFwiICsgbWFWZUN1ICsgXFxcIiAtIEdpXFx1MDBlMTogXFxcIiArIGN1cnJlbmN5Rm9ybWF0dGVyLmZvcm1hdChnaWFWZUN1KSArIFxcXCJcXFxcblxcXCIgK1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiLSBWXFx1MDBlOSBtXFx1MWVkYmk6IFxcXCIgKyBtYVZlTW9pICsgXFxcIiAtIEdpXFx1MDBlMTogXFxcIiArIGN1cnJlbmN5Rm9ybWF0dGVyLmZvcm1hdChnaWFWZU1vaSkgKyBcXFwiXFxcXG5cXFwiICtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIi0gQ2hcXHUwMGVhbmggbFxcdTFlYzdjaDogXFxcIiArIChjaGVuaExlY2hHaWFWZSA+PSAwID8gXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiQ1xcdTFlYTduIHRoYW5oIHRvXFx1MDBlMW4gdGhcXHUwMGVhbSBcXFwiICsgY3VycmVuY3lGb3JtYXR0ZXIuZm9ybWF0KGNoZW5oTGVjaEdpYVZlKSA6IFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIkhvXFx1MDBlMG4gdHJcXHUxZWEzIFxcXCIgKyBjdXJyZW5jeUZvcm1hdHRlci5mb3JtYXQoLWNoZW5oTGVjaEdpYVZlKSkgKyBcXFwiXFxcXG5cXFxcblxcXCIgK1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiQlxcdTFlYTFuIGNcXHUwMGYzIGNoXFx1MWVhZmMgY2hcXHUxZWFmbiBtdVxcdTFlZDFuIFxcdTAxMTFcXHUxZWQ1aSB2XFx1MDBlOSBraFxcdTAwZjRuZz9cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIlhcXHUwMGUxYyBuaFxcdTFlYWRuIFxcdTAxMTFcXHUxZWQ1aSB2XFx1MDBlOVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5ZRVNfTk9fT1BUSU9OLFxcbiAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuUVVFU1RJT05fTUVTU0FHRVxcbiAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgaWYgKHhhY05oYW4gIT0gSk9wdGlvblBhbmUuWUVTX09QVElPTikge1xcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoUkVBRFlfVEVYVCwgZmFsc2UpO1xcbiAgICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIC8vIFxcdTAxMTBcXHUxZWQ1aSB0clxcdTFlYTFuZyB0aFxcdTAwZTFpIHZcXHUwMGU5IGNcXHUwMTY5IHRoXFx1MDBlMG5oIERBX0RPSVxcbiAgICAgICAgICAgIGJvb2xlYW4gdXBkYXRlT2xkVGlja2V0ID0gZG9pVmVEQU8uY2FwTmhhdFRyYW5nVGhhaVZlKG1hVmVDdSwgVHJhbmdUaGFpVmVUYXUuREFfRE9JKTtcXG4gICAgICAgICAgICBpZiAoIXVwZGF0ZU9sZFRpY2tldCkge1xcbiAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJLaFxcdTAwZjRuZyB0aFxcdTFlYzMgY1xcdTFlYWRwIG5oXFx1MWVhZHQgdHJcXHUxZWExbmcgdGhcXHUwMGUxaSB2XFx1MDBlOSBjXFx1MDE2OSFcXFwiLCBcXFwiTFxcdTFlZDdpXFxcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XFxuICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XFxuICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgLy8gVFxcdTFlYTFvIHZcXHUwMGU5IG1cXHUxZWRiaVxcbiAgICAgICAgICAgIGJvb2xlYW4gY3JlYXRlTmV3VGlja2V0ID0gZG9pVmVEQU8uZGF0VmUodmVNb2ksIGNob05nb2lEYUNob24uZ2V0TWFDaG8oKSk7XFxuICAgICAgICAgICAgaWYgKCFjcmVhdGVOZXdUaWNrZXQpIHtcXG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwiS2hcXHUwMGY0bmcgdGhcXHUxZWMzIHRcXHUxZWExbyB2XFx1MDBlOSBtXFx1MWVkYmkhXFxcIiwgXFxcIkxcXHUxZWQ3aVxcXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xcbiAgICAgICAgICAgICAgICAvLyBLaFxcdTAwZjRpIHBoXFx1MWVlNWMgdHJcXHUxZWExbmcgdGhcXHUwMGUxaSB2XFx1MDBlOSBjXFx1MDE2OVxcbiAgICAgICAgICAgICAgICBkb2lWZURBTy5jYXBOaGF0VHJhbmdUaGFpVmUobWFWZUN1LCB0cmFuZ1RoYWlDdSk7XFxuICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XFxuICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgLy8gQ1xcdTFlYWRwIG5oXFx1MWVhZHQgdlxcdTAwZTkgaGlcXHUxZWM3biB0XFx1MWVhMWkgdGhcXHUwMGUwbmggdlxcdTAwZTkgbVxcdTFlZGJpIFxcdTAxMTFcXHUxZWMzIGhpXFx1MWVjM24gdGhcXHUxZWNiXFxuICAgICAgICAgICAgdmVUYXVIaWVuVGFpID0gdmVNb2k7XFxuXFxuICAgICAgICAgICAgLy8gSGlcXHUxZWMzbiB0aFxcdTFlY2IgZGlhbG9nIHRoYW5oIHRvXFx1MDBlMW4gblxcdTFlYmZ1IGNcXHUxZWE3biB0aGFuaCB0b1xcdTAwZTFuIHRoXFx1MDBlYW1cXG4gICAgICAgICAgICBpZiAoY2hlbmhMZWNoR2lhVmUgPiAwKSB7XFxuICAgICAgICAgICAgICAgIC8vIEhpXFx1MWVjM24gdGhcXHUxZWNiIGRpYWxvZyB0aGFuaCB0b1xcdTAwZTFuIHZcXHUxZWRiaSBzXFx1MWVkMSB0aVxcdTFlYzFuIGNoXFx1MDBlYW5oIGxcXHUxZWM3Y2hcXG4gICAgICAgICAgICAgICAgc2hvd1BheW1lbnREaWFsb2dGb3JFeGNoYW5nZShjaGVuaExlY2hHaWFWZSwgbWFWZUN1LCBtYVZlTW9pKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAvLyBOXFx1MWViZnUga2hcXHUwMGY0bmcgY1xcdTFlYTduIHRoYW5oIHRvXFx1MDBlMW4gdGhcXHUwMGVhbSBob1xcdTFlYjdjIGNcXHUxZWE3biBob1xcdTAwZTBuIHRpXFx1MWVjMW5cXG4gICAgICAgICAgICAgICAgLy8gVFxcdTFlYTFvIGhcXHUwMGYzYSBcXHUwMTExXFx1MDFhMW4gY2hvIHZpXFx1MWVjN2MgXFx1MDExMVxcdTFlZDVpIHZcXHUwMGU5XFxuICAgICAgICAgICAgICAgIGJvb2xlYW4gaW52b2ljZUNyZWF0ZWQgPSB0YW9Ib2FEb25Eb2lWZShtYVZlQ3UsIG1hVmVNb2ksIGNoZW5oTGVjaEdpYVZlKTtcXG4gICAgICAgICAgICAgICAgaWYgKCFpbnZvaWNlQ3JlYXRlZCkge1xcbiAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIktoXFx1MDBmNG5nIHRoXFx1MWVjMyB0XFx1MWVhMW8gaFxcdTAwZjNhIFxcdTAxMTFcXHUwMWExbiBcXHUwMTExXFx1MWVkNWkgdlxcdTAwZTkhXFxcIiwgXFxcIkxcXHUxZWQ3aVxcXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3RhdHVzKEVSUk9SX1RFWFQsIGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAvLyBIaVxcdTFlYzNuIHRoXFx1MWVjYiB0aFxcdTAwZjRuZyBiXFx1MDBlMW8gdGhcXHUwMGUwbmggY1xcdTAwZjRuZ1xcbiAgICAgICAgICAgICAgICBpZiAoY2hlbmhMZWNoR2lhVmUgPCAwKSB7XFxuICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiXFx1MDExMFxcdTFlZDVpIHZcXHUwMGU5IHRoXFx1MDBlMG5oIGNcXHUwMGY0bmchIFNcXHUxZWQxIHRpXFx1MWVjMW4gaG9cXHUwMGUwbiB0clxcdTFlYTM6IFxcXCIgKyBjdXJyZW5jeUZvcm1hdHRlci5mb3JtYXQoLWNoZW5oTGVjaEdpYVZlKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlRoXFx1MDBlMG5oIGNcXHUwMGY0bmdcXFwiLCBKT3B0aW9uUGFuZS5JTkZPUk1BVElPTl9NRVNTQUdFKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJcXHUwMTEwXFx1MWVkNWkgdlxcdTAwZTkgdGhcXHUwMGUwbmggY1xcdTAwZjRuZyFcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiVGhcXHUwMGUwbmggY1xcdTAwZjRuZ1xcXCIsIEpPcHRpb25QYW5lLklORk9STUFUSU9OX01FU1NBR0UpO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIC8vIENcXHUxZWFkcCBuaFxcdTFlYWR0IGxcXHUxZWNiY2ggc1xcdTFlZWQgdlxcdTAwZTAgbFxcdTAwZTBtIG1cXHUxZWRiaSBnaWFvIGRpXFx1MWVjN25cXG4gICAgICAgICAgICAgICAgdXBkYXRlTGljaFN1RG9pVmUobWFWZUN1LCBtYVZlTW9pLCB0cmFuZ1RoYWlDdSwgdmVNb2kuZ2V0VHJhbmdUaGFpKCkpO1xcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoU1VDQ0VTU19URVhULCBmYWxzZSk7XFxuICAgICAgICAgICAgICAgIGxhbU1vaSgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XFxuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcXG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIkxcXHUxZWQ3aSBraGkgdGhcXHUxZWYxYyBoaVxcdTFlYzduIFxcdTAxMTFcXHUxZWQ1aSB2XFx1MDBlOTogXFxcIiArIGUuZ2V0TWVzc2FnZSgpLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIkxcXHUxZWQ3aVxcXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XFxuICAgICAgICB9XFxuICAgIH1cIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDEyNDYsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTMxM31dfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IEkgaGF2ZSBhIGdvb2QgdW5kZXJzdGFuZGluZyBvZiB0aGUgY29kZWJhc2UgYW5kIHdoYXQgbmVlZHMgdG8gYmUgaW1wbGVtZW50ZWQuIExldCBtZSB1cGRhdGUgdGhlIERvaVZlUGFuZWwuamF2YSBmaWxlIHRvIGltcGxlbWVudCB0aGUgdGlja2V0IGV4Y2hhbmdlIGZ1bmN0aW9uYWxpdHkuXG5cbkZpcnN0LCBJJ2xsIHVwZGF0ZSB0aGUgYGRvaVZlKClgIG1ldGhvZCB0byBoYW5kbGUgdGhlIHRpY2tldCBleGNoYW5nZSBwcm9jZXNzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhXG4uLi5cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSA9IChUcmFuZ1RoYWlWZVRhdSkgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJhbmdUaGFpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERBX1RIQU5IX1RPQU46XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChzdWNjZXNzQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24oY3JlYXRlUGF5bWVudEljb24oMTQsIDE0LCBzdWNjZXNzQ29sb3IpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ0hPX1hBQ19OSEFOOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQod2FybmluZ0NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZVBlbmRpbmdJY29uKDE0LCAxNCwgd2FybmluZ0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoZGFya1RleHRDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEhvcml6b250YWxBbGlnbm1lbnQoSkxhYmVsLkNFTlRFUik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbi4uLlxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgcHJvZ3Jlc3MgYmFyXG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3NCYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnNldFZpc2libGUoaXNMb2FkaW5nKTtcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zZXRJbmRldGVybWluYXRlKGlzTG9hZGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgdm9pZCB0aW1WZSgpIHtcbiAgICAgICAgU3RyaW5nIG1hVmUgPSB0eHRNYVZlLmdldFRleHQoKS50cmltKCk7XG4gICAgICAgIGlmIChtYVZlLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcywgXCJWdWkgbMOybmcgbmjhuq1wIG3DoyB2w6khXCIsIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoTE9BRElOR19URVhULCB0cnVlKTtcblxuICAgICAgICAgICAgU3dpbmdXb3JrZXI8VmVUYXUsIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBWZVRhdSBkb0luQmFja2dyb3VuZCgpIHRocm93cyBFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9pVmVEQU8uZ2V0VmVUYXUobWFWZSk7XG4gICAgICAgICAgICAgICAgfVxuLi4uXG5cbiAgICBwcml2YXRlIHZvaWQgc2V0VHJhbmdUaGFpQ29sb3IoSkxhYmVsIGxhYmVsLCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHtcbiAgICAgICAgc3dpdGNoICh0cmFuZ1RoYWkpIHtcbiAgICAgICAgICAgIGNhc2UgQ0hPX1hBQ19OSEFOOlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQod2FybmluZ0NvbG9yKTsgLy8gQ2FtXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVQZW5kaW5nSWNvbigxNCwgMTQsIHdhcm5pbmdDb2xvcikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEQV9USEFOSF9UT0FOOlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoc3VjY2Vzc0NvbG9yKTsgLy8gWGFuaCBsw6FcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZUNoZWNrSWNvbigxNCwgMTQsIHN1Y2Nlc3NDb2xvcikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEQV9UUkE6XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChkYW5nZXJDb2xvcik7IC8vIMSQ4buPXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVDYW5jZWxJY29uKDE0LCAxNCwgZGFuZ2VyQ29sb3IpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgREFfRE9JOlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoZ3JheUNvbG9yKTsgLy8gWMOhbVxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24oY3JlYXRlRXhjaGFuZ2VJY29uKDE0LCAxNCwgZ3JheUNvbG9yKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoZGFya1RleHRDb2xvcik7XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoTE9BRElOR19URVhULCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gTMawdSB0cuG7ryB0cuG6oW5nIHRow6FpIGPFqSDEkeG7gyBoaeG7g24gdGjhu4sgdHJvbmcgbOG7i2NoIHPhu61cbiAgICAgICAgICAgIGZpbmFsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaUN1ID0gdmVUYXVIaWVuVGFpLmdldFRyYW5nVGhhaSgpO1xuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbiB2w6lcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRUZW5LaGFjaEhhbmcodGVuS2hhY2hIYW5nKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRHaWF5VG8oZ2lheVRvKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXROZ2F5RGkobmdheURpKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXREb2lUdW9uZyhPYmplY3RzLnJlcXVpcmVOb25OdWxsKGNib0RvaVR1b25nLmdldFNlbGVjdGVkSXRlbSgpKS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRMaWNoVHJpbmhUYXUobGljaFRyaW5oRGFDaG9uKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRDaG9OZ29pKGNob05nb2lEYUNob24pO1xuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldEtodXllbk1haShraHV5ZW5NYWlEYUNob24pO1xuXG4gICAgICAgICAgICAvLyBUw61uaCBs4bqhaSBnacOhIHbDqVxuICAgICAgICAgICAgZG91YmxlIGdpYVZlID0gdGluaEdpYVZlKGNob05nb2lEYUNob24sIGtodXllbk1haURhQ2hvbiwgT2JqZWN0cy5yZXF1aXJlTm9uTnVsbChjYm9Eb2lUdW9uZy5nZXRTZWxlY3RlZEl0ZW0oKSkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0R2lhVmUoZ2lhVmUpO1xuXG4gICAgICAgICAgICAvLyDEkOG7lWkgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIENIT19YQUNfTkhBTlxuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pO1xuXG4gICAgICAgICAgICAvLyBH4buNaSBBUEkgxJHhu4MgY+G6rXAgbmjhuq10IHbDqVxuICAgICAgICAgICAgYm9vbGVhbiBzdWNjZXNzID0gZG9pVmVEQU8uZG9pVmUodmVUYXVIaWVuVGFpKTtcblxuICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVMaWNoU3VBbmRTaG93U3VjY2Vzcyh0cmFuZ1RoYWlDdSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIsSQ4buVaSB2w6kga2jDtG5nIHRow6BuaCBjw7RuZyFcIiwgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gxJHhu5VpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4uLi5cblxuICAgICAgICBCdXR0b25Hcm91cCBwYXltZW50TWV0aG9kR3JvdXAgPSBuZXcgQnV0dG9uR3JvdXAoKTtcbiAgICAgICAgcGF5bWVudE1ldGhvZEdyb3VwLmFkZChyYWRDYXNoKTtcbiAgICAgICAgcGF5bWVudE1ldGhvZEdyb3VwLmFkZChyYWRUcmFuc2Zlcik7XG5cbiAgICAgICAgLy8gVGjDqm0gY8OhYyByYWRpbyBidXR0b24gdsOgbyBwYW5lbFxuICAgICAgICBwbmxQYXltZW50TWV0aG9kLmFkZChyYWRDYXNoKTtcbiAgICAgICAgcG5sUGF5bWVudE1ldGhvZC5hZGQocmFkVHJhbnNmZXIpO1xuICAgICAgICBwbmxQYXltZW50LmFkZChwbmxQYXltZW50TWV0aG9kKTtcblxuICAgICAgICAvLyBQYW5lbCBjaG8gdGhhbmggdG/DoW4gdGnhu4FuIG3hurd0XG4gICAgICAgIEpQYW5lbCBwbmxDYXNoUGF5bWVudCA9IG5ldyBKUGFuZWwobmV3IEdyaWRCYWdMYXlvdXQoKSk7XG4gICAgICAgIEdyaWRCYWdDb25zdHJhaW50cyBnYmMgPSBuZXcgR3JpZEJhZ0NvbnN0cmFpbnRzKCk7XG4gICAgICAgIGdiYy5pbnNldHMgPSBuZXcgSW5zZXRzKDUsIDUsIDUsIDUpO1xuICAgICAgICBnYmMuZmlsbCA9IEdyaWRCYWdDb25zdHJhaW50cy5IT1JJWk9OVEFMO1xuXG4gICAgICAgIC8vIFRvdGFsIGFtb3VudFxuICAgICAgICBnYmMuZ3JpZHggPSAwOyBnYmMuZ3JpZHkgPSAwO1xuICAgICAgICBwbmxDYXNoUGF5bWVudC5hZGQobmV3IEpMYWJlbChcIlThu5VuZyB0aeG7gW46XCIpLCBnYmMpO1xuLi4uXG5cbiAgICAgICAgLy8gUGjGsMahbmcgdGjhu6ljIHRoYW5oIHRvw6FuXG4gICAgICAgIGdiY1RyYW5zZmVyLmdyaWR4ID0gMDsgZ2JjVHJhbnNmZXIuZ3JpZHkgPSAxO1xuICAgICAgICBwbmxUcmFuc2ZlckluZm8uYWRkKG5ldyBKTGFiZWwoXCJDaOG7jW4gcGjGsMahbmcgdGjhu6ljOlwiKSwgZ2JjVHJhbnNmZXIpO1xuXG4gICAgICAgIGdiY1RyYW5zZmVyLmdyaWR4ID0gMTtcbiAgICAgICAgU3RyaW5nW10gcGF5bWVudE9wdGlvbnMgPSB7XCJDaHV54buDbiBraG/huqNuIG5nw6JuIGjDoG5nXCIsIFwiVk5QYXkgUVJcIn07XG4gICAgICAgIEpDb21ib0JveDxTdHJpbmc+IGNtYlBheW1lbnRUeXBlID0gbmV3IEpDb21ib0JveDw+KHBheW1lbnRPcHRpb25zKTtcbiAgICAgICAgcG5sVHJhbnNmZXJJbmZvLmFkZChjbWJQYXltZW50VHlwZSwgZ2JjVHJhbnNmZXIpO1xuXG4gICAgICAgIC8vIFRhYiBwYW5lbCBjaG8gY8OhYyBwaMawxqFuZyB0aOG7qWMgdGhhbmggdG/DoW5cbiAgICAgICAgSlBhbmVsIHBubFBheW1lbnRUYWJzID0gbmV3IEpQYW5lbChuZXcgQ2FyZExheW91dCgpKTtcblxuICAgICAgICAvLyBUYWIgMTogQ2h1eeG7g24ga2hv4bqjbiBuZ8OibiBow6BuZyB0cnV54buBbiB0aOG7kW5nXG4gICAgICAgIEpQYW5lbCBwbmxCYW5rVHJhbnNmZXIgPSBuZXcgSlBhbmVsKCk7XG4gICAgICAgIHBubEJhbmtUcmFuc2Zlci5zZXRMYXlvdXQobmV3IEJveExheW91dChwbmxCYW5rVHJhbnNmZXIsIEJveExheW91dC5ZX0FYSVMpKTtcbi4uLlxuXG4gICAgICAgIC8vIExpc3RlbmVyIGNobyBjb21ib2JveCDEkeG7gyBjaHV54buDbiB0YWJcbiAgICAgICAgY21iUGF5bWVudFR5cGUuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBDYXJkTGF5b3V0IGNsID0gKENhcmRMYXlvdXQpIHBubFBheW1lbnRUYWJzLmdldExheW91dCgpO1xuICAgICAgICAgICAgaW50IHNlbGVjdGVkSW5kZXggPSBjbWJQYXltZW50VHlwZS5nZXRTZWxlY3RlZEluZGV4KCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2wuc2hvdyhwbmxQYXltZW50VGFicywgXCJCQU5LX1RSQU5TRkVSXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbC5zaG93KHBubFBheW1lbnRUYWJzLCBcIlZOUEFZX1FSXCIpO1xuICAgICAgICAgICAgICAgIC8vIFThuqFvIFFSIGNvZGUga2hpIGNo4buNbiB0YWIgVk5QYXlcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZVZucGF5UVJDb2RlKGxibFFSQ29kZSwgdmVUYXVIaWVuVGFpLmdldE1hVmUoKSwgdmVUYXVIaWVuVGFpLmdldEdpYVZlKCksIGxibFBheW1lbnRTdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBwbmxUcmFuc2ZlckluZm8uc2V0Qm9yZGVyKEJvcmRlckZhY3RvcnkuY3JlYXRlRW1wdHlCb3JkZXIoMCwgMCwgMTAsIDApKTtcbiAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LmFkZChwbmxUcmFuc2ZlckluZm8sIEJvcmRlckxheW91dC5OT1JUSCk7XG4gICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5hZGQocG5sUGF5bWVudFRhYnMsIEJvcmRlckxheW91dC5DRU5URVIpO1xuXG4gICAgICAgIC8vIE7DunQgbMOgbSBt4bubaSB0cuG6oW5nIHRow6FpIHRoYW5oIHRvw6FuXG4gICAgICAgIGJ0blJlZnJlc2hTdGF0dXMuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBsYmxQYXltZW50U3RhdHVzLCBkaWFsb2cpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIaeG7g24gdGjhu4sgcGFuZWwgcGjGsMahbmcgdGjhu6ljIHRoYW5oIHRvw6FuIGJhbiDEkeG6p3UgKG3hurdjIMSR4buLbmggbMOgIHRp4buBbiBt4bq3dClcbiAgICAgICAgcG5sUGF5bWVudC5hZGQocG5sQ2FzaFBheW1lbnQpO1xuICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgIHBubFBheW1lbnQuYWRkKHBubFRyYW5zZmVyUGF5bWVudCk7XG5cbiAgICAgICAgLy8gVGjDqm0gbGlzdGVuZXIgY2hvIHJhZGlvIGJ1dHRvbiDEkeG7gyBjaHV54buDbiDEkeG7lWkgZ2nhu69hIGPDoWMgcGjGsMahbmcgdGjhu6ljIHRoYW5oIHRvw6FuXG4gICAgICAgIHJhZENhc2guYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBwbmxDYXNoUGF5bWVudC5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgZGlhbG9nLnJldmFsaWRhdGUoKTtcbiAgICAgICAgICAgIGRpYWxvZy5yZXBhaW50KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJhZFRyYW5zZmVyLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgcG5sQ2FzaFBheW1lbnQuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgIGRpYWxvZy5yZXZhbGlkYXRlKCk7XG4gICAgICAgICAgICBkaWFsb2cucmVwYWludCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBZGQgZG9jdW1lbnQgbGlzdGVuZXIgZm9yIGF1dG9tYXRpYyBjaGFuZ2UgY2FsY3VsYXRpb25cbiAgICAgICAgdHh0Q3VzdG9tZXJQYXltZW50LmdldERvY3VtZW50KCkuYWRkRG9jdW1lbnRMaXN0ZW5lcihuZXcgRG9jdW1lbnRMaXN0ZW5lcigpIHtcbiAgICAgICAgICAgIHByaXZhdGUgdm9pZCB1cGRhdGVDaGFuZ2UoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGlucHV0ID0gdHh0Q3VzdG9tZXJQYXltZW50LmdldFRleHQoKS5yZXBsYWNlQWxsKFwiW15cXFxcZF1cIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgY3VzdG9tZXJQYXltZW50ID0gRG91YmxlLnBhcnNlRG91YmxlKGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSBjaGFuZ2UgPSBjdXN0b21lclBheW1lbnQgLSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxibENoYW5nZS5zZXRUZXh0KGN1cnJlbmN5Rm9ybWF0dGVyLmZvcm1hdChNYXRoLm1heCgwLCBjaGFuZ2UpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYmxDaGFuZ2Uuc2V0VGV4dChcIjAgVk7EkFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxibENoYW5nZS5zZXRUZXh0KFwiMCBWTsSQXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgICAgIGJ0blRoYW5oVG9hbi5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhZENhc2guaXNTZWxlY3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFjhu60gbMO9IHRoYW5oIHRvw6FuIHRp4buBbiBt4bq3dFxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgaW5wdXQgPSB0eHRDdXN0b21lclBheW1lbnQuZ2V0VGV4dCgpLnJlcGxhY2VBbGwoXCJbXlxcXFxkXVwiLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlZ1aSBsw7JuZyBuaOG6rXAgc+G7kSB0aeG7gW4ga2jDoWNoIMSRxrBhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRvdWJsZSBjdXN0b21lclBheW1lbnQgPSBEb3VibGUucGFyc2VEb3VibGUoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tZXJQYXltZW50IDwgdmVUYXVIaWVuVGFpLmdldEdpYVZlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJT4buRIHRp4buBbiBraMOhY2ggxJHGsGEga2jDtG5nIMSR4bunXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh4dUx5VGhhbmhUb2FuKFwiVElFTl9NQVRcIiwgXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSBjaGFuZ2UgPSBjdXN0b21lclBheW1lbnQgLSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dQYXltZW50U3VjY2Vzc0RpYWxvZyhjaGFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0FmdGVyU3VjY2Vzc2Z1bFBheW1lbnQoZGlhbG9nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmFkVHJhbnNmZXIuaXNTZWxlY3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFjhu60gbMO9IHRoYW5oIHRvw6FuIGNodXnhu4NuIGtob+G6o25cbiAgICAgICAgICAgICAgICAgICAgaW50IHNlbGVjdGVkUGF5bWVudFR5cGUgPSBjbWJQYXltZW50VHlwZS5nZXRTZWxlY3RlZEluZGV4KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkUGF5bWVudFR5cGUgPT0gMCkgeyAvLyBDaHV54buDbiBraG/huqNuIG5nw6JuIGjDoG5nXG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcgdHJhbnNhY3Rpb25JZCA9IHR4dFRyYW5zYWN0aW9uSWQuZ2V0VGV4dCgpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbklkLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVnVpIGzDsm5nIG5o4bqtcCBtw6MgZ2lhbyBk4buLY2hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4dUx5VGhhbmhUb2FuKFwiQ0hVWUVOX0tIT0FOX05HQU5fSEFOR1wiLCB0cmFuc2FjdGlvbklkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dUcmFuc2ZlclN1Y2Nlc3NEaWFsb2coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQWZ0ZXJTdWNjZXNzZnVsUGF5bWVudChkaWFsb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIktow7RuZyB0aOG7gyB4w6FjIHRo4buxYyBnaWFvIGThu4tjaC4gVnVpIGzDsm5nIGtp4buDbSB0cmEgbcOjIGdpYW8gZOG7i2NoLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gVk5QYXkgUVJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFjDoWMgdGjhu7FjIGzhuqFpIHRy4bqhbmcgdGjDoWkgdGhhbmggdG/DoW4gbeG7mXQgbOG6p24gbuG7r2FcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW4gcGF5bWVudFN1Y2Nlc3MgPSBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBsYmxQYXltZW50U3RhdHVzLCBudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBheW1lbnRTdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1ZucGF5U3VjY2Vzc0RpYWxvZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2jGsGEgbmjhuq1uIMSRxrDhu6NjIHRow7RuZyB0aW4gdGhhbmggdG/DoW4uIFZ1aSBsw7JuZyB0aGFuaCB0b8OhbiBob+G6t2Mga2nhu4NtIHRyYSBs4bqhaS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2jGsGEgdGhhbmggdG/DoW5cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU+G7kSB0aeG7gW4ga2jDtG5nIGjhu6NwIGzhu4dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZXgpIHtcbiAgICAgICAgICAgICAgICBleC5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpIGtoaSB0aGFuaCB0b8OhbjogXCIgKyBleC5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbi4uLlxuXG4gICAgLy8gUGjGsMahbmcgdGjhu6ljIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBWTlBheVxuICAgIHByaXZhdGUgYm9vbGVhbiBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyhTdHJpbmcgbWFWZSwgSkxhYmVsIGxibFN0YXR1cywgSkRpYWxvZyBwYXJlbnREaWFsb2cpIHtcbiAgICAgICAgLy8gVOG6oW8gU3dpbmdXb3JrZXIgxJHhu4Mga2jDtG5nIGzDoG0gxJHGoSBnaWFvIGRp4buHblxuICAgICAgICBTd2luZ1dvcmtlcjxCb29sZWFuLCBWb2lkPiB3b3JrZXIgPSBuZXcgU3dpbmdXb3JrZXI8PigpIHtcbiAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgcHJvdGVjdGVkIEJvb2xlYW4gZG9JbkJhY2tncm91bmQoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJvbmcgbcO0aSB0csaw4budbmcgdGjhu7FjIHThur8sIGLhuqFuIHPhur0gZ+G7jWkgQVBJIFZOUGF5IMSR4buDIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSBnaWFvIGThu4tjaFxuICAgICAgICAgICAgICAgICAgICAvLyDhu54gxJHDonkgY2jDum5nIHRhIHPhur0gbcO0IHBo4buPbmcgdmnhu4djIGtp4buDbSB0cmEsIHRy4bqjIHbhu4Egbmfhuqt1IG5oacOqbiDEkeG7gyBkZW1vXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyb25nIHRo4buxYyB04bq/LCBz4bq9IGtp4buDbSB0cmEgZOG7sWEgdHLDqm4gbcOjIGdpYW8gZOG7i2NoIMSRw6MgbMawdVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIE3DtCBwaOG7j25nIGfhu41pIEFQSSBraeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgKDUwJSBjxqEgaOG7mWkgdGjDoG5oIGPDtG5nKVxuICAgICAgICAgICAgICAgICAgICBUaHJlYWQuc2xlZXAoMTUwMCk7IC8vIE3DtCBwaOG7j25nIHRo4budaSBnaWFuIGfhu41pIEFQSVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJhbmRvbSgpLm5leHRCb29sZWFuKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgcHJpdmF0ZSB2b2lkIGdlbmVyYXRlVm5wYXlRUkNvZGUoSkxhYmVsIGxibFFSQ29kZSwgU3RyaW5nIG1hVmUsIGRvdWJsZSBhbW91bnQsIEpMYWJlbCBsYmxTdGF0dXMpIHtcbiAgICAgICAgLy8gVOG6oW8gU3dpbmdXb3JrZXIgxJHhu4Mga2jDtG5nIGzDoG0gxJHGoSBnaWFvIGRp4buHblxuICAgICAgICBTd2luZ1dvcmtlcjxJbWFnZUljb24sIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgSW1hZ2VJY29uIGRvSW5CYWNrZ3JvdW5kKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFThuqFvIHRoYW0gc+G7kSBjaG8gQVBJIFZOUGF5XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfVHhuUmVmID0gbWFWZSArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOyAvLyBNw6MgdGhhbSBjaGnhur91IGdpYW8gZOG7i2NoXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfQW1vdW50ID0gU3RyaW5nLnZhbHVlT2YoKGxvbmcpKGFtb3VudCAqIDEwMCkpOyAvLyBT4buRIHRp4buBbiAqIDEwMCAoxJHGoW4gduG7iyB4dSlcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9PcmRlckluZm8gPSBcIlRoYW5oIHRvYW4gaG9hIGRvbiB2ZSB0YXUgXCIgKyBtYVZlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVSTCBBUEkgdOG6oW8gbcOjIFFSIGPhu6dhIFZOUGF5ICjEkcOieSBsw6AgVVJMIGdp4bqjIMSR4buLbmgsIGLhuqFuIGPhuqduIHRoYXkgdGjhur8gYuG6sW5nIFVSTCB0aOG7sWMpXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBhcGlVcmwgPSBcImh0dHBzOi8vc2FuZGJveC52bnBheW1lbnQudm4vcGF5bWVudHYyL2NyZWF0ZV9xcl9jb2RlLmh0bWxcIjtcbi4uLlxuXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfU2VjdXJlSGFzaCA9IGhtYWNTSEE1MTIoXCJZT1VSX1NFQ1JFVF9LRVlcIiwgaGFzaERhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmFwcGVuZChcIiZ2bnBfU2VjdXJlSGFzaD1cIikuYXBwZW5kKHZucF9TZWN1cmVIYXNoKTtcblxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgcGF5bWVudFVybCA9IGFwaVVybCArIFwiP1wiICsgcXVlcnkudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUcm9uZyBtw7RpIHRyxrDhu51uZyB0aOG7sWMgdOG6vywgYuG6oW4gc+G6vSBn4buNaSBBUEkgVk5QYXkgxJHhu4MgbOG6pXkgVVJMIGhv4bq3YyBk4buvIGxp4buHdSBRUlxuICAgICAgICAgICAgICAgICAgICAvLyDhu54gxJHDonksIGNow7puZyB0YSBz4bq9IHThuqFvIG3DoyBRUiB04burIFVSTCB0aGFuaCB0b8OhblxuICAgICAgICAgICAgICAgICAgICAvLyBMxrB1IHRow7RuZyB0aW4gbsOgeSDEkeG7gyB0cmEgY+G7qXUgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBzYXUgbsOgeVxuICAgICAgICAgICAgICAgICAgICBzYXZlVm5wYXlUcmFuc2FjdGlvbih2bnBfVHhuUmVmLCBtYVZlLCBhbW91bnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFThuqFvIFFSIGNvZGUgdOG7qyBVUkwgdGhhbmggdG/DoW5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlUVJDb2RlSW1hZ2UocGF5bWVudFVybCwgMjAwLCAyMDApO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgLy8gUGjGsMahbmcgdGjhu6ljIHjhu60gbMO9IHNhdSBraGkgdGhhbmggdG/DoW4gdGjDoG5oIGPDtG5nXG4gICAgcHJpdmF0ZSB2b2lkIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KEpEaWFsb2cgZGlhbG9nKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpIHRow6BuaCDEkMODX1RIQU5IX1RPQU5cbiAgICAgICAgdmVUYXVIaWVuVGFpLnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKTtcblxuICAgICAgICAvLyBH4buNaSBBUEkgxJHhu4MgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpXG4gICAgICAgIGJvb2xlYW4gc3VjY2VzcyA9IGRvaVZlREFPLmNhcE5oYXRUcmFuZ1RoYWlWZSh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKTtcblxuICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgZGlhbG9nLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhTVUNDRVNTX1RFWFQsIGZhbHNlKTtcblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IGzhuqFpIHRy4bqhbmcgdGjDoWkgdHLDqm4gZ2lhbyBkaeG7h25cbiAgICAgICAgICAgIGxibFRyYW5nVGhhaS5zZXRUZXh0KHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHNldFRyYW5nVGhhaUNvbG9yKGxibFRyYW5nVGhhaSwgdmVUYXVIaWVuVGFpLmdldFRyYW5nVGhhaSgpKTtcblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IGzhuqFpIGLhuqNuZyBs4buLY2ggc+G7rVxuICAgICAgICAgICAgRGVmYXVsdFRhYmxlTW9kZWwgbW9kZWwgPSAoRGVmYXVsdFRhYmxlTW9kZWwpIHRibExpY2hTdS5nZXRNb2RlbCgpO1xuICAgICAgICAgICAgaW50IHJvd0NvdW50ID0gbW9kZWwuZ2V0Um93Q291bnQoKTtcbiAgICAgICAgICAgIGlmIChyb3dDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgZMOybmcgY3Xhu5FpIGPDuW5nICh24burYSB0aMOqbSlcbiAgICAgICAgICAgICAgICBtb2RlbC5zZXRWYWx1ZUF0KFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4sIHJvd0NvdW50IC0gMSwgMyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxhbU1vaSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICBcIktow7RuZyB0aOG7gyBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6lcIixcbiAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgfVxuICAgIH1cbi4uLlxuXG4gICAgLy8gUGjGsMahbmcgdGjhu6ljIHjhu60gbMO9IHRoYW5oIHRvw6FuIHbhu5tpIHRow7RuZyB0aW4gduG7gSBwaMawxqFuZyB0aOG7qWMgdGhhbmggdG/DoW4gdsOgIG3DoyBnaWFvIGThu4tjaCAobuG6v3UgY8OzKVxuICAgIHByaXZhdGUgYm9vbGVhbiB4dUx5VGhhbmhUb2FuKFN0cmluZyBwaHVvbmdUaHVjVGhhbmhUb2FuLCBTdHJpbmcgbWFHaWFvRGljaCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ29kZSB44butIGzDvSB0aGFuaCB0b8OhbiDhu58gxJHDonlcbiAgICAgICAgICAgIC8vIEzGsHUgdGjDtG5nIHRpbiBwaMawxqFuZyB0aOG7qWMgdGhhbmggdG/DoW4gdsOgIG3DoyBnaWFvIGThu4tjaCB2w6BvIGPGoSBz4bufIGThu68gbGnhu4d1XG5cbiAgICAgICAgICAgIC8vIEdp4bqjIHPhu60gcGjGsMahbmcgdGjhu6ljIG7DoHkgbHXDtG4gdHLhuqMgduG7gSB0cnVlIG7hur91IGtow7RuZyBjw7Mgbmdv4bqhaSBs4buHXG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJY4butIGzDvSB0aGFuaCB0b8OhbjogXCIgKyBwaHVvbmdUaHVjVGhhbmhUb2FuICsgXCIsIE3DoyBnaWFvIGThu4tjaDogXCIgK1xuICAgICAgICAgICAgICAgICAgICAobWFHaWFvRGljaC5pc0VtcHR5KCkgPyBcIktow7RuZyBjw7NcIiA6IG1hR2lhb0RpY2gpKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgZXgucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4uLi5cbiAgICBwcml2YXRlIGJvb2xlYW4geHVMeVRoYW5oVG9hbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gMS4gVMOsbSBraMOhY2ggaMOgbmcgdOG7qyBtw6MgdsOpXG4gICAgICAgICAgICBLaGFjaEhhbmcga2hhY2hIYW5nID0gZG9pVmVEQU8uZ2V0S2hhY2hIYW5nQnlNYVZlKHZlVGF1SGllblRhaS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgaWYgKGtoYWNoSGFuZyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIktow7RuZyB0w6xtIHRo4bqleSB0aMO0bmcgdGluIGtow6FjaCBow6BuZyFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCLEkMOjIHTDrG0gdGjhuqV5IEtoYWNoSGFuZzogXCIgKyBraGFjaEhhbmcuZ2V0TWFLaGFjaEhhbmcoKSk7XG5cbiAgICAgICAgICAgIC8vIDIuIFThuqFvIGjDs2EgxJHGoW4gbeG7m2lcbiAgICAgICAgICAgIEhvYURvbiBob2FEb24gPSBuZXcgSG9hRG9uKCk7XG4gICAgICAgICAgICBTdHJpbmcgbWFIRCA9IGdlbmVyYXRlTWFIRCgpO1xuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiR2VuZXJhdGVkIE1hSEQ6IFwiICsgbWFIRCk7XG4gICAgICAgICAgICBob2FEb24uc2V0TWFIRChtYUhEKTtcbiAgICAgICAgICAgIGhvYURvbi5zZXROZ2F5TGFwKExvY2FsRGF0ZVRpbWUubm93KCkpO1xuICAgICAgICAgICAgaG9hRG9uLnNldFRpZW5HaWFtKGdpYVZlQmFuRGF1IC0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCkpO1xuICAgICAgICAgICAgaG9hRG9uLnNldFRvbmdUaWVuKHZlVGF1SGllblRhaS5nZXRHaWFWZSgpKTtcbiAgICAgICAgICAgIGhvYURvbi5zZXRLaGFjaEhhbmcoa2hhY2hIYW5nKTtcblxuICAgICAgICAgICAgLy8gRGVidWdnaW5nIHRoZSBOaGFuVmllbiByZWZlcmVuY2VcbiAgICAgICAgICAgIGlmIChuaGFuVmllblBhbmVsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJFUlJPUjogbmhhblZpZW5QYW5lbCBpcyBudWxsXCIpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJUaGnhur91IHRow7RuZyB0aW4gbmjDom4gdmnDqm4hXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiTmhhblZpZW4gaW5mbzogXCIgKyBuaGFuVmllblBhbmVsLmdldENsYXNzKCkuZ2V0TmFtZSgpKTtcbiAgICAgICAgICAgIGhvYURvbi5zZXROdihuaGFuVmllblBhbmVsKTtcblxuICAgICAgICAgICAgLy8gR2V0IExvYWlIb2FEb24gYW5kIHZlcmlmeSBpdCBleGlzdHNcbiAgICAgICAgICAgIExvYWlIb2FEb24gbG9haUhvYURvbiA9IGxvYWlIb2FEb25EQU8uZmluZEJ5SWQoXCJMSEQwMDFcIik7XG4gICAgICAgICAgICBpZiAobG9haUhvYURvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiRVJST1I6IEtow7RuZyB0w6xtIHRo4bqleSBsb+G6oWkgaMOzYSDEkcahbiBMSEQwMDFcIik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIktow7RuZyB0w6xtIHRo4bqleSBsb+G6oWkgaMOzYSDEkcahbiFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJGb3VuZCBMb2FpSG9hRG9uOiBcIiArIGxvYWlIb2FEb24uZ2V0TWFMb2FpSG9hRG9uKCkpO1xuICAgICAgICAgICAgaG9hRG9uLnNldExvYWlIb2FEb24obG9haUhvYURvbik7XG5cbiAgICAgICAgICAgIC8vIDMuIEzGsHUgaMOzYSDEkcahblxuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiQXR0ZW1wdGluZyB0byBzYXZlIEhvYURvbi4uLlwiKTtcbiAgICAgICAgICAgIGJvb2xlYW4gc2F2ZWRIb2FEb24gPSBob2FEb25EQU8uc2F2ZUhvYURvbihob2FEb24pO1xuICAgICAgICAgICAgaWYgKCFzYXZlZEhvYURvbikge1xuICAgICAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkZhaWxlZCB0byBzYXZlIEhvYURvbiFcIik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIktow7RuZyB0aOG7gyBsxrB1IGjDs2EgxJHGoW4hXCIpO1xuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkVycm9yIGluIHh1THlUaGFuaFRvYW46IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgeOG7rSBsw70gdGhhbmggdG/DoW46IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBTdHJpbmcgZ2VuZXJhdGVNYUhEKCkge1xuICAgICAgICAvLyBGb3JtYXQ6IEhEICsgeXl5eU1NZGQgKyA0IHPhu5EgcmFuZG9tXG4gICAgICAgIFNpbXBsZURhdGVGb3JtYXQgc2RmID0gbmV3IFNpbXBsZURhdGVGb3JtYXQoXCJ5eXl5TU1kZFwiKTtcbiAgICAgICAgU3RyaW5nIGRhdGVQYXJ0ID0gc2RmLmZvcm1hdChuZXcgRGF0ZSgpKTtcbiAgICAgICAgU3RyaW5nIHJhbmRvbVBhcnQgPSBTdHJpbmcuZm9ybWF0KFwiJTA0ZFwiLCBuZXcgUmFuZG9tKCkubmV4dEludCgxMDAwMCkpO1xuICAgICAgICByZXR1cm4gXCJIRFwiICsgZGF0ZVBhcnQgKyByYW5kb21QYXJ0O1xuICAgIH1cbn0uLi5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVR1Mlo5NTN2ajFEdUxjaG51UHdKemYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyIsImZvbGRlclJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiJOb3cgSSBoYXZlIGEgZ29vZCB1bmRlcnN0YW5kaW5nIG9mIHRoZSBjb2RlYmFzZSBhbmQgd2hhdCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZC4gTGV0IG1lIHVwZGF0ZSB0aGUgRG9pVmVQYW5lbC5qYXZhIGZpbGUgdG8gaW1wbGVtZW50IHRoZSB0aWNrZXQgZXhjaGFuZ2UgZnVuY3Rpb25hbGl0eS5cblxuRmlyc3QsIEknbGwgdXBkYXRlIHRoZSBgZG9pVmUoKWAgbWV0aG9kIHRvIGhhbmRsZSB0aGUgdGlja2V0IGV4Y2hhbmdlIHByb2Nlc3M6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZGM2YmQ0ZTgtYjI5OC00MzExLTk5OGItZmEzNjQwZGVhYjU5IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSdtIGVuY291bnRlcmluZyBhbiBpc3N1ZSB3aXRoIHRoZSBmaWxlIGVkaXRvci4gTGV0IG1lIHRyeSBhIGRpZmZlcmVudCBhcHByb2FjaCBieSBjcmVhdGluZyBhIG5ldyBmaWxlIHdpdGggdGhlIHVwZGF0ZWQgY29kZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlJhbiBpbnRvIFVua25vd24gZXJyb3Igd2hpbGUgdHJ5aW5nIHRvIHJlYWQgUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhIiwiaXNfZXJyb3IiOnRydWUsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDExMWM4QkpLZVVIaHVFanlvZUdjZk1qIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmciLCJmb2xkZXJSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiSSdtIGVuY291bnRlcmluZyBhbiBpc3N1ZSB3aXRoIHRoZSBmaWxlIGVkaXRvci4gTGV0IG1lIHRyeSBhIGRpZmZlcmVudCBhcHByb2FjaCBieSBjcmVhdGluZyBhIG5ldyBmaWxlIHdpdGggdGhlIHVwZGF0ZWQgY29kZTpcblxuSSdtIHNvcnJ5LiBJIHRyaWVkIHRvIGNhbGwgYSB0b29sLCBidXQgcHJvdmlkZWQgdG9vIGxhcmdlIG9mIGFuIGlucHV0LiBIb3cgd291bGQgeW91IGxpa2UgdG8gcHJvY2VlZD9cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsicmVxdWVzdF9pZCI6ImM2YjkwYTg4LTdkZGQtNDIwZi1iYzk0LThjNzc4MmEyNjBiMCIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiOGY0YmU0OGMtZWU1MS00M2Q3LWFiYTQtMGIyM2ExNzZlZThkIiwicmVxdWVzdF9tZXNzYWdlIjoixJHhu41jIGzhuqFpIHRvw6BuIGLhu5kgZOG7sSDDoW4sIGdpw7pwIHTDtGkgZml4IGzhu5dpIEVycm9yIGluIHh1THlUaGFuaFRvYW46IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZzsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5sYW5nLkV4Y2VwdGlvbjogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmdcclxuamF2YS5ybWkuU2VydmVyRXhjZXB0aW9uOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmc7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzkyKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhjZXB0aW9uUmVjZWl2ZWRGcm9tU2VydmVyKFN0cmVhbVJlbW90ZUNhbGwuamF2YTozMDQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuU3RyZWFtUmVtb3RlQ2FsbC5leGVjdXRlQ2FsbChTdHJlYW1SZW1vdGVDYWxsLmphdmE6MjgwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RSZWYuaW52b2tlKFVuaWNhc3RSZWYuamF2YToxNjYpXHJcblx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZVJlbW90ZU1ldGhvZChSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjIxNSlcclxuXHRhdCBqYXZhLnJtaS9qYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuaW52b2tlKFJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmphdmE6MTYwKVxyXG5cdGF0IGpkay5wcm94eTIvamRrLnByb3h5Mi4kUHJveHk3Ni5kYXRWZShVbmtub3duIFNvdXJjZSlcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC54dUx5VGhhbmhUb2FuKERvaVZlUGFuZWwuamF2YToyODg5KVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmRvaVZlKERvaVZlUGFuZWwuamF2YToxMzE4KVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmxhbWJkYSRjcmVhdGVCdXR0b25QYW5lbCQ3KERvaVZlUGFuZWwuamF2YTo4MDQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkFic3RyYWN0QnV0dG9uLmZpcmVBY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToxOTcyKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbiRIYW5kbGVyLmFjdGlvblBlcmZvcm1lZChBYnN0cmFjdEJ1dHRvbi5qYXZhOjIzMTQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5maXJlQWN0aW9uUGVyZm9ybWVkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjQwNylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuRGVmYXVsdEJ1dHRvbk1vZGVsLnNldFByZXNzZWQoRGVmYXVsdEJ1dHRvbk1vZGVsLmphdmE6MjYyKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5wbGFmLmJhc2ljLkJhc2ljQnV0dG9uTGlzdGVuZXIubW91c2VSZWxlYXNlZChCYXNpY0J1dHRvbkxpc3RlbmVyLmphdmE6Mjc5KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5BV1RFdmVudE11bHRpY2FzdGVyLm1vdXNlUmVsZWFzZWQoQVdURXZlbnRNdWx0aWNhc3Rlci5qYXZhOjI5NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KENvbXBvbmVudC5qYXZhOjY2MjEpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkpDb21wb25lbnQucHJvY2Vzc01vdXNlRXZlbnQoSkNvbXBvbmVudC5qYXZhOjMzOTgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzRXZlbnQoQ29tcG9uZW50LmphdmE6NjM4NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLnByb2Nlc3NFdmVudChDb250YWluZXIuamF2YToyMjY2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudEltcGwoQ29tcG9uZW50LmphdmE6NDk5NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLmRpc3BhdGNoRXZlbnRJbXBsKENvbnRhaW5lci5qYXZhOjIzMjQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5yZXRhcmdldE1vdXNlRXZlbnQoQ29udGFpbmVyLmphdmE6NDk0OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLnByb2Nlc3NNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ1NzUpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KENvbnRhaW5lci5qYXZhOjQ1MTYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzEwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5XaW5kb3cuZGlzcGF0Y2hFdmVudEltcGwoV2luZG93LmphdmE6Mjc4MClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnQoQ29tcG9uZW50LmphdmE6NDgyOClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50SW1wbChFdmVudFF1ZXVlLmphdmE6Nzc1KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MjApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNC5ydW4oRXZlbnRRdWV1ZS5qYXZhOjcxNClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6ODcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo5OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDUucnVuKEV2ZW50UXVldWUuamF2YTo3NDUpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlLmRpc3BhdGNoRXZlbnQoRXZlbnRRdWV1ZS5qYXZhOjc0NClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wT25lRXZlbnRGb3JGaWx0ZXJzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToyMDMpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50c0ZvckZpbHRlcihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTI0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JIaWVyYXJjaHkoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjExMylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMDkpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTAxKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnJ1bihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6OTApXHJcbkNhdXNlZCBieTogamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmc7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHJcblx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjQzMClcclxuXHRhdCBqYXZhLmJhc2UvamRrLmludGVybmFsLnJlZmxlY3QuRGlyZWN0TWV0aG9kSGFuZGxlQWNjZXNzb3IuaW52b2tlKERpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmphdmE6MTAzKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcucmVmbGVjdC5NZXRob2QuaW52b2tlKE1ldGhvZC5qYXZhOjU4MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0U2VydmVyUmVmLmRpc3BhdGNoKFVuaWNhc3RTZXJ2ZXJSZWYuamF2YTozNjApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjIwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MTk3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo3MTQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0LnNlcnZpY2VDYWxsKFRyYW5zcG9ydC5qYXZhOjE5NilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0LmhhbmRsZU1lc3NhZ2VzKFRDUFRyYW5zcG9ydC5qYXZhOjU5OClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bjAoVENQVHJhbnNwb3J0LmphdmE6ODQ0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIubGFtYmRhJHJ1biQwKFRDUFRyYW5zcG9ydC5qYXZhOjcyMSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuKFRDUFRyYW5zcG9ydC5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yLnJ1bldvcmtlcihUaHJlYWRQb29sRXhlY3V0b3IuamF2YToxMTQ0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IkV29ya2VyLnJ1bihUaHJlYWRQb29sRXhlY3V0b3IuamF2YTo2NDIpXHJcblx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5UaHJlYWQucnVuKFRocmVhZC5qYXZhOjE1NzApXHJcbkNhdXNlZCBieTogamF2YS5sYW5nLkV4Y2VwdGlvbjogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmdcclxuXHRhdCBkYW8uaW1wbC5Eb2lWZURBT0ltcGwuZGF0VmUoRG9pVmVEQU9JbXBsLmphdmE6Mjg2KVxyXG5cdC4uLiAxNSBtb3JlXHJcbmphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIHjhu60gbMO9IHRoYW5oIHRvw6FuOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmc7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLnJtaS5TZXJ2ZXJFeGNlcHRpb246IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZzsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5sYW5nLkV4Y2VwdGlvbjogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmdcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC54dUx5VGhhbmhUb2FuKERvaVZlUGFuZWwuamF2YToyOTgwKVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmRvaVZlKERvaVZlUGFuZWwuamF2YToxMzE4KVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmxhbWJkYSRjcmVhdGVCdXR0b25QYW5lbCQ3KERvaVZlUGFuZWwuamF2YTo4MDQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkFic3RyYWN0QnV0dG9uLmZpcmVBY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToxOTcyKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbiRIYW5kbGVyLmFjdGlvblBlcmZvcm1lZChBYnN0cmFjdEJ1dHRvbi5qYXZhOjIzMTQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5maXJlQWN0aW9uUGVyZm9ybWVkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjQwNylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuRGVmYXVsdEJ1dHRvbk1vZGVsLnNldFByZXNzZWQoRGVmYXVsdEJ1dHRvbk1vZGVsLmphdmE6MjYyKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5wbGFmLmJhc2ljLkJhc2ljQnV0dG9uTGlzdGVuZXIubW91c2VSZWxlYXNlZChCYXNpY0J1dHRvbkxpc3RlbmVyLmphdmE6Mjc5KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5BV1RFdmVudE11bHRpY2FzdGVyLm1vdXNlUmVsZWFzZWQoQVdURXZlbnRNdWx0aWNhc3Rlci5qYXZhOjI5NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KENvbXBvbmVudC5qYXZhOjY2MjEpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkpDb21wb25lbnQucHJvY2Vzc01vdXNlRXZlbnQoSkNvbXBvbmVudC5qYXZhOjMzOTgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzRXZlbnQoQ29tcG9uZW50LmphdmE6NjM4NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLnByb2Nlc3NFdmVudChDb250YWluZXIuamF2YToyMjY2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudEltcGwoQ29tcG9uZW50LmphdmE6NDk5NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLmRpc3BhdGNoRXZlbnRJbXBsKENvbnRhaW5lci5qYXZhOjIzMjQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5yZXRhcmdldE1vdXNlRXZlbnQoQ29udGFpbmVyLmphdmE6NDk0OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLnByb2Nlc3NNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ1NzUpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KENvbnRhaW5lci5qYXZhOjQ1MTYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzEwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5XaW5kb3cuZGlzcGF0Y2hFdmVudEltcGwoV2luZG93LmphdmE6Mjc4MClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnQoQ29tcG9uZW50LmphdmE6NDgyOClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50SW1wbChFdmVudFF1ZXVlLmphdmE6Nzc1KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MjApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNC5ydW4oRXZlbnRRdWV1ZS5qYXZhOjcxNClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6ODcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo5OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDUucnVuKEV2ZW50UXVldWUuamF2YTo3NDUpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlLmRpc3BhdGNoRXZlbnQoRXZlbnRRdWV1ZS5qYXZhOjc0NClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wT25lRXZlbnRGb3JGaWx0ZXJzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToyMDMpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50c0ZvckZpbHRlcihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTI0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JIaWVyYXJjaHkoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjExMylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMDkpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTAxKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnJ1bihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6OTApXHJcbkNhdXNlZCBieTogamF2YS5ybWkuU2VydmVyRXhjZXB0aW9uOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmc7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzkyKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhjZXB0aW9uUmVjZWl2ZWRGcm9tU2VydmVyKFN0cmVhbVJlbW90ZUNhbGwuamF2YTozMDQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuU3RyZWFtUmVtb3RlQ2FsbC5leGVjdXRlQ2FsbChTdHJlYW1SZW1vdGVDYWxsLmphdmE6MjgwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RSZWYuaW52b2tlKFVuaWNhc3RSZWYuamF2YToxNjYpXHJcblx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZVJlbW90ZU1ldGhvZChSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjIxNSlcclxuXHRhdCBqYXZhLnJtaS9qYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuaW52b2tlKFJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmphdmE6MTYwKVxyXG5cdGF0IGpkay5wcm94eTIvamRrLnByb3h5Mi4kUHJveHk3Ni5kYXRWZShVbmtub3duIFNvdXJjZSlcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC54dUx5VGhhbmhUb2FuKERvaVZlUGFuZWwuamF2YToyODg5KVxyXG5cdC4uLiAzOCBtb3JlXHJcbkNhdXNlZCBieTogamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmc7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHJcblx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjQzMClcclxuXHRhdCBqYXZhLmJhc2UvamRrLmludGVybmFsLnJlZmxlY3QuRGlyZWN0TWV0aG9kSGFuZGxlQWNjZXNzb3IuaW52b2tlKERpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmphdmE6MTAzKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcucmVmbGVjdC5NZXRob2QuaW52b2tlKE1ldGhvZC5qYXZhOjU4MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0U2VydmVyUmVmLmRpc3BhdGNoKFVuaWNhc3RTZXJ2ZXJSZWYuamF2YTozNjApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjIwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MTk3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo3MTQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0LnNlcnZpY2VDYWxsKFRyYW5zcG9ydC5qYXZhOjE5NilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0LmhhbmRsZU1lc3NhZ2VzKFRDUFRyYW5zcG9ydC5qYXZhOjU5OClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bjAoVENQVHJhbnNwb3J0LmphdmE6ODQ0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIubGFtYmRhJHJ1biQwKFRDUFRyYW5zcG9ydC5qYXZhOjcyMSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuKFRDUFRyYW5zcG9ydC5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yLnJ1bldvcmtlcihUaHJlYWRQb29sRXhlY3V0b3IuamF2YToxMTQ0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IkV29ya2VyLnJ1bihUaHJlYWRQb29sRXhlY3V0b3IuamF2YTo2NDIpXHJcblx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5UaHJlYWQucnVuKFRocmVhZC5qYXZhOjE1NzApXHJcbkNhdXNlZCBieTogamF2YS5sYW5nLkV4Y2VwdGlvbjogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmdcclxuXHRhdCBkYW8uaW1wbC5Eb2lWZURBT0ltcGwuZGF0VmUoRG9pVmVEQU9JbXBsLmphdmE6Mjg2KVxyXG5cdC4uLiAxNSBtb3JlIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IsSR4buNYyBs4bqhaSB0b8OgbiBi4buZIGThu7Egw6FuLCBnacO6cCB0w7RpIGZpeCBs4buXaSBFcnJvciBpbiB4dUx5VGhhbmhUb2FuOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmc7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImphdmEucm1pLlNlcnZlckV4Y2VwdGlvbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZ1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM5MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4Y2VwdGlvblJlY2VpdmVkRnJvbVNlcnZlcihTdHJlYW1SZW1vdGVDYWxsLmphdmE6MzA0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhlY3V0ZUNhbGwoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjI4MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0UmVmLmludm9rZShVbmljYXN0UmVmLmphdmE6MTY2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2VSZW1vdGVNZXRob2QoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToyMTUpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZShSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjE2MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqZGsucHJveHkyL2pkay5wcm94eTIuJFByb3h5NzYuZGF0VmUoVW5rbm93biBTb3VyY2UpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6Mjg4OSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5kb2lWZShEb2lWZVBhbmVsLmphdmE6MTMxOClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5sYW1iZGEkY3JlYXRlQnV0dG9uUGFuZWwkNyhEb2lWZVBhbmVsLmphdmE6ODA0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbi5maXJlQWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MTk3MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24kSGFuZGxlci5hY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToyMzE0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuZmlyZUFjdGlvblBlcmZvcm1lZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YTo0MDcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5zZXRQcmVzc2VkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjI2MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcucGxhZi5iYXNpYy5CYXNpY0J1dHRvbkxpc3RlbmVyLm1vdXNlUmVsZWFzZWQoQmFzaWNCdXR0b25MaXN0ZW5lci5qYXZhOjI3OSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQVdURXZlbnRNdWx0aWNhc3Rlci5tb3VzZVJlbGVhc2VkKEFXVEV2ZW50TXVsdGljYXN0ZXIuamF2YToyOTcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChDb21wb25lbnQuamF2YTo2NjIxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5KQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KEpDb21wb25lbnQuamF2YTozMzk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc0V2ZW50KENvbXBvbmVudC5qYXZhOjYzODYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5wcm9jZXNzRXZlbnQoQ29udGFpbmVyLmphdmE6MjI2NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnRJbXBsKENvbXBvbmVudC5qYXZhOjQ5OTYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzI0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucmV0YXJnZXRNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ5NDgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5wcm9jZXNzTW91c2VFdmVudChDb250YWluZXIuamF2YTo0NTc1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChDb250YWluZXIuamF2YTo0NTE2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMxMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuV2luZG93LmRpc3BhdGNoRXZlbnRJbXBsKFdpbmRvdy5qYXZhOjI3ODApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudEltcGwoRXZlbnRRdWV1ZS5qYXZhOjc3NSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzIwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MTQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6OTgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50KEV2ZW50UXVldWUuamF2YTo3NDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcE9uZUV2ZW50Rm9yRmlsdGVycyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MjAzKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JGaWx0ZXIoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEyNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9ySGllcmFyY2h5KEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMTMpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTA5KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwMSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5ydW4oRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjkwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJDYXVzZWQgYnk6IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZ1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTo0MzApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2pkay5pbnRlcm5hbC5yZWZsZWN0LkRpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmludm9rZShEaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5qYXZhOjEwMylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kLmludm9rZShNZXRob2QuamF2YTo1ODApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzYwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJDYXVzZWQgYnk6IGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjI4NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHQuLi4gMTUgbW9yZVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSB44butIGzDvSB0aGFuaCB0b8OhbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZzsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5ybWkuU2VydmVyRXhjZXB0aW9uOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmc7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6Mjk4MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5kb2lWZShEb2lWZVBhbmVsLmphdmE6MTMxOClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5sYW1iZGEkY3JlYXRlQnV0dG9uUGFuZWwkNyhEb2lWZVBhbmVsLmphdmE6ODA0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbi5maXJlQWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MTk3MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24kSGFuZGxlci5hY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToyMzE0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuZmlyZUFjdGlvblBlcmZvcm1lZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YTo0MDcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5zZXRQcmVzc2VkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjI2MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcucGxhZi5iYXNpYy5CYXNpY0J1dHRvbkxpc3RlbmVyLm1vdXNlUmVsZWFzZWQoQmFzaWNCdXR0b25MaXN0ZW5lci5qYXZhOjI3OSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQVdURXZlbnRNdWx0aWNhc3Rlci5tb3VzZVJlbGVhc2VkKEFXVEV2ZW50TXVsdGljYXN0ZXIuamF2YToyOTcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChDb21wb25lbnQuamF2YTo2NjIxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5KQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KEpDb21wb25lbnQuamF2YTozMzk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc0V2ZW50KENvbXBvbmVudC5qYXZhOjYzODYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5wcm9jZXNzRXZlbnQoQ29udGFpbmVyLmphdmE6MjI2NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnRJbXBsKENvbXBvbmVudC5qYXZhOjQ5OTYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzI0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucmV0YXJnZXRNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ5NDgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5wcm9jZXNzTW91c2VFdmVudChDb250YWluZXIuamF2YTo0NTc1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChDb250YWluZXIuamF2YTo0NTE2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMxMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuV2luZG93LmRpc3BhdGNoRXZlbnRJbXBsKFdpbmRvdy5qYXZhOjI3ODApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudEltcGwoRXZlbnRRdWV1ZS5qYXZhOjc3NSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzIwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MTQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6OTgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50KEV2ZW50UXVldWUuamF2YTo3NDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcE9uZUV2ZW50Rm9yRmlsdGVycyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MjAzKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JGaWx0ZXIoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEyNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9ySGllcmFyY2h5KEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMTMpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTA5KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwMSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5ydW4oRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjkwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJDYXVzZWQgYnk6IGphdmEucm1pLlNlcnZlckV4Y2VwdGlvbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZ1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM5MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4Y2VwdGlvblJlY2VpdmVkRnJvbVNlcnZlcihTdHJlYW1SZW1vdGVDYWxsLmphdmE6MzA0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhlY3V0ZUNhbGwoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjI4MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0UmVmLmludm9rZShVbmljYXN0UmVmLmphdmE6MTY2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2VSZW1vdGVNZXRob2QoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToyMTUpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZShSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjE2MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqZGsucHJveHkyL2pkay5wcm94eTIuJFByb3h5NzYuZGF0VmUoVW5rbm93biBTb3VyY2UpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6Mjg4OSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHQuLi4gMzggbW9yZVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJDYXVzZWQgYnk6IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZ1xyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTo0MzApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2pkay5pbnRlcm5hbC5yZWZsZWN0LkRpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmludm9rZShEaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5qYXZhOjEwMylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kLmludm9rZShNZXRob2QuamF2YTo1ODApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzYwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJDYXVzZWQgYnk6IGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjI4NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHQuLi4gMTUgbW9yZSJ9XX1dfSwibWVudGlvbmVkX2l0ZW1zIjpbXSwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVzFGVUU3dFNvaDNCaWF2N25iMXFhQSIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiU2hvdyBtZSB0aGUgRG9pVmVEQU9JbXBsLmRhdFZlIG1ldGhvZCBpbXBsZW1lbnRhdGlvbiwgZm9jdXNpbmcgb24gbGluZSAyODYgd2hlcmUgdGhlIGVycm9yIG9jY3Vyc1wifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSdsbCBoZWxwIHlvdSBmaXggdGhlIGVycm9yIGluIHRoZSBgeHVMeVRoYW5oVG9hbmAgbWV0aG9kLiBUaGUgZXJyb3IgbWVzc2FnZSBpbmRpY2F0ZXMgdGhhdCB0aGVyZSdzIGFuIGlzc3VlIHdpdGggdGhlIHRpY2tldCBleGNoYW5nZSBwcm9jZXNzIHdoZXJlIHRoZSBjdXN0b21lciBuYW1lIGlzIGVtcHR5IHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZSBhIG5ldyB0aWNrZXQuXG5cbkxldCdzIGV4YW1pbmUgdGhlIERvaVZlREFPSW1wbCBpbXBsZW1lbnRhdGlvbiBhbmQgdGhlIHh1THlUaGFuaFRvYW4gbWV0aG9kIHRvIHVuZGVyc3RhbmQgYW5kIGZpeCB0aGUgaXNzdWUuXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6IsSR4buNYyBs4bqhaSB0b8OgbiBi4buZIGThu7Egw6FuLCBnacO6cCB0w7RpIGZpeCBs4buXaSBFcnJvciBpbiB4dUx5VGhhbmhUb2FuOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmc7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHJcbmphdmEucm1pLlNlcnZlckV4Y2VwdGlvbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZ1xyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM5MilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4Y2VwdGlvblJlY2VpdmVkRnJvbVNlcnZlcihTdHJlYW1SZW1vdGVDYWxsLmphdmE6MzA0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhlY3V0ZUNhbGwoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjI4MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0UmVmLmludm9rZShVbmljYXN0UmVmLmphdmE6MTY2KVxyXG5cdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2VSZW1vdGVNZXRob2QoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToyMTUpXHJcblx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZShSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjE2MClcclxuXHRhdCBqZGsucHJveHkyL2pkay5wcm94eTIuJFByb3h5NzYuZGF0VmUoVW5rbm93biBTb3VyY2UpXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6Mjg4OSlcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5kb2lWZShEb2lWZVBhbmVsLmphdmE6MTMxOClcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5sYW1iZGEkY3JlYXRlQnV0dG9uUGFuZWwkNyhEb2lWZVBhbmVsLmphdmE6ODA0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbi5maXJlQWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MTk3MilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24kSGFuZGxlci5hY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToyMzE0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuZmlyZUFjdGlvblBlcmZvcm1lZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YTo0MDcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5zZXRQcmVzc2VkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjI2MilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcucGxhZi5iYXNpYy5CYXNpY0J1dHRvbkxpc3RlbmVyLm1vdXNlUmVsZWFzZWQoQmFzaWNCdXR0b25MaXN0ZW5lci5qYXZhOjI3OSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQVdURXZlbnRNdWx0aWNhc3Rlci5tb3VzZVJlbGVhc2VkKEFXVEV2ZW50TXVsdGljYXN0ZXIuamF2YToyOTcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChDb21wb25lbnQuamF2YTo2NjIxKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5KQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KEpDb21wb25lbnQuamF2YTozMzk4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc0V2ZW50KENvbXBvbmVudC5qYXZhOjYzODYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5wcm9jZXNzRXZlbnQoQ29udGFpbmVyLmphdmE6MjI2NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnRJbXBsKENvbXBvbmVudC5qYXZhOjQ5OTYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzI0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucmV0YXJnZXRNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ5NDgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5wcm9jZXNzTW91c2VFdmVudChDb250YWluZXIuamF2YTo0NTc1KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChDb250YWluZXIuamF2YTo0NTE2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMxMClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuV2luZG93LmRpc3BhdGNoRXZlbnRJbXBsKFdpbmRvdy5qYXZhOjI3ODApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudEltcGwoRXZlbnRRdWV1ZS5qYXZhOjc3NSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzIwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MTQpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6OTgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ1KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50KEV2ZW50UXVldWUuamF2YTo3NDQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcE9uZUV2ZW50Rm9yRmlsdGVycyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MjAzKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JGaWx0ZXIoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEyNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9ySGllcmFyY2h5KEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMTMpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTA5KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwMSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5ydW4oRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjkwKVxyXG5DYXVzZWQgYnk6IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZ1xyXG5cdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTo0MzApXHJcblx0YXQgamF2YS5iYXNlL2pkay5pbnRlcm5hbC5yZWZsZWN0LkRpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmludm9rZShEaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5qYXZhOjEwMylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kLmludm9rZShNZXRob2QuamF2YTo1ODApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzYwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyXG5DYXVzZWQgYnk6IGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHJcblx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjI4NilcclxuXHQuLi4gMTUgbW9yZVxyXG5qYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSB44butIGzDvSB0aGFuaCB0b8OhbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZzsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuU2VydmVyRXhjZXB0aW9uOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogVMOqbiBraMOhY2ggaMOgbmcga2jDtG5nIMSRxrDhu6NjIMSR4buDIHRy4buRbmc7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6Mjk4MClcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5kb2lWZShEb2lWZVBhbmVsLmphdmE6MTMxOClcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5sYW1iZGEkY3JlYXRlQnV0dG9uUGFuZWwkNyhEb2lWZVBhbmVsLmphdmE6ODA0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbi5maXJlQWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MTk3MilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24kSGFuZGxlci5hY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToyMzE0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuZmlyZUFjdGlvblBlcmZvcm1lZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YTo0MDcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5zZXRQcmVzc2VkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjI2MilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcucGxhZi5iYXNpYy5CYXNpY0J1dHRvbkxpc3RlbmVyLm1vdXNlUmVsZWFzZWQoQmFzaWNCdXR0b25MaXN0ZW5lci5qYXZhOjI3OSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQVdURXZlbnRNdWx0aWNhc3Rlci5tb3VzZVJlbGVhc2VkKEFXVEV2ZW50TXVsdGljYXN0ZXIuamF2YToyOTcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChDb21wb25lbnQuamF2YTo2NjIxKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5KQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KEpDb21wb25lbnQuamF2YTozMzk4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc0V2ZW50KENvbXBvbmVudC5qYXZhOjYzODYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5wcm9jZXNzRXZlbnQoQ29udGFpbmVyLmphdmE6MjI2NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnRJbXBsKENvbXBvbmVudC5qYXZhOjQ5OTYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzI0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucmV0YXJnZXRNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ5NDgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5wcm9jZXNzTW91c2VFdmVudChDb250YWluZXIuamF2YTo0NTc1KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChDb250YWluZXIuamF2YTo0NTE2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMxMClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuV2luZG93LmRpc3BhdGNoRXZlbnRJbXBsKFdpbmRvdy5qYXZhOjI3ODApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudEltcGwoRXZlbnRRdWV1ZS5qYXZhOjc3NSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzIwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MTQpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6OTgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ1KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50KEV2ZW50UXVldWUuamF2YTo3NDQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcE9uZUV2ZW50Rm9yRmlsdGVycyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MjAzKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JGaWx0ZXIoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEyNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9ySGllcmFyY2h5KEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMTMpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTA5KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwMSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5ydW4oRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjkwKVxyXG5DYXVzZWQgYnk6IGphdmEucm1pLlNlcnZlckV4Y2VwdGlvbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZ1xyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM5MilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4Y2VwdGlvblJlY2VpdmVkRnJvbVNlcnZlcihTdHJlYW1SZW1vdGVDYWxsLmphdmE6MzA0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhlY3V0ZUNhbGwoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjI4MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0UmVmLmludm9rZShVbmljYXN0UmVmLmphdmE6MTY2KVxyXG5cdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2VSZW1vdGVNZXRob2QoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToyMTUpXHJcblx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZShSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjE2MClcclxuXHRhdCBqZGsucHJveHkyL2pkay5wcm94eTIuJFByb3h5NzYuZGF0VmUoVW5rbm93biBTb3VyY2UpXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6Mjg4OSlcclxuXHQuLi4gMzggbW9yZVxyXG5DYXVzZWQgYnk6IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBUw6puIGtow6FjaCBow6BuZyBraMO0bmcgxJHGsOG7o2MgxJHhu4MgdHLhu5FuZ1xyXG5cdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTo0MzApXHJcblx0YXQgamF2YS5iYXNlL2pkay5pbnRlcm5hbC5yZWZsZWN0LkRpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmludm9rZShEaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5qYXZhOjEwMylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kLmludm9rZShNZXRob2QuamF2YTo1ODApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzYwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyXG5DYXVzZWQgYnk6IGphdmEubGFuZy5FeGNlcHRpb246IFTDqm4ga2jDoWNoIGjDoG5nIGtow7RuZyDEkcaw4bujYyDEkeG7gyB0cuG7kW5nXHJcblx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjI4NilcclxuXHQuLi4gMTUgbW9yZSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIiwiZm9sZGVyUm9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkknbGwgaGVscCB5b3UgZml4IHRoZSBlcnJvciBpbiB0aGUgYHh1THlUaGFuaFRvYW5gIG1ldGhvZC4gVGhlIGVycm9yIG1lc3NhZ2UgaW5kaWNhdGVzIHRoYXQgdGhlcmUncyBhbiBpc3N1ZSB3aXRoIHRoZSB0aWNrZXQgZXhjaGFuZ2UgcHJvY2VzcyB3aGVyZSB0aGUgY3VzdG9tZXIgbmFtZSBpcyBlbXB0eSB3aGVuIHRyeWluZyB0byBjcmVhdGUgYSBuZXcgdGlja2V0LlxuXG5MZXQncyBleGFtaW5lIHRoZSBEb2lWZURBT0ltcGwgaW1wbGVtZW50YXRpb24gYW5kIHRoZSB4dUx5VGhhbmhUb2FuIG1ldGhvZCB0byB1bmRlcnN0YW5kIGFuZCBmaXggdGhlIGlzc3VlLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImEzODYzNDJlLTIzY2ItNGY2ZS04ZjcwLWJmZDUzMjk3Y2RhMCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUVIckNjc1ZSZnBGQUJ0b2RyRkVUNVAiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlNob3cgbWUgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBkYXRWZSBtZXRob2QgaW4gRG9pVmVEQU9JbXBsLmphdmEsIGVzcGVjaWFsbHkgYXJvdW5kIGxpbmUgMjg2IHdoZXJlIHRoZSBlcnJvciBvY2N1cnNcIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCBtZSBjaGVjayB0aGUgRG9pVmVEQU9JbXBsLmRhdFZlIG1ldGhvZCBtb3JlIHNwZWNpZmljYWxseSB0byB1bmRlcnN0YW5kIHRoZSBlcnJvcjpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvRG9pVmVEQU9JbXBsLmphdmFcbnBhY2thZ2UgZGFvLmltcGw7XG5cbmltcG9ydCBkYW8uRG9pVmVEQU87XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlNYW5hZ2VyO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW50aXR5VHJhbnNhY3Rpb247XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5Ob1Jlc3VsdEV4Y2VwdGlvbjtcbmltcG9ydCBtb2RlbC4qO1xuaW1wb3J0IHV0aWwuSlBBVXRpbDtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlbW90ZU9iamVjdDtcbmltcG9ydCBqYXZhLnRpbWUuTG9jYWxEYXRlO1xuaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5pbXBvcnQgamF2YS51dGlsLlVVSUQ7XG5cbnB1YmxpYyBjbGFzcyBEb2lWZURBT0ltcGwgZXh0ZW5kcyBVbmljYXN0UmVtb3RlT2JqZWN0IGltcGxlbWVudHMgRG9pVmVEQU8ge1xuXG4gICAgcHVibGljIERvaVZlREFPSW1wbCgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICAvLyBLaMO0bmcga2jhu59pIHThuqFvIEVudGl0eU1hbmFnZXIgdHJvbmcgY29uc3RydWN0b3JcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgVmVUYXUgZ2V0VmVUYXUoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIFZlVGF1IHZlVGF1ID0gbnVsbDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB0csaw4bubYyBk4buvIGxp4buHdSBsacOqbiBxdWFuIMSR4buDIHRyw6FuaCBs4buXaSBMYXp5SW5pdGlhbGl6YXRpb25FeGNlcHRpb25cbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgdnQgRlJPTSBWZVRhdSB2dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmxpY2hUcmluaFRhdSBsdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5jaG9OZ29pIGNuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQua2h1eWVuTWFpIGttIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggbHR0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdC50dXllblRhdSB0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdnQubWFWZSA9IDppZFwiO1xuXG4gICAgICAgICAgICB2ZVRhdSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwiaWRcIiwgaWQpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRTaW5nbGVSZXN1bHQoKTtcbi4uLlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSB0w6xtIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSB0w6xtIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVUYXU7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gZG9pVmUoVmVUYXUgdmVUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VmVUYXU+IGdldFZlVGF1QnlUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIExpc3Q8VmVUYXU+IGxpc3QgPSBuZXcgQXJyYXlMaXN0PD4oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB0csaw4bubYyBk4buvIGxp4buHdSBsacOqbiBxdWFuXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHZ0IEZST00gVmVUYXUgdnQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5saWNoVHJpbmhUYXUgbHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQuY2hvTmdvaSBjbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmtodXllbk1haSBrbSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGx0dC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHZ0LnRyYW5nVGhhaSA9IDp0cmFuZ1RoYWlcIjtcblxuICAgICAgICAgICAgbGlzdCA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpXCIsIHRyYW5nVGhhaSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIHbDqSB0aGVvIHRy4bqhbmcgdGjDoWk6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB2w6kgdGhlbyB0cuG6oW5nIHRow6FpXCIsIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gdGVzdENvbm5lY3Rpb24oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZW0uY3JlYXRlUXVlcnkoXCJTRUxFQ1QgMVwiKS5nZXRSZXN1bHRMaXN0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtp4buDbSB0cmEga+G6v3QgbuG7kWk6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBMaXN0PFRyYW5nVGhhaVZlVGF1PiBnZXRBbGxUcmFuZ1RoYWlWZSgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBMaXN0PFRyYW5nVGhhaVZlVGF1PiB0cmFuZ1RoYWlMaXN0ID0gbmV3IEFycmF5TGlzdDw+KCk7XG5cbiAgICAgICAgLy8gVGjDqm0gdOG6pXQgY+G6oyBjw6FjIGdpw6EgdHLhu4sgZW51bSBUcmFuZ1RoYWlWZVRhdVxuICAgICAgICBmb3IgKFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSA6IFRyYW5nVGhhaVZlVGF1LnZhbHVlcygpKSB7XG4gICAgICAgICAgICB0cmFuZ1RoYWlMaXN0LmFkZCh0cmFuZ1RoYWkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYW5nVGhhaUxpc3Q7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gZGF0VmUoVmVUYXUgdmVUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbi4uLlxuXG4gICAgICAgICAgICAvLyA1LiBDaGVjayBpZiB0aGUgc2VhdCBpcyBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmIChjaG9OZ29pLmlzVGluaFRyYW5nKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2luZyBKUFFMIHRvIGNoZWNrIGlmIHRoaXMgc2VhdCBpcyBhbHJlYWR5IG9jY3VwaWVkIGluIHRoaXMgc2NoZWR1bGVcbiAgICAgICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIENPVU5UKHYpIEZST00gVmVUYXUgdiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYuY2hvTmdvaS5tYUNobyA9IDptYUNobyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkFORCB2LmxpY2hUcmluaFRhdS5tYUxpY2ggPSA6bWFMaWNoIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQU5EIHYudHJhbmdUaGFpICE9IDp0cmFuZ1RoYWlIdXlcIjtcblxuICAgICAgICAgICAgICAgIExvbmcgY291bnQgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBMb25nLmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hQ2hvXCIsIG1hQ2hvTmdvaSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYUxpY2hcIiwgbWFMaWNoVHJpbmgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpSHV5XCIsIFRyYW5nVGhhaVZlVGF1LkRBX1RSQSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRTaW5nbGVSZXN1bHQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIkNo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIDYuIENoZWNrIGlmIHRoZSBzZWF0IGJlbG9uZ3MgdG8gdGhlIHRyYWluIGluIHRoaXMgc2NoZWR1bGVcbiAgICAgICAgICAgIFRhdSB0YXUgPSBsaWNoVHJpbmhUYXUuZ2V0VGF1KCk7XG4gICAgICAgICAgICBpZiAodGF1ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiTOG7i2NoIHRyw6xuaCBraMO0bmcgY8OzIHRow7RuZyB0aW4gdMOgdVwiKTtcbiAgICAgICAgICAgIH1cbi4uLlxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kgY2hpIHRp4bq/dCBraGkgxJHhurd0IHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSDEkeG6t3QgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBib29sZWFuIGh1eVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdsOpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIFZlVGF1IHZlVGF1ID0gZW0uZmluZChWZVRhdS5jbGFzcywgbWFWZSk7XG4gICAgICAgICAgICBpZiAodmVUYXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgdsOpIChjaOG7iSBo4buneSDEkcaw4bujYyB2w6kg4bufIHRy4bqhbmcgdGjDoWkgQ0hPX1hBQ19OSEFOIGhv4bq3YyBEQV9USEFOSF9UT0FOKVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTiAmJlxuICAgICAgICAgICAgICAgICAgICB2ZVRhdS5nZXRUcmFuZ1RoYWkoKSAhPSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdp4bqjaSBwaMOzbmcgY2jhu5cgbmfhu5NpXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0Q2hvTmdvaSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBDaG9OZ29pIGNob05nb2kgPSB2ZVRhdS5nZXRDaG9OZ29pKCk7XG4gICAgICAgICAgICAgICAgY2hvTmdvaS5zZXRUaW5oVHJhbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGVtLm1lcmdlKGNob05nb2kpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIERBX1RSQVxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkRBX1RSQSk7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4uLi5cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBib29sZWFuIHRoYW5oVG9hblZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdsOpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIFZlVGF1IHZlVGF1ID0gZW0uZmluZChWZVRhdS5jbGFzcywgbWFWZSk7XG4gICAgICAgICAgICBpZiAodmVUYXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgdsOpIChjaOG7iSB0aGFuaCB0b8OhbiDEkcaw4bujYyB2w6kg4bufIHRy4bqhbmcgdGjDoWkgQ0hPX1hBQ19OSEFOKVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTikge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIERBX1RIQU5IX1RPQU5cbiAgICAgICAgICAgIHZlVGF1LnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKHZlVGF1KTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gY2FwTmhhdFRyYW5nVGhhaVZlKFN0cmluZyBtYVZlLCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB2w6kgY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgVmVUYXUgdmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCBtYVZlKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqVxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKHRyYW5nVGhhaSk7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEZvciBuYXRpdmUgcXVlcmllcyB3aXRoIG5hbWVkIHBhcmFtZXRlcnMsIHVzZSA6bmFtZSBub3RhdGlvblxuICAgICAgICAgICAgU3RyaW5nIG5hdGl2ZVF1ZXJ5ID1cbiAgICAgICAgICAgICAgICAgICAgXCJTRUxFQ1Qga2guKiBGUk9NIGtoYWNoaGFuZyBraCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJKT0lOIGhvYWRvbiBoZCBPTiBoZC5tYV9raGFjaF9oYW5nID0ga2gubWFfa2hhY2hfaGFuZyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJKT0lOIGNoaXRpZXRfaG9hZG9uIGN0aGQgT04gY3RoZC5tYV9oZCA9IGhkLm1hX2hkIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGN0aGQubWFfdmUgPSA/XCI7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAga2hhY2hIYW5nID0gKEtoYWNoSGFuZykgZW0uY3JlYXRlTmF0aXZlUXVlcnkobmF0aXZlUXVlcnksIEtoYWNoSGFuZy5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoMSwgbWFWZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRTaW5nbGVSZXN1bHQoKTtcblxuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSByZWxhdGVkIGRhdGEgaXMgbG9hZGVkIGlmIG5lZWRlZFxuICAgICAgICAgICAgICAgIGlmIChraGFjaEhhbmcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBraGFjaEhhbmcuZ2V0TWFLaGFjaEhhbmcoKTsgLy8gVHJpZ2dlciBsb2FkaW5nXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgeW91IG5lZWQgdG8gbG9hZCB0aGUgbG9haUtoYWNoSGFuZyByZWxhdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoa2hhY2hIYW5nLmdldExvYWlLaGFjaEhhbmcoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBraGFjaEhhbmcuZ2V0TG9haUtoYWNoSGFuZygpLmdldE1hTG9haUtoYWNoSGFuZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGNhdGNoIChOb1Jlc3VsdEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gY3VzdG9tZXIgZm91bmQgZm9yIHRoaXMgdGlja2V0XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvQ2hvTmdvaURvaVZlREFPSW1wbC5qYXZhXG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB0csaw4bubYyBk4buvIGxp4buHdSBsacOqbiBxdWFuXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIERJU1RJTkNUIGMgRlJPTSBDaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBjLmxvYWlDaG8gbGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGMudG9hVGF1Lm1hVG9hID0gOm1hVG9hVGF1XCI7XG5cbiAgICAgICAgICAgIGRzQ2hvTmdvaSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIENob05nb2kuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYVRvYVRhdVwiLCBtYVRvYVRhdSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICAgICAgLy8gxJDhuqNtIGLhuqNvIGPDoWMgdGh14buZYyB0w61uaCBsYXp5IMSRxrDhu6NjIHThuqNpXG4gICAgICAgICAgICBmb3IgKENob05nb2kgY2hvTmdvaSA6IGRzQ2hvTmdvaSkge1xuICAgICAgICAgICAgICAgIGlmIChjaG9OZ29pLmdldExvYWlDaG8oKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNob05nb2kuZ2V0TG9haUNobygpLmdldFRlbkxvYWkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggY2jhu5cgbmfhu5NpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkc0Nob05nb2k7XG4gICAgfVxuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgQ09VTlQodikgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2LmNob05nb2kubWFDaG8gPSA6bWFDaG8gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkFORCB2LnRyYW5nVGhhaSBOT1QgSU4gKDp0cmFuZ1RoYWlEYVRyYSwgOnRyYW5nVGhhaURhRG9pKVwiO1xuXG4gICAgICAgICAgICAvLyBO4bq/dSBjw7MgbcOjIHbDqSBj4bqnbiBsb+G6oWkgdHLhu6ssIHRow6ptIMSRaeG7gXUga2nhu4duXG4gICAgICAgICAgICBpZiAobWFWZUxvYWlUcnUgIT0gbnVsbCAmJiAhbWFWZUxvYWlUcnUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAganBxbCArPSBcIiBBTkQgdi5tYVZlICE9IDptYVZlTG9haVRydVwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBRdWVyeSBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibWFDaG9cIiwgbWFDaG8pXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlEYVRyYVwiLCBUcmFuZ1RoYWlWZVRhdS5EQV9UUkEpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlEYURvaVwiLCBUcmFuZ1RoYWlWZVRhdS5EQV9ET0kpO1xuXG4gICAgICAgICAgICBpZiAobWFWZUxvYWlUcnUgIT0gbnVsbCAmJiAhbWFWZUxvYWlUcnUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibWFWZUxvYWlUcnVcIiwgbWFWZUxvYWlUcnUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBMb25nIGNvdW50ID0gKExvbmcpIHF1ZXJ5LmdldFNpbmdsZVJlc3VsdCgpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiBjb3VudCA+IDA7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkga2nhu4NtIHRyYSBjaOG7lyBuZ+G7k2kgxJHDoyDEkeG6t3QgdHLDqm4gaOG7hyB0aOG7kW5nOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBMaXN0PFN0cmluZz4gbGF5RGFuaFNhY2hMaWNoVHJpbmhEYURhdENobyhTdHJpbmcgbWFDaG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9UcmFDdXVWZURBT0ltcGwuamF2YVxuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpQUUwgduG7m2kgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB04bqldCBj4bqjIGThu68gbGnhu4d1IGPhuqduIHRoaeG6v3QgdHJvbmcgbeG7mXQgY8OidSBxdWVyeVxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCB2IEZST00gVmVUYXUgdiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB2LmxpY2hUcmluaFRhdSBsdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCBsdC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB0LnR1eWVuVGF1IHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYuY2hvTmdvaSBjIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggYy50b2FUYXUgdG9hIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdG9hLmxvYWlUb2EgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYubWFWZSA9IDptYVZlXCI7XG5cbiAgICAgICAgICAgIFR5cGVkUXVlcnk8VmVUYXU+IHF1ZXJ5ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibWFWZVwiLCBtYVZlKTtcblxuICAgICAgICAgICAgLy8gZ2V0U2luZ2xlUmVzdWx0KCkgY8OzIHRo4buDIG7DqW0gTm9SZXN1bHRFeGNlcHRpb24gbuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5IGvhur90IHF14bqjXG4gICAgICAgICAgICAvLyBuw6puIGNow7puZyB0YSBj4bqnbiBi4bqvdCBuZ2/huqFpIGzhu4cgbsOgeSB2w6AgeOG7rSBsw71cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmVUYXUgPSBxdWVyeS5nZXRTaW5nbGVSZXN1bHQoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGpha2FydGEucGVyc2lzdGVuY2UuTm9SZXN1bHRFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgIC8vIEtow7RuZyB0w6xtIHRo4bqleSB2w6ksIHRy4bqjIHbhu4EgbnVsbFxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSB0w6xtIGRhbmggc8OhY2ggdsOpIHTDoHUgdGhlbyBtw6M6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgdMOsbSBkYW5oIHPDoWNoIHbDqSB0w6B1IHRoZW8gbcOjXCIsIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhbmhTYWNoVmVUYXU7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIENoaVRpZXRIb2FEb24gdGltQ2hpVGlldEhvYURvblRoZW9NYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBDaGlUaWV0SG9hRG9uIGNoaVRpZXRIb2FEb24gPSBudWxsO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKUFFMIMSR4buDIGzhuqV5IGNoaSB0aeG6v3QgaMOzYSDEkcahbiBt4bubaSBuaOG6pXQgdGhlbyBuZ8OgeSBs4bqtcFxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCBjIEZST00gQ2hpVGlldEhvYURvbiBjIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGMuaG9hRG9uIGggXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggYy52ZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSBjLmlkLm1hVmUgPSA6bWFWZSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiT1JERVIgQlkgaC5uZ2F5TGFwIERFU0NcIjsgIC8vIFPhuq9wIHjhur9wIHRoZW8gbmfDoHkgbOG6rXAgaMOzYSDEkcahbiBt4bubaSBuaOG6pXRcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9UcmFWZURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW50aXR5TWFuYWdlcjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLk5vUmVzdWx0RXhjZXB0aW9uO1xuaW1wb3J0IHV0aWwuSlBBVXRpbDtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlbW90ZU9iamVjdDtcblxucHVibGljIGNsYXNzIFRyYVZlREFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBkYW8uVHJhVmVEQU8ge1xuICAgIHByaXZhdGUgRW50aXR5TWFuYWdlciBlbTtcblxuICAgIHB1YmxpYyBUcmFWZURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgdGhpcy5lbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBTdHJpbmcgZ2V0VGVuVHV5ZW5CeU1hVmUoU3RyaW5nIG1hVmUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJcIlwiXG4gICAgICAgICAgICBTRUxFQ1QgdHQudGVuVHV5ZW5cbiAgICAgICAgICAgIEZST00gVmVUYXUgdnRcbiAgICAgICAgICAgIEpPSU4gdnQubGljaFRyaW5oVGF1IGx0dFxuICAgICAgICAgICAgSk9JTiBsdHQudGF1IHRcbiAgICAgICAgICAgIEpPSU4gdC50dXllblRhdSB0dFxuICAgICAgICAgICAgV0hFUkUgdnQubWFWZSA9IDptYVZlXG4gICAgICAgIFwiXCJcIjtcblxuICAgICAgICAgICAgcmV0dXJuIGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFN0cmluZy5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hVmVcIiwgbWFWZSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuICAgICAgICB9IGNhdGNoIChOb1Jlc3VsdEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gS2jDtG5nIHTDrG0gdGjhuqV5XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9Ub2FUYXVEb2lWZURBT0ltcGwuamF2YVxuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIFThu5FpIMawdSBxdWVyeSDEkeG7gyBjaOG7iSBs4bqleSBk4buvIGxp4buHdSBj4bqnbiB0aGnhur90XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIERJU1RJTkNUIHQgRlJPTSBUb2FUYXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHQubG9haVRvYSBsYyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHQudGF1IHRhIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB0LnRhdS5tYVRhdSA9IDptYVRhdVwiO1xuXG4gICAgICAgICAgICBMaXN0PFRvYVRhdT4gZHNUb2FUYXUgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBUb2FUYXUuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYVRhdVwiLCBtYVRhdSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICAgICAgLy8gQ2jhu4kgdOG6o2kgbmjhu69uZyB0aHXhu5ljIHTDrW5oIHRo4buxYyBz4buxIGPhuqduIHRoaeG6v3RcbiAgICAgICAgICAgIGZvciAoVG9hVGF1IHRvYVRhdSA6IGRzVG9hVGF1KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvYVRhdS5nZXRMb2FpVG9hKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0b2FUYXUuZ2V0TG9haVRvYSgpLmdldFRlbkxvYWkoKTtcbiAgICAgICAgICAgICAgICAgICAgdG9hVGF1LmdldExvYWlUb2EoKS5nZXRNYUxvYWkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRvYVRhdS5nZXRUYXUoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYVRhdS5nZXRUYXUoKS5nZXRNYVRhdSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG5cbiAgICAgICAgICAgIC8vIEzGsHUga+G6v3QgcXXhuqMgdsOgbyBjYWNoZVxuICAgICAgICAgICAgdXBkYXRlQ2FjaGUobWFUYXUsIGRzVG9hVGF1KTtcblxuICAgICAgICAgICAgcmV0dXJuIGRzVG9hVGF1O1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvTGljaFRyaW5oVGF1REFPSW1wbC5qYXZhXG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHIuYmVnaW4oKTtcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpPSU4gRkVUQ0ggxJHhu4MgdHLDoW5oIGzhu5dpIExhenlJbml0aWFsaXphdGlvbkV4Y2VwdGlvblxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCBsdHQgRlJPTSBMaWNoVHJpbmhUYXUgbHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0dC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB0LnR1eWVuVGF1IHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSBsdHQubmdheURpID0gOmRhdGVcIjtcblxuICAgICAgICAgICAgbGlzdCA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIExpY2hUcmluaFRhdS5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcImRhdGVcIiwgZGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICAgICAgdHIuY29tbWl0KCk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHIgIT0gbnVsbCAmJiB0ci5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHIucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIExpY2hUcmluaFRhdSB0aGVvIG5nw6B5OiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggTGljaFRyaW5oVGF1IHRoZW8gbmfDoHlcIiwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL1ZlVGF1REFPSW1wbC5qYXZhXG4uLi5cblxucHVibGljIGNsYXNzIFZlVGF1REFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBWZVRhdURBTyB7XG4gICAgcHVibGljIFZlVGF1REFPSW1wbCgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VmVUYXU+IGdldEFsbExpc3QoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIExpc3Q8VmVUYXU+IGxpc3QgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcbiAgICAgICAgICAgIGxpc3QgPSBlbS5jcmVhdGVRdWVyeShcIlNFTEVDVCB2dCBGUk9NIFZlVGF1IHZ0XCIsIFZlVGF1LmNsYXNzKS5nZXRSZXN1bHRMaXN0KCk7XG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCBWZVRhdVwiKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFZlVGF1IGdldEJ5SWQoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICByZXR1cm4gZW0uZmluZChWZVRhdS5jbGFzcywgaWQpO1xuICAgIH1cbi4uLlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVzFGVUU3dFNvaDNCaWF2N25iMXFhQSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIiwiZm9sZGVyUm9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkxldCBtZSBjaGVjayB0aGUgRG9pVmVEQU9JbXBsLmRhdFZlIG1ldGhvZCBtb3JlIHNwZWNpZmljYWxseSB0byB1bmRlcnN0YW5kIHRoZSBlcnJvcjpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhYmQ1YjY1Mi05MzBiLTQ3NmEtODE0Ny01OGU3MWIyYWJlOWIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFUUHRwM1VzcU45Z2hoOXZiVUVpaXB5IiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTaG93IG1lIHRoZSB4dUx5VGhhbmhUb2FuIG1ldGhvZCBpbiBEb2lWZVBhbmVsLmphdmEsIGVzcGVjaWFsbHkgYXJvdW5kIGxpbmUgMjg4OSB3aGVyZSB0aGUgZXJyb3Igb2NjdXJzXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJMZXQgbWUgY2hlY2sgdGhlIERvaVZlUGFuZWwueHVMeVRoYW5oVG9hbiBtZXRob2QgdG8gdW5kZXJzdGFuZCBob3cgaXQncyBjYWxsaW5nIHRoZSBkYXRWZSBtZXRob2Q6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL0RvaVZlREFPSW1wbC5qYXZhXG5wYWNrYWdlIGRhby5pbXBsO1xuXG5pbXBvcnQgZGFvLkRvaVZlREFPO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW50aXR5TWFuYWdlcjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eVRyYW5zYWN0aW9uO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuTm9SZXN1bHRFeGNlcHRpb247XG5pbXBvcnQgbW9kZWwuKjtcbmltcG9ydCB1dGlsLkpQQVV0aWw7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS5ybWkuc2VydmVyLlVuaWNhc3RSZW1vdGVPYmplY3Q7XG5pbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZTtcbmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0O1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuaW1wb3J0IGphdmEudXRpbC5VVUlEO1xuXG5wdWJsaWMgY2xhc3MgRG9pVmVEQU9JbXBsIGV4dGVuZHMgVW5pY2FzdFJlbW90ZU9iamVjdCBpbXBsZW1lbnRzIERvaVZlREFPIHtcblxuICAgIHB1YmxpYyBEb2lWZURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgLy8gS2jDtG5nIGto4bufaSB04bqhbyBFbnRpdHlNYW5hZ2VyIHRyb25nIGNvbnN0cnVjdG9yXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFZlVGF1IGdldFZlVGF1KFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICBWZVRhdSB2ZVRhdSA9IG51bGw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpPSU4gRkVUQ0ggxJHhu4MgdOG6o2kgdHLGsOG7m2MgZOG7ryBsaeG7h3UgbGnDqm4gcXVhbiDEkeG7gyB0csOhbmggbOG7l2kgTGF6eUluaXRpYWxpemF0aW9uRXhjZXB0aW9uXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHZ0IEZST00gVmVUYXUgdnQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5saWNoVHJpbmhUYXUgbHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQuY2hvTmdvaSBjbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmtodXllbk1haSBrbSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGx0dC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHZ0Lm1hVmUgPSA6aWRcIjtcblxuICAgICAgICAgICAgdmVUYXUgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBWZVRhdS5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcImlkXCIsIGlkKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0U2luZ2xlUmVzdWx0KCk7XG5cbiAgICAgICAgICAgIC8vIMSQ4bqjbSBi4bqjbyBk4buvIGxp4buHdSDEkcOjIMSRxrDhu6NjIHThuqNpIMSR4bqneSDEkeG7p1xuICAgICAgICAgICAgaWYgKHZlVGF1LmdldExpY2hUcmluaFRhdSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2ZVRhdS5nZXRMaWNoVHJpbmhUYXUoKS5nZXRNYUxpY2goKTtcbiAgICAgICAgICAgICAgICBpZiAodmVUYXUuZ2V0TGljaFRyaW5oVGF1KCkuZ2V0VGF1KCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2ZVRhdS5nZXRMaWNoVHJpbmhUYXUoKS5nZXRUYXUoKS5nZXRNYVRhdSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmVUYXUuZ2V0TGljaFRyaW5oVGF1KCkuZ2V0VGF1KCkuZ2V0VHV5ZW5UYXUoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZVRhdS5nZXRMaWNoVHJpbmhUYXUoKS5nZXRUYXUoKS5nZXRUdXllblRhdSgpLmdldEdhRGkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlVGF1LmdldExpY2hUcmluaFRhdSgpLmdldFRhdSgpLmdldFR1eWVuVGF1KCkuZ2V0R2FEZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldENob05nb2koKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmVUYXUuZ2V0Q2hvTmdvaSgpLmdldE1hQ2hvKCk7XG4gICAgICAgICAgICAgICAgdmVUYXUuZ2V0Q2hvTmdvaSgpLmdldEdpYVRpZW4oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldEtodXllbk1haSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2ZVRhdS5nZXRLaHV5ZW5NYWkoKS5nZXRNYUtNKCk7XG4gICAgICAgICAgICAgICAgdmVUYXUuZ2V0S2h1eWVuTWFpKCkuZ2V0Q2hpZXRLaGF1KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChOb1Jlc3VsdEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICAvLyBLaMO0bmcgdMOsbSB0aOG6pXkgdsOpXG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgdMOsbSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgdMOsbSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZlVGF1O1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBib29sZWFuIGRvaVZlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdsOpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIFZlVGF1IGV4aXN0aW5nVmUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCB2ZVRhdS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nVmUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgdsOpIChjaOG7iSDEkeG7lWkgxJHGsOG7o2MgdsOpIERBX1RIQU5IX1RPQU4pXG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdWZS5nZXRUcmFuZ1RoYWkoKSAhPSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEzGsHUgdGjDtG5nIHRpbiBjaOG7lyBuZ+G7k2kgdsOgIGzhu4tjaCB0csOsbmggY8WpXG4gICAgICAgICAgICBDaG9OZ29pIGNob05nb2lDdSA9IGV4aXN0aW5nVmUuZ2V0Q2hvTmdvaSgpO1xuICAgICAgICAgICAgTGljaFRyaW5oVGF1IGxpY2hUcmluaEN1ID0gZXhpc3RpbmdWZS5nZXRMaWNoVHJpbmhUYXUoKTtcbi4uLlxuXG4gICAgICAgICAgICAgICAgaWYgKCFnaXVOZ3V5ZW5DaG9WYUxpY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSBjaOG7lyBuZ+G7k2kgbeG7m2kgY8OzIGto4bqjIGThu6VuZyBraMO0bmdcbiAgICAgICAgICAgICAgICAgICAgQ2hvTmdvaSBjaG9OZ29pID0gZW0uZmluZChDaG9OZ29pLmNsYXNzLCBtYUNob05nb2kpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hvTmdvaSA9PSBudWxsIHx8ICFjaG9OZ29pLmlzVGluaFRyYW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiQ2jhu5cgbmfhu5NpIGtow7RuZyBraOG6oyBk4bulbmcgaG/hurdjIMSRYW5nIHPhu61hIGNo4buvYS5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBLaeG7g20gdHJhIGNo4buXIG5n4buTaSBt4bubaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCB0cm9uZyBs4buLY2ggdHLDrG5oIG3hu5tpIGNoxrBhXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgQ09VTlQodikgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYuY2hvTmdvaS5tYUNobyA9IDptYUNobyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJBTkQgdi5saWNoVHJpbmhUYXUubWFMaWNoID0gOm1hTGljaFRyaW5oIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFORCB2Lm1hVmUgIT0gOm1hVmUgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQU5EIHYudHJhbmdUaGFpIE5PVCBJTiAoOnRyYW5nVGhhaURhVHJhKVwiO1xuXG4gICAgICAgICAgICAgICAgICAgIExvbmcgY291bnQgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBMb25nLmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYUNob1wiLCBtYUNob05nb2kpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hTGljaFRyaW5oXCIsIG1hTGljaFRyaW5oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYVZlXCIsIHZlVGF1LmdldE1hVmUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpRGFUcmFcIiwgVHJhbmdUaGFpVmVUYXUuREFfVFJBKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRTaW5nbGVSZXN1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkNo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaC5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIGPGoSBi4bqjblxuICAgICAgICAgICAgZXhpc3RpbmdWZS5zZXRUZW5LaGFjaEhhbmcodmVUYXUuZ2V0VGVuS2hhY2hIYW5nKCkpO1xuICAgICAgICAgICAgZXhpc3RpbmdWZS5zZXRHaWF5VG8odmVUYXUuZ2V0R2lheVRvKCkpO1xuICAgICAgICAgICAgZXhpc3RpbmdWZS5zZXROZ2F5RGkodmVUYXUuZ2V0TmdheURpKCkpO1xuICAgICAgICAgICAgZXhpc3RpbmdWZS5zZXREb2lUdW9uZyh2ZVRhdS5nZXREb2lUdW9uZygpKTtcbiAgICAgICAgICAgIGV4aXN0aW5nVmUuc2V0VHJhbmdUaGFpKHZlVGF1LmdldFRyYW5nVGhhaSgpKTtcbiAgICAgICAgICAgIGV4aXN0aW5nVmUuc2V0R2lhVmUodmVUYXUuZ2V0R2lhVmUoKSk7XG5cbiAgICAgICAgICAgIC8vIFjDs2EgYuG7jyBsacOqbiBr4bq/dCB24bubaSBjaOG7lyBuZ+G7k2kgaGnhu4duIHThuqFpXG4gICAgICAgICAgICBleGlzdGluZ1ZlLnNldENob05nb2kobnVsbCk7XG4gICAgICAgICAgICBlbS5mbHVzaCgpOyAvLyDEkOG6qXkgdGhheSDEkeG7lWkgeHXhu5FuZyBEQlxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgbOG7i2NoIHRyw6xuaCB2w6Aga2h1eeG6v24gbcOjaVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldExpY2hUcmluaFRhdSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBMaWNoVHJpbmhUYXUgbGljaFRyaW5oVGF1ID0gZW0uZmluZChMaWNoVHJpbmhUYXUuY2xhc3MsIHZlVGF1LmdldExpY2hUcmluaFRhdSgpLmdldE1hTGljaCgpKTtcbiAgICAgICAgICAgICAgICBleGlzdGluZ1ZlLnNldExpY2hUcmluaFRhdShsaWNoVHJpbmhUYXUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0S2h1eWVuTWFpKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIEtodXllbk1haSBraHV5ZW5NYWkgPSBlbS5maW5kKEtodXllbk1haS5jbGFzcywgdmVUYXUuZ2V0S2h1eWVuTWFpKCkuZ2V0TWFLTSgpKTtcbiAgICAgICAgICAgICAgICBleGlzdGluZ1ZlLnNldEtodXllbk1haShraHV5ZW5NYWkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZ1ZlLnNldEtodXllbk1haShudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IGNo4buXIG5n4buTaSBt4bubaVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldENob05nb2koKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgQ2hvTmdvaSBjaG9OZ29pID0gZW0uZmluZChDaG9OZ29pLmNsYXNzLCB2ZVRhdS5nZXRDaG9OZ29pKCkuZ2V0TWFDaG8oKSk7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdWZS5zZXRDaG9OZ29pKGNob05nb2kpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbS5tZXJnZShleGlzdGluZ1ZlKTtcbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIMSR4buVaSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgxJHhu5VpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxWZVRhdT4gZ2V0VmVUYXVCeVRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgTGlzdDxWZVRhdT4gbGlzdCA9IG5ldyBBcnJheUxpc3Q8PigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKT0lOIEZFVENIIMSR4buDIHThuqNpIHRyxrDhu5tjIGThu68gbGnhu4d1IGxpw6puIHF1YW5cbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgdnQgRlJPTSBWZVRhdSB2dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmxpY2hUcmluaFRhdSBsdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5jaG9OZ29pIGNuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQua2h1eWVuTWFpIGttIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggbHR0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdC50dXllblRhdSB0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdnQudHJhbmdUaGFpID0gOnRyYW5nVGhhaVwiO1xuXG4gICAgICAgICAgICBsaXN0ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlcIiwgdHJhbmdUaGFpKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0UmVzdWx0TGlzdCgpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggdsOpIHRoZW8gdHLhuqFuZyB0aMOhaTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIHbDqSB0aGVvIHRy4bqhbmcgdGjDoWlcIiwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiB0ZXN0Q29ubmVjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlbS5jcmVhdGVRdWVyeShcIlNFTEVDVCAxXCIpLmdldFJlc3VsdExpc3QoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2nhu4NtIHRyYSBr4bq/dCBu4buRaTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VHJhbmdUaGFpVmVUYXU+IGdldEFsbFRyYW5nVGhhaVZlKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIExpc3Q8VHJhbmdUaGFpVmVUYXU+IHRyYW5nVGhhaUxpc3QgPSBuZXcgQXJyYXlMaXN0PD4oKTtcblxuICAgICAgICAvLyBUaMOqbSB04bqldCBj4bqjIGPDoWMgZ2nDoSB0cuG7iyBlbnVtIFRyYW5nVGhhaVZlVGF1XG4gICAgICAgIGZvciAoVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpIDogVHJhbmdUaGFpVmVUYXUudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHRyYW5nVGhhaUxpc3QuYWRkKHRyYW5nVGhhaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbmdUaGFpTGlzdDtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBkYXRWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuLi4uXG5cbiAgICAgICAgICAgIC8vIDUuIENoZWNrIGlmIHRoZSBzZWF0IGlzIGF2YWlsYWJsZVxuICAgICAgICAgICAgaWYgKGNob05nb2kuaXNUaW5oVHJhbmcoKSkge1xuICAgICAgICAgICAgICAgIC8vIFVzaW5nIEpQUUwgdG8gY2hlY2sgaWYgdGhpcyBzZWF0IGlzIGFscmVhZHkgb2NjdXBpZWQgaW4gdGhpcyBzY2hlZHVsZVxuICAgICAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgQ09VTlQodikgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdi5jaG9OZ29pLm1hQ2hvID0gOm1hQ2hvIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQU5EIHYubGljaFRyaW5oVGF1Lm1hTGljaCA9IDptYUxpY2ggXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJBTkQgdi50cmFuZ1RoYWkgIT0gOnRyYW5nVGhhaUh1eVwiO1xuXG4gICAgICAgICAgICAgICAgTG9uZyBjb3VudCA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIExvbmcuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFDaG9cIiwgbWFDaG9OZ29pKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hTGljaFwiLCBtYUxpY2hUcmluaClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlIdXlcIiwgVHJhbmdUaGFpVmVUYXUuREFfVFJBKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gNi4gQ2hlY2sgaWYgdGhlIHNlYXQgYmVsb25ncyB0byB0aGUgdHJhaW4gaW4gdGhpcyBzY2hlZHVsZVxuICAgICAgICAgICAgVGF1IHRhdSA9IGxpY2hUcmluaFRhdS5nZXRUYXUoKTtcbiAgICAgICAgICAgIGlmICh0YXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJM4buLY2ggdHLDrG5oIGtow7RuZyBjw7MgdGjDtG5nIHRpbiB0w6B1XCIpO1xuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICAgICAgICAgIC8vIDcuIEdlbmVyYXRlIHRpY2tldCBJRCBpZiBub3QgcHJvdmlkZWRcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRNYVZlKCkgPT0gbnVsbCB8fCB2ZVRhdS5nZXRNYVZlKCkuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgU3RyaW5nIG1hVmUgPSBcIlZFXCIgKyBVVUlELnJhbmRvbVVVSUQoKS50b1N0cmluZygpLnN1YnN0cmluZygwLCA4KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHZlVGF1LnNldE1hVmUobWFWZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSB0aWNrZXQgSUQgYWxyZWFkeSBleGlzdHNcbiAgICAgICAgICAgICAgICBWZVRhdSBleGlzdGluZ1ZlVGF1ID0gZW0uZmluZChWZVRhdS5jbGFzcywgdmVUYXUuZ2V0TWFWZSgpKTtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdWZVRhdSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJNw6MgdsOpIMSRw6MgdOG7k24gdOG6oWkgdHJvbmcgaOG7hyB0aOG7kW5nXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gOC4gU2V0IHVwIHRpY2tldCBkYXRhIHdpdGggdmFsaWQgZW50aXRpZXNcbiAgICAgICAgICAgIHZlVGF1LnNldENob05nb2koY2hvTmdvaSk7XG4gICAgICAgICAgICB2ZVRhdS5zZXRMaWNoVHJpbmhUYXUobGljaFRyaW5oVGF1KTtcblxuICAgICAgICAgICAgLy8gU2V0IGRlZmF1bHQgc3RhdHVzIGlmIG5vdCBwcm92aWRlZFxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldFRyYW5nVGhhaSgpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2ZVRhdS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKTtcbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgICAgICAgICB2ZVRhdS5zZXRHaWFWZShnaWFWZSk7XG5cbiAgICAgICAgICAgIC8vIDEwLiBNYXJrIHNlYXQgYXMgb2NjdXBpZWRcbiAgICAgICAgICAgIGNob05nb2kuc2V0VGluaFRyYW5nKHRydWUpO1xuICAgICAgICAgICAgZW0ubWVyZ2UoY2hvTmdvaSk7XG5cbiAgICAgICAgICAgIC8vIDExLiBTYXZlIHRoZSB0aWNrZXQgd2l0aCBKUEFcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIkzGsHUgdsOpIG3hu5tpIHbhu5tpIG3DozogXCIgKyB2ZVRhdS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiQ2jhu5cgbmfhu5NpOiBcIiArIGNob05nb2kuZ2V0TWFDaG8oKSArIFwiIC0gXCIgKyBjaG9OZ29pLmdldFRlbkNobygpKTtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIkzhu4tjaCB0csOsbmg6IFwiICsgbGljaFRyaW5oVGF1LmdldE1hTGljaCgpICsgXCIgLSBUw6B1OiBcIiArIHRhdS5nZXRNYVRhdSgpKTtcblxuICAgICAgICAgICAgLy8gUGVyc2lzdCB0aGUgdGlja2V0XG4gICAgICAgICAgICBlbS5wZXJzaXN0KHZlVGF1KTtcblxuICAgICAgICAgICAgLy8gRmx1c2ggdG8gZGV0ZWN0IGFueSBpc3N1ZXNcbiAgICAgICAgICAgIGVtLmZsdXNoKCk7XG4gICAgICAgICAgICB0eC5jb21taXQoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHbDqSBjw7MgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICBWZVRhdSB2ZVRhdSA9IGVtLmZpbmQoVmVUYXUuY2xhc3MsIG1hVmUpO1xuICAgICAgICAgICAgaWYgKHZlVGF1ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHbDqSAoY2jhu4kgaOG7p3kgxJHGsOG7o2MgdsOpIOG7nyB0cuG6oW5nIHRow6FpIENIT19YQUNfTkhBTiBob+G6t2MgREFfVEhBTkhfVE9BTilcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRUcmFuZ1RoYWkoKSAhPSBUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4gJiZcbiAgICAgICAgICAgICAgICAgICAgdmVUYXUuZ2V0VHJhbmdUaGFpKCkgIT0gVHJhbmdUaGFpVmVUYXUuREFfVEhBTkhfVE9BTikge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHaeG6o2kgcGjDs25nIGNo4buXIG5n4buTaVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldENob05nb2koKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgQ2hvTmdvaSBjaG9OZ29pID0gdmVUYXUuZ2V0Q2hvTmdvaSgpO1xuICAgICAgICAgICAgICAgIGNob05nb2kuc2V0VGluaFRyYW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBlbS5tZXJnZShjaG9OZ29pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpIHRow6BuaCBEQV9UUkFcbiAgICAgICAgICAgIHZlVGF1LnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5EQV9UUkEpO1xuICAgICAgICAgICAgZW0ubWVyZ2UodmVUYXUpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiB0aGFuaFRvYW5WZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHbDqSBjw7MgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICBWZVRhdSB2ZVRhdSA9IGVtLmZpbmQoVmVUYXUuY2xhc3MsIG1hVmUpO1xuICAgICAgICAgICAgaWYgKHZlVGF1ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHbDqSAoY2jhu4kgdGhhbmggdG/DoW4gxJHGsOG7o2MgdsOpIOG7nyB0cuG6oW5nIHRow6FpIENIT19YQUNfTkhBTilcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRUcmFuZ1RoYWkoKSAhPSBUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpIHRow6BuaCBEQV9USEFOSF9UT0FOXG4gICAgICAgICAgICB2ZVRhdS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuREFfVEhBTkhfVE9BTik7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4uLi5cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBib29sZWFuIGNhcE5oYXRUcmFuZ1RoYWlWZShTdHJpbmcgbWFWZSwgVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdsOpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIFZlVGF1IHZlVGF1ID0gZW0uZmluZChWZVRhdS5jbGFzcywgbWFWZSk7XG4gICAgICAgICAgICBpZiAodmVUYXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6lcbiAgICAgICAgICAgIHZlVGF1LnNldFRyYW5nVGhhaSh0cmFuZ1RoYWkpO1xuICAgICAgICAgICAgZW0ubWVyZ2UodmVUYXUpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBGb3IgbmF0aXZlIHF1ZXJpZXMgd2l0aCBuYW1lZCBwYXJhbWV0ZXJzLCB1c2UgOm5hbWUgbm90YXRpb25cbiAgICAgICAgICAgIFN0cmluZyBuYXRpdmVRdWVyeSA9XG4gICAgICAgICAgICAgICAgICAgIFwiU0VMRUNUIGtoLiogRlJPTSBraGFjaGhhbmcga2ggXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiSk9JTiBob2Fkb24gaGQgT04gaGQubWFfa2hhY2hfaGFuZyA9IGtoLm1hX2toYWNoX2hhbmcgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiSk9JTiBjaGl0aWV0X2hvYWRvbiBjdGhkIE9OIGN0aGQubWFfaGQgPSBoZC5tYV9oZCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSBjdGhkLm1hX3ZlID0gP1wiO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGtoYWNoSGFuZyA9IChLaGFjaEhhbmcpIGVtLmNyZWF0ZU5hdGl2ZVF1ZXJ5KG5hdGl2ZVF1ZXJ5LCBLaGFjaEhhbmcuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKDEsIG1hVmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0U2luZ2xlUmVzdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBFbnN1cmUgcmVsYXRlZCBkYXRhIGlzIGxvYWRlZCBpZiBuZWVkZWRcbiAgICAgICAgICAgICAgICBpZiAoa2hhY2hIYW5nICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAga2hhY2hIYW5nLmdldE1hS2hhY2hIYW5nKCk7IC8vIFRyaWdnZXIgbG9hZGluZ1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHlvdSBuZWVkIHRvIGxvYWQgdGhlIGxvYWlLaGFjaEhhbmcgcmVsYXRpb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKGtoYWNoSGFuZy5nZXRMb2FpS2hhY2hIYW5nKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAga2hhY2hIYW5nLmdldExvYWlLaGFjaEhhbmcoKS5nZXRNYUxvYWlLaGFjaEhhbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBjYXRjaCAoTm9SZXN1bHRFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgIC8vIE5vIGN1c3RvbWVyIGZvdW5kIGZvciB0aGlzIHRpY2tldFxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL1RyYUN1dVZlREFPSW1wbC5qYXZhXG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSlBRTCB24bubaSBKT0lOIEZFVENIIMSR4buDIHThuqNpIHThuqV0IGPhuqMgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dCB0cm9uZyBt4buZdCBjw6J1IHF1ZXJ5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHYgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYubGljaFRyaW5oVGF1IGx0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5jaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBjLnRvYVRhdSB0b2EgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB0b2EubG9haVRvYSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdi5tYVZlID0gOm1hVmVcIjtcblxuICAgICAgICAgICAgVHlwZWRRdWVyeTxWZVRhdT4gcXVlcnkgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBWZVRhdS5jbGFzcyk7XG4gICAgICAgICAgICBxdWVyeS5zZXRQYXJhbWV0ZXIoXCJtYVZlXCIsIG1hVmUpO1xuXG4gICAgICAgICAgICAvLyBnZXRTaW5nbGVSZXN1bHQoKSBjw7MgdGjhu4MgbsOpbSBOb1Jlc3VsdEV4Y2VwdGlvbiBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkga+G6v3QgcXXhuqNcbiAgICAgICAgICAgIC8vIG7Dqm4gY2jDum5nIHRhIGPhuqduIGLhuq90IG5nb+G6oWkgbOG7hyBuw6B5IHbDoCB44butIGzDvVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2ZVRhdSA9IHF1ZXJ5LmdldFNpbmdsZVJlc3VsdCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoamFrYXJ0YS5wZXJzaXN0ZW5jZS5Ob1Jlc3VsdEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICAgICAgLy8gS2jDtG5nIHTDrG0gdGjhuqV5IHbDqSwgdHLhuqMgduG7gSBudWxsXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvQ2hvTmdvaURvaVZlREFPSW1wbC5qYXZhXG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB0csaw4bubYyBk4buvIGxp4buHdSBsacOqbiBxdWFuXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIERJU1RJTkNUIGMgRlJPTSBDaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBjLmxvYWlDaG8gbGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGMudG9hVGF1Lm1hVG9hID0gOm1hVG9hVGF1XCI7XG5cbiAgICAgICAgICAgIGRzQ2hvTmdvaSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIENob05nb2kuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYVRvYVRhdVwiLCBtYVRvYVRhdSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICAgICAgLy8gxJDhuqNtIGLhuqNvIGPDoWMgdGh14buZYyB0w61uaCBsYXp5IMSRxrDhu6NjIHThuqNpXG4gICAgICAgICAgICBmb3IgKENob05nb2kgY2hvTmdvaSA6IGRzQ2hvTmdvaSkge1xuICAgICAgICAgICAgICAgIGlmIChjaG9OZ29pLmdldExvYWlDaG8oKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNob05nb2kuZ2V0TG9haUNobygpLmdldFRlbkxvYWkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggY2jhu5cgbmfhu5NpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkc0Nob05nb2k7XG4gICAgfVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL1RyYVZlREFPSW1wbC5qYXZhXG5wYWNrYWdlIGRhby5pbXBsO1xuXG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlNYW5hZ2VyO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuTm9SZXN1bHRFeGNlcHRpb247XG5pbXBvcnQgdXRpbC5KUEFVdGlsO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEucm1pLnNlcnZlci5VbmljYXN0UmVtb3RlT2JqZWN0O1xuXG5wdWJsaWMgY2xhc3MgVHJhVmVEQU9JbXBsIGV4dGVuZHMgVW5pY2FzdFJlbW90ZU9iamVjdCBpbXBsZW1lbnRzIGRhby5UcmFWZURBTyB7XG4gICAgcHJpdmF0ZSBFbnRpdHlNYW5hZ2VyIGVtO1xuXG4gICAgcHVibGljIFRyYVZlREFPSW1wbCgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICB0aGlzLmVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFN0cmluZyBnZXRUZW5UdXllbkJ5TWFWZShTdHJpbmcgbWFWZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlwiXCJcbiAgICAgICAgICAgIFNFTEVDVCB0dC50ZW5UdXllblxuICAgICAgICAgICAgRlJPTSBWZVRhdSB2dFxuICAgICAgICAgICAgSk9JTiB2dC5saWNoVHJpbmhUYXUgbHR0XG4gICAgICAgICAgICBKT0lOIGx0dC50YXUgdFxuICAgICAgICAgICAgSk9JTiB0LnR1eWVuVGF1IHR0XG4gICAgICAgICAgICBXSEVSRSB2dC5tYVZlID0gOm1hVmVcbiAgICAgICAgXCJcIlwiO1xuXG4gICAgICAgICAgICByZXR1cm4gZW0uY3JlYXRlUXVlcnkoanBxbCwgU3RyaW5nLmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFWZVwiLCBtYVZlKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0U2luZ2xlUmVzdWx0KCk7XG4gICAgICAgIH0gY2F0Y2ggKE5vUmVzdWx0RS4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUVIckNjc1ZSZnBGQUJ0b2RyRkVUNVAifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyIsImZvbGRlclJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiJMZXQgbWUgY2hlY2sgdGhlIERvaVZlUGFuZWwueHVMeVRoYW5oVG9hbiBtZXRob2QgdG8gdW5kZXJzdGFuZCBob3cgaXQncyBjYWxsaW5nIHRoZSBkYXRWZSBtZXRob2Q6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZjY2NWM4Y2EtYmE3NC00ZjU2LTg2MDAtM2I3YTNlNDE5NDNkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxOG12clNteHRNdTdMdG1VVEh4MWNpdiIsInRvb2xfbmFtZSI6InNhdmUtZmlsZSIsImlucHV0X2pzb24iOiJ7XCJmaWxlX3BhdGhcIjogXCJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsX0ZpeC5qYXZhXCIsIFwiZmlsZV9jb250ZW50XCI6IFwiLy8gVGhpcyBpcyBhIGZpeCBmb3IgdGhlIHh1THlUaGFuaFRvYW4gbWV0aG9kIGluIERvaVZlUGFuZWwuamF2YVxcblxcbnByaXZhdGUgYm9vbGVhbiB4dUx5VGhhbmhUb2FuKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XFxuICAgIHRyeSB7XFxuICAgICAgICAvLyAxLiBUXFx1MDBlY20ga2hcXHUwMGUxY2ggaFxcdTAwZTBuZyB0XFx1MWVlYiBtXFx1MDBlMyB2XFx1MDBlOVxcbiAgICAgICAgS2hhY2hIYW5nIGtoYWNoSGFuZyA9IGRvaVZlREFPLmdldEtoYWNoSGFuZ0J5TWFWZSh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpKTtcXG4gICAgICAgIGlmIChraGFjaEhhbmcgPT0gbnVsbCkge1xcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXFxcIktoXFx1MDBmNG5nIHRcXHUwMGVjbSB0aFxcdTFlYTV5IHRoXFx1MDBmNG5nIHRpbiBraFxcdTAwZTFjaCBoXFx1MDBlMG5nIVxcXCIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFxcXCJcXHUwMTEwXFx1MDBlMyB0XFx1MDBlY20gdGhcXHUxZWE1eSBLaGFjaEhhbmc6IFxcXCIgKyBraGFjaEhhbmcuZ2V0TWFLaGFjaEhhbmcoKSk7XFxuXFxuICAgICAgICAvLyBUXFx1MWVhMW8gdlxcdTAwZTkgbVxcdTFlZGJpIHZcXHUxZWRiaSBcXHUwMTExXFx1MWVhN3kgXFx1MDExMVxcdTFlZTcgdGhcXHUwMGY0bmcgdGluXFxuICAgICAgICBWZVRhdSB2ZVRhdU1vaSA9IG5ldyBWZVRhdSgpO1xcbiAgICAgICAgdmVUYXVNb2kuc2V0TWFWZShnZW5lcmF0ZU1hVmUoKSk7XFxuICAgICAgICBcXG4gICAgICAgIC8vIFNhbyBjaFxcdTAwZTlwIHRoXFx1MDBmNG5nIHRpbiB0XFx1MWVlYiB2XFx1MDBlOSBoaVxcdTFlYzduIHRcXHUxZWExaVxcbiAgICAgICAgdmVUYXVNb2kuc2V0VGVuS2hhY2hIYW5nKHZlVGF1SGllblRhaS5nZXRUZW5LaGFjaEhhbmcoKSk7XFxuICAgICAgICB2ZVRhdU1vaS5zZXRHaWF5VG8odmVUYXVIaWVuVGFpLmdldEdpYXlUbygpKTtcXG4gICAgICAgIHZlVGF1TW9pLnNldE5nYXlEaSh2ZVRhdUhpZW5UYWkuZ2V0TmdheURpKCkpO1xcbiAgICAgICAgdmVUYXVNb2kuc2V0RG9pVHVvbmcodmVUYXVIaWVuVGFpLmdldERvaVR1b25nKCkpO1xcbiAgICAgICAgdmVUYXVNb2kuc2V0TGljaFRyaW5oVGF1KGxpY2hUcmluaERhQ2hvbik7XFxuICAgICAgICB2ZVRhdU1vaS5zZXRLaHV5ZW5NYWkoa2h1eWVuTWFpRGFDaG9uKTtcXG4gICAgICAgIHZlVGF1TW9pLnNldEdpYVZlKHZlVGF1SGllblRhaS5nZXRHaWFWZSgpKTtcXG4gICAgICAgIHZlVGF1TW9pLnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pO1xcbiAgICAgICAgXFxuICAgICAgICAvLyBMXFx1MDFiMHUgdlxcdTAwZTkgbVxcdTFlZGJpXFxuICAgICAgICBib29sZWFuIGx1dVZlTW9pID0gZG9pVmVEQU8uZGF0VmUodmVUYXVNb2ksIGNob05nb2lEYUNob24uZ2V0TWFDaG8oKSk7XFxuICAgICAgICBpZiAoIWx1dVZlTW9pKSB7XFxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcXFwiS2hcXHUwMGY0bmcgdGhcXHUxZWMzIHRcXHUxZWExbyB2XFx1MDBlOSBtXFx1MWVkYmkhXFxcIik7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBkb3VibGUgdmF0ID0gMC4xOyAvLyBWQVQgMTAlXFxuICAgICAgICBkb3VibGUgdGllblRodWUgPSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSAqIHZhdDtcXG4gICAgICAgIGRvdWJsZSB0aGFuaFRpZW4gPSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSArIHRpZW5UaHVlO1xcbiAgICAgICAgZG91YmxlIHRvbmdUaWVuID0gdGhhbmhUaWVuO1xcbiAgICAgICAgXFxuICAgICAgICAvLyAyLiBUXFx1MWVhMW8gaFxcdTAwZjNhIFxcdTAxMTFcXHUwMWExbiBtXFx1MWVkYmlcXG4gICAgICAgIEhvYURvbiBob2FEb24gPSBuZXcgSG9hRG9uKCk7XFxuICAgICAgICBTdHJpbmcgbWFIRCA9IGdlbmVyYXRlTWFIRCgpO1xcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFxcXCJHZW5lcmF0ZWQgTWFIRDogXFxcIiArIG1hSEQpO1xcbiAgICAgICAgaG9hRG9uLnNldE1hSEQobWFIRCk7XFxuICAgICAgICBob2FEb24uc2V0TmdheUxhcChMb2NhbERhdGVUaW1lLm5vdygpKTtcXG4gICAgICAgIGhvYURvbi5zZXRUaWVuR2lhbShnaWFWZUJhbkRhdSAtIHRvbmdUaWVuKTtcXG4gICAgICAgIGhvYURvbi5zZXRUb25nVGllbih0b25nVGllbik7XFxuICAgICAgICBob2FEb24uc2V0S2hhY2hIYW5nKGtoYWNoSGFuZyk7XFxuXFxuICAgICAgICAvLyBEZWJ1Z2dpbmcgdGhlIE5oYW5WaWVuIHJlZmVyZW5jZVxcbiAgICAgICAgaWYgKG5oYW5WaWVuUGFuZWwgPT0gbnVsbCkge1xcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcXFwiRVJST1I6IG5oYW5WaWVuUGFuZWwgaXMgbnVsbFxcXCIpO1xcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXFxcIlRoaVxcdTFlYmZ1IHRoXFx1MDBmNG5nIHRpbiBuaFxcdTAwZTJuIHZpXFx1MDBlYW4hXFxcIik7XFxuICAgICAgICB9XFxuICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXFxcIk5oYW5WaWVuIGluZm86IFxcXCIgKyBuaGFuVmllblBhbmVsLmdldENsYXNzKCkuZ2V0TmFtZSgpKTtcXG4gICAgICAgIGhvYURvbi5zZXROdihuaGFuVmllblBhbmVsKTtcXG5cXG4gICAgICAgIC8vIEdldCBMb2FpSG9hRG9uIGFuZCB2ZXJpZnkgaXQgZXhpc3RzXFxuICAgICAgICBMb2FpSG9hRG9uIGxvYWlIb2FEb24gPSBsb2FpSG9hRG9uREFPLmZpbmRCeUlkKFxcXCJMSEQwMDFcXFwiKTtcXG4gICAgICAgIGlmIChsb2FpSG9hRG9uID09IG51bGwpIHtcXG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXFxcIkVSUk9SOiBLaFxcdTAwZjRuZyB0XFx1MDBlY20gdGhcXHUxZWE1eSBsb1xcdTFlYTFpIGhcXHUwMGYzYSBcXHUwMTExXFx1MDFhMW4gTEhEMDAxXFxcIik7XFxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcXFwiS2hcXHUwMGY0bmcgdFxcdTAwZWNtIHRoXFx1MWVhNXkgbG9cXHUxZWExaSBoXFx1MDBmM2EgXFx1MDExMVxcdTAxYTFuIVxcXCIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFxcXCJGb3VuZCBMb2FpSG9hRG9uOiBcXFwiICsgbG9haUhvYURvbi5nZXRNYUxvYWlIb2FEb24oKSk7XFxuICAgICAgICBob2FEb24uc2V0TG9haUhvYURvbihsb2FpSG9hRG9uKTtcXG5cXG4gICAgICAgIC8vIDMuIExcXHUwMWIwdSBoXFx1MDBmM2EgXFx1MDExMVxcdTAxYTFuXFxuICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXFxcIkF0dGVtcHRpbmcgdG8gc2F2ZSBIb2FEb24uLi5cXFwiKTtcXG4gICAgICAgIGJvb2xlYW4gc2F2ZWRIb2FEb24gPSBob2FEb25EQU8uc2F2ZUhvYURvbihob2FEb24pO1xcbiAgICAgICAgaWYgKCFzYXZlZEhvYURvbikge1xcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcXFwiRmFpbGVkIHRvIHNhdmUgSG9hRG9uIVxcXCIpO1xcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXFxcIktoXFx1MDBmNG5nIHRoXFx1MWVjMyBsXFx1MDFiMHUgaFxcdTAwZjNhIFxcdTAxMTFcXHUwMWExbiFcXFwiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcXFwiSG9hRG9uIHNhdmVkIHN1Y2Nlc3NmdWxseTogXFxcIiArIGhvYURvbi5nZXRNYUhEKCkpO1xcblxcbiAgICAgICAgLy8gNC4gVFxcdTFlYTFvIGNoaSB0aVxcdTFlYmZ0IGhcXHUwMGYzYSBcXHUwMTExXFx1MDFhMW5cXG4gICAgICAgIENoaVRpZXRIb2FEb24gY2hpVGlldEhvYURvbiA9IG5ldyBDaGlUaWV0SG9hRG9uKCk7XFxuICAgICAgICBDaGlUaWV0SG9hRG9uSWQgY2hpVGlldElkID0gbmV3IENoaVRpZXRIb2FEb25JZCgpO1xcbiAgICAgICAgY2hpVGlldElkLnNldE1hSEQoaG9hRG9uLmdldE1hSEQoKSk7XFxuICAgICAgICBjaGlUaWV0SWQuc2V0TWFWZSh2ZVRhdU1vaS5nZXRNYVZlKCkpO1xcbiAgICAgICAgY2hpVGlldEhvYURvbi5zZXRJZChjaGlUaWV0SWQpO1xcbiAgICAgICAgY2hpVGlldEhvYURvbi5zZXRIb2FEb24oaG9hRG9uKTtcXG4gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0VmVUYXUodmVUYXVNb2kpO1xcbiAgICAgICAgY2hpVGlldEhvYURvbi5zZXRTb0x1b25nKDEpO1xcbiAgICAgICAgY2hpVGlldEhvYURvbi5zZXRWQVQodmF0KTtcXG4gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0VGllblRodWUodGllblRodWUpO1xcbiAgICAgICAgY2hpVGlldEhvYURvbi5zZXRUaGFuaFRpZW4odGhhbmhUaWVuKTtcXG5cXG4gICAgICAgIC8vIDUuIExcXHUwMWIwdSBjaGkgdGlcXHUxZWJmdCBoXFx1MDBmM2EgXFx1MDExMVxcdTAxYTFuXFxuICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXFxcIkF0dGVtcHRpbmcgdG8gc2F2ZSBDaGlUaWV0SG9hRG9uLi4uXFxcIik7XFxuICAgICAgICBib29sZWFuIHNhdmVkQ2hpVGlldCA9IGNoaVRpZXRIb2FEb25EQU8uc2F2ZShjaGlUaWV0SG9hRG9uKTtcXG4gICAgICAgIGlmICghc2F2ZWRDaGlUaWV0KSB7XFxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFxcXCJGYWlsZWQgdG8gc2F2ZSBDaGlUaWV0SG9hRG9uIVxcXCIpO1xcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXFxcIktoXFx1MDBmNG5nIHRoXFx1MWVjMyBsXFx1MDFiMHUgY2hpIHRpXFx1MWViZnQgaFxcdTAwZjNhIFxcdTAxMTFcXHUwMWExbiFcXFwiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcXFwiQ2hpVGlldEhvYURvbiBzYXZlZCBzdWNjZXNzZnVsbHlcXFwiKTtcXG5cXG4gICAgICAgIC8vIDYuIENcXHUxZWFkcCBuaFxcdTFlYWR0IHRyXFx1MWVhMW5nIHRoXFx1MDBlMWkgdlxcdTAwZTkgY1xcdTAxNjkgdGhcXHUwMGUwbmggREFfRE9JXFxuICAgICAgICBib29sZWFuIHVwZGF0ZWRPbGRUaWNrZXQgPSBkb2lWZURBTy5jYXBOaGF0VHJhbmdUaGFpVmUodmVUYXVIaWVuVGFpLmdldE1hVmUoKSwgVHJhbmdUaGFpVmVUYXUuREFfRE9JKTtcXG4gICAgICAgIGlmICghdXBkYXRlZE9sZFRpY2tldCkge1xcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcXFwiRmFpbGVkIHRvIHVwZGF0ZSBvbGQgdGlja2V0IHN0YXR1cyFcXFwiKTtcXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxcXCJLaFxcdTAwZjRuZyB0aFxcdTFlYzMgY1xcdTFlYWRwIG5oXFx1MWVhZHQgdHJcXHUxZWExbmcgdGhcXHUwMGUxaSB2XFx1MDBlOSBjXFx1MDE2OSFcXFwiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcXFwiT2xkIHRpY2tldCBzdGF0dXMgdXBkYXRlZCBzdWNjZXNzZnVsbHlcXFwiKTtcXG5cXG4gICAgICAgIC8vIDcuIENcXHUxZWFkcCBuaFxcdTFlYWR0IHZcXHUwMGU5IGhpXFx1MWVjN24gdFxcdTFlYTFpIHRoXFx1MDBlMG5oIHZcXHUwMGU5IG1cXHUxZWRiaVxcbiAgICAgICAgdmVUYXVIaWVuVGFpID0gdmVUYXVNb2k7XFxuXFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcXG4gICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcXFwiRXJyb3IgaW4geHVMeVRoYW5oVG9hbjogXFxcIiArIGUuZ2V0TWVzc2FnZSgpKTtcXG4gICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XFxuICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFxcXCJMXFx1MWVkN2kga2hpIHhcXHUxZWVkIGxcXHUwMGZkIHRoYW5oIHRvXFx1MDBlMW46IFxcXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XFxuICAgIH1cXG59XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgSSBjYW4gc2VlIHRoZSBpc3N1ZS4gSW4gdGhlIGB4dUx5VGhhbmhUb2FuKClgIG1ldGhvZCBpbiBEb2lWZVBhbmVsLmphdmEsIHRoZXJlJ3MgYSBwcm9ibGVtIHdpdGggdGhlIHdheSB0aGUgbmV3IHRpY2tldCBpcyBiZWluZyBjcmVhdGVkLiBMZXQgbWUgZml4IHRoaXMgaXNzdWU6XG5cbjEuIFRoZSBlcnJvciBvY2N1cnMgYmVjYXVzZSB3aGVuIGNyZWF0aW5nIGEgbmV3IHRpY2tldCAoVmVUYXUpLCB0aGUgY3VzdG9tZXIgbmFtZSBpcyBub3QgYmVpbmcgc2V0LCB3aGljaCBpcyBjYXVzaW5nIHRoZSB2YWxpZGF0aW9uIGVycm9yIGluIHRoZSBEb2lWZURBT0ltcGwuZGF0VmUgbWV0aG9kLlxuXG4yLiBUaGUgbGluZSBgYm9vbGVhbiBsdXVWZU1vaSA9IERvaVZlREFPLmRhdFZlKHZlVGF1TW9pLGNob05nb2lEYUNob24uZ2V0TWFDaG8oKSk7YCBpcyB1c2luZyBhIHN0YXRpYyByZWZlcmVuY2UgdG8gRG9pVmVEQU8gaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UgdmFyaWFibGUgYGRvaVZlREFPYC5cblxuMy4gVGhlIG5ldyB0aWNrZXQgKHZlVGF1TW9pKSBpcyBiZWluZyBjcmVhdGVkIHdpdGhvdXQgc2V0dGluZyByZXF1aXJlZCBmaWVsZHMgbGlrZSB0ZW5LaGFjaEhhbmcsIGdpYXlUbywgbmdheURpLCBkb2lUdW9uZywgbGljaFRyaW5oVGF1LCBldGMuXG5cbkxldCBtZSBjcmVhdGUgYSBmaXggZm9yIHRoaXMgaXNzdWU6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmFcbi4uLlxuXG4gICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZvaWQgZG9uZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlVGF1SGllblRhaSA9IGdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlVGF1SGllblRhaSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coRG9pVmVQYW5lbC50aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJLaMO0bmcgdMOsbSB0aOG6pXkgdsOpIHbhu5tpIG3DozogXCIgKyBtYVZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbU1vaSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaWFWZUJhbkRhdSA9IHZlVGF1SGllblRhaS5nZXRHaWFWZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZW5UaGlUaG9uZ1RpblZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLaeG7g20gdHJhIHhlbSBjw7MgdGjhu4MgxJHhu5VpIHbDqSBraMO0bmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sZWFuIGNvVGhlRG9pVmUgPSAodmVUYXVIaWVuVGFpLmdldFRyYW5nVGhhaSgpID09IFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldElucHV0RmllbGRzRW5hYmxlZChjb1RoZURvaVZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5Eb2lWZS5zZXRFbmFibGVkKGNvVGhlRG9pVmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkNob25MaWNoVHJpbmguc2V0RW5hYmxlZChjb1RoZURvaVZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5DaG9uQ2hvTmdvaS5zZXRFbmFibGVkKGNvVGhlRG9pVmUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb1RoZURvaVZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKERvaVZlUGFuZWwudGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlbDqSBuw6B5IGPDsyB0cuG6oW5nIHRow6FpICdcIiArIHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIicuIENo4buJIHbDqSDhu58gdHLhuqFuZyB0aMOhaSAnxJDDgyBUSEFOSCBUT8OBTicgbeG7m2kgY8OzIHRo4buDIMSR4buVaS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIktow7RuZyB0aOG7gyDEkeG7lWkgdsOpXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3RhdHVzKFJFQURZX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhEb2lWZVBhbmVsLnRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRydXkgduG6pW4gZOG7ryBsaeG7h3U6IFwiICsgZS5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgd29ya2VyLmV4ZWN1dGUoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLCBcIkzhu5dpIGtoaSB0cnV5IHbhuqVuIGThu68gbGnhu4d1OiBcIiArIGUuZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgfVxuICAgIH1cbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoTE9BRElOR19URVhULCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gTMawdSB0cuG7ryB0cuG6oW5nIHRow6FpIGPFqSDEkeG7gyBoaeG7g24gdGjhu4sgdHJvbmcgbOG7i2NoIHPhu61cbiAgICAgICAgICAgIGZpbmFsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaUN1ID0gdmVUYXVIaWVuVGFpLmdldFRyYW5nVGhhaSgpO1xuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbiB2w6lcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRUZW5LaGFjaEhhbmcodGVuS2hhY2hIYW5nKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRHaWF5VG8oZ2lheVRvKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXROZ2F5RGkobmdheURpKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXREb2lUdW9uZyhPYmplY3RzLnJlcXVpcmVOb25OdWxsKGNib0RvaVR1b25nLmdldFNlbGVjdGVkSXRlbSgpKS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRMaWNoVHJpbmhUYXUobGljaFRyaW5oRGFDaG9uKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRDaG9OZ29pKGNob05nb2lEYUNob24pO1xuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldEtodXllbk1haShraHV5ZW5NYWlEYUNob24pO1xuXG4gICAgICAgICAgICAvLyBUw61uaCBs4bqhaSBnacOhIHbDqVxuICAgICAgICAgICAgZG91YmxlIGdpYVZlID0gdGluaEdpYVZlKGNob05nb2lEYUNob24sIGtodXllbk1haURhQ2hvbiwgT2JqZWN0cy5yZXF1aXJlTm9uTnVsbChjYm9Eb2lUdW9uZy5nZXRTZWxlY3RlZEl0ZW0oKSkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0R2lhVmUoZ2lhVmUpO1xuXG4gICAgICAgICAgICAvLyDEkOG7lWkgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIENIT19YQUNfTkhBTlxuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pO1xuXG4gICAgICAgICAgICAvLyBH4buNaSBBUEkgxJHhu4MgY+G6rXAgbmjhuq10IHbDqVxuICAgICAgICAgICAgYm9vbGVhbiBzdWNjZXNzID0gZG9pVmVEQU8uZG9pVmUodmVUYXVIaWVuVGFpKTtcbiAgICAgICAgICAgIGJvb2xlYW4geHVMeVRoYW5oVG9hblN1Y2Nlc3MgPSB4dUx5VGhhbmhUb2FuKCk7XG4gICAgICAgICAgICBpZiAoc3VjY2VzcyAmJiB4dUx5VGhhbmhUb2FuU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUxpY2hTdUFuZFNob3dTdWNjZXNzKHRyYW5nVGhhaUN1KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwixJDhu5VpIHbDqSBraMO0bmcgdGjDoG5oIGPDtG5nIVwiLCBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgXCJM4buXaSBraGkgdGjhu7FjIGhp4buHbiDEkeG7lWkgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKEVSUk9SX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbi4uLlxuXG4gICAgICAgIC8vIFTDrW5oIGNow6puaCBs4buHY2ggZ2nDoSB2w6kgZ2nhu69hIHbDqSBt4bubaSB2w6AgdsOpIGPFqVxuICAgICAgICBmaW5hbCBkb3VibGUgZ2lhVmVNb2kgPSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKTtcbiAgICAgICAgZmluYWwgZG91YmxlIGNoZW5oTGVjaCA9IGdpYVZlTW9pIC0gZ2lhVmVCYW5EYXU7XG4gICAgICAgIGZpbmFsIGJvb2xlYW4gY2FuVHJhVGhlbSA9IGNoZW5oTGVjaCA+IDA7XG4gICAgICAgIGZpbmFsIGJvb2xlYW4gZHVvY0hvYW5MYWkgPSBjaGVuaExlY2ggPCAwO1xuICAgICAgICBmaW5hbCBkb3VibGUgc29UaWVuQ2hlbmhMZWNoID0gTWF0aC5hYnMoY2hlbmhMZWNoKTtcblxuICAgICAgICAvLyBDcmVhdGUgcGF5bWVudCBkaWFsb2dcbiAgICAgICAgU3RyaW5nIGRpYWxvZ1RpdGxlID0gY2FuVHJhVGhlbSA/IFwiVGhhbmggdG/DoW4gxJHhu5VpIHbDqSAtIEPhuqduIHRodSB0aMOqbVwiIDpcbiAgICAgICAgICAgICAgICBkdW9jSG9hbkxhaSA/IFwiVGhhbmggdG/DoW4gxJHhu5VpIHbDqSAtIEhvw6BuIHRp4buBbiB0aOG7q2FcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRoYW5oIHRvw6FuIMSR4buVaSB2w6lcIjtcbiAgICAgICAgZmluYWwgSkRpYWxvZyBkaWFsb2cgPSBuZXcgSkRpYWxvZygoRnJhbWUpIFN3aW5nVXRpbGl0aWVzLmdldFdpbmRvd0FuY2VzdG9yKHRoaXMpLCBkaWFsb2dUaXRsZSwgdHJ1ZSk7XG4gICAgICAgIGRpYWxvZy5zZXRMYXlvdXQobmV3IEJvcmRlckxheW91dCgxMCwgMTApKTtcbiAgICAgICAgZGlhbG9nLnNldFNpemUoNTAwLCA2NTApOyAvLyBUxINuZyBrw61jaCB0aMaw4bubYyBjaGnhu4F1IGNhbyDEkeG7gyBjaOG7qWEgdGjDqm0gY8OhYyB0aMOgbmggcGjhuqduIG3hu5tpXG4gICAgICAgIGRpYWxvZy5zZXRMb2NhdGlvblJlbGF0aXZlVG8odGhpcyk7XG4uLi5cblxuICAgICAgICAgICAgLy8gTGlzdGVuZXIgY2hvIGNvbWJvYm94IMSR4buDIGNodXnhu4NuIHRhYlxuICAgICAgICAgICAgY21iUGF5bWVudFR5cGUuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICAgICAgQ2FyZExheW91dCBjbCA9IChDYXJkTGF5b3V0KSBwbmxQYXltZW50VGFicy5nZXRMYXlvdXQoKTtcbiAgICAgICAgICAgICAgICBpbnQgc2VsZWN0ZWRJbmRleCA9IGNtYlBheW1lbnRUeXBlLmdldFNlbGVjdGVkSW5kZXgoKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsLnNob3cocG5sUGF5bWVudFRhYnMsIFwiQkFOS19UUkFOU0ZFUlwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjbC5zaG93KHBubFBheW1lbnRUYWJzLCBcIlZOUEFZX1FSXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBU4bqhbyBRUiBjb2RlIGtoaSBjaOG7jW4gdGFiIFZOUGF5XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVm5wYXlRUkNvZGUobGJsUVJDb2RlLCB2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBzb1RpZW5DaGVuaExlY2gsIGxibFBheW1lbnRTdGF0dXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbmxUcmFuc2ZlckluZm8uc2V0Qm9yZGVyKEJvcmRlckZhY3RvcnkuY3JlYXRlRW1wdHlCb3JkZXIoMCwgMCwgMTAsIDApKTtcbiAgICAgICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5hZGQocG5sVHJhbnNmZXJJbmZvLCBCb3JkZXJMYXlvdXQuTk9SVEgpO1xuICAgICAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LmFkZChwbmxQYXltZW50VGFicywgQm9yZGVyTGF5b3V0LkNFTlRFUik7XG5cbiAgICAgICAgICAgIC8vIE7DunQgbMOgbSBt4bubaSB0cuG6oW5nIHRow6FpIHRoYW5oIHRvw6FuXG4gICAgICAgICAgICBidG5SZWZyZXNoU3RhdHVzLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgICAgIGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKHZlVGF1SGllblRhaS5nZXRNYVZlKCksIGxibFBheW1lbnRTdGF0dXMsIGRpYWxvZyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gSGnhu4NuIHRo4buLIHBhbmVsIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhbiBiYW4gxJHhuqd1ICht4bq3YyDEkeG7i25oIGzDoCB0aeG7gW4gbeG6t3QpXG4gICAgICAgICAgICBwbmxQYXltZW50LmFkZChwbmxDYXNoUGF5bWVudCk7XG4gICAgICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICBwbmxQYXltZW50LmFkZChwbmxUcmFuc2ZlclBheW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBUaMOqbSBsaXN0ZW5lciBjaG8gcmFkaW8gYnV0dG9uIMSR4buDIGNodXnhu4NuIMSR4buVaSBnaeG7r2EgY8OhYyBwaMawxqFuZyB0aOG7qWMgdGhhbmggdG/DoW5cbiAgICAgICAgICAgIHJhZENhc2guYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICAgICAgcG5sQ2FzaFBheW1lbnQuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgZGlhbG9nLnJldmFsaWRhdGUoKTtcbiAgICAgICAgICAgICAgICBkaWFsb2cucmVwYWludCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJhZFRyYW5zZmVyLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgICAgIHBubENhc2hQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgICAgIGRpYWxvZy5yZXZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgZGlhbG9nLnJlcGFpbnQoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBBZGQgZG9jdW1lbnQgbGlzdGVuZXIgZm9yIGF1dG9tYXRpYyBjaGFuZ2UgY2FsY3VsYXRpb25cbiAgICAgICAgICAgIHR4dEN1c3RvbWVyUGF5bWVudC5nZXREb2N1bWVudCgpLmFkZERvY3VtZW50TGlzdGVuZXIobmV3IERvY3VtZW50TGlzdGVuZXIoKSB7XG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB2b2lkIHVwZGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyBpbnB1dCA9IGNvbnRhaW5lci50eHRDdXN0b21lclBheW1lbnQuZ2V0VGV4dCgpLnJlcGxhY2VBbGwoXCJbXlxcXFxkXVwiLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGN1c3RvbWVyUGF5bWVudCA9IERvdWJsZS5wYXJzZURvdWJsZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGNoYW5nZSA9IGN1c3RvbWVyUGF5bWVudCAtIHNvVGllbkNoZW5oTGVjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIubGJsQ2hhbmdlLnNldFRleHQoY3VycmVuY3lGb3JtYXR0ZXIuZm9ybWF0KE1hdGgubWF4KDAsIGNoYW5nZSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmxibENoYW5nZS5zZXRUZXh0KFwiMCBWTsSQXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmxibENoYW5nZS5zZXRUZXh0KFwiMCBWTsSQXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuLi4uXG5cbiAgICAgICAgaWYgKGNhblRyYVRoZW0pIHtcbiAgICAgICAgICAgIGJ0bkFjdGlvbi5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyLnJhZENhc2guaXNTZWxlY3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBY4butIGzDvSB0aGFuaCB0b8OhbiB0aeG7gW4gbeG6t3RcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyBpbnB1dCA9IGNvbnRhaW5lci50eHRDdXN0b21lclBheW1lbnQuZ2V0VGV4dCgpLnJlcGxhY2VBbGwoXCJbXlxcXFxkXVwiLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlZ1aSBsw7JuZyBuaOG6rXAgc+G7kSB0aeG7gW4ga2jDoWNoIMSRxrBhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgY3VzdG9tZXJQYXltZW50ID0gRG91YmxlLnBhcnNlRG91YmxlKGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21lclBheW1lbnQgPCBzb1RpZW5DaGVuaExlY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlPhu5EgdGnhu4FuIGtow6FjaCDEkcawYSBraMO0bmcgxJHhu6dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4dUx5VGhhbmhUb2FuKFwiVElFTl9NQVRcIiwgXCJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgY2hhbmdlID0gY3VzdG9tZXJQYXltZW50IC0gc29UaWVuQ2hlbmhMZWNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dQYXltZW50U3VjY2Vzc0RpYWxvZyhjaGFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGFpbmVyLnJhZFRyYW5zZmVyLmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gWOG7rSBsw70gdGhhbmggdG/DoW4gY2h1eeG7g24ga2hv4bqjblxuICAgICAgICAgICAgICAgICAgICAgICAgaW50IHNlbGVjdGVkUGF5bWVudFR5cGUgPSBjb250YWluZXIuY21iUGF5bWVudFR5cGUuZ2V0U2VsZWN0ZWRJbmRleCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRQYXltZW50VHlwZSA9PSAwKSB7IC8vIENodXnhu4NuIGtob+G6o24gbmfDom4gaMOgbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcgdHJhbnNhY3Rpb25JZCA9IGNvbnRhaW5lci50eHRUcmFuc2FjdGlvbklkLmdldFRleHQoKS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zYWN0aW9uSWQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlZ1aSBsw7JuZyBuaOG6rXAgbcOjIGdpYW8gZOG7i2NoXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHh1THlUaGFuaFRvYW4oXCJDSFVZRU5fS0hPQU5fTkdBTl9IQU5HXCIsIHRyYW5zYWN0aW9uSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dUcmFuc2ZlclN1Y2Nlc3NEaWFsb2coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0FmdGVyU3VjY2Vzc2Z1bFBheW1lbnQoZGlhbG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJLaMO0bmcgdGjhu4MgeMOhYyB0aOG7sWMgZ2lhbyBk4buLY2guIFZ1aSBsw7JuZyBraeG7g20gdHJhIG3DoyBnaWFvIGThu4tjaC5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIFZOUGF5IFFSXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWMOhYyB0aOG7sWMgbOG6oWkgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBt4buZdCBs4bqnbiBu4buvYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW4gcGF5bWVudFN1Y2Nlc3MgPSBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBjb250YWluZXIubGJsUGF5bWVudFN0YXR1cywgbnVsbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF5bWVudFN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1ZucGF5U3VjY2Vzc0RpYWxvZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQWZ0ZXJTdWNjZXNzZnVsUGF5bWVudChkaWFsb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkNoxrBhIG5o4bqtbiDEkcaw4bujYyB0aMO0bmcgdGluIHRoYW5oIHRvw6FuLiBWdWkgbMOybmcgdGhhbmggdG/DoW4gaG/hurdjIGtp4buDbSB0cmEgbOG6oWkuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDaMawYSB0aGFuaCB0b8OhblwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJT4buRIHRp4buBbiBraMO0bmcgaOG7o3AgbOG7h1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGV4LnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJM4buXaSBraGkgdGhhbmggdG/DoW46IFwiICsgZXguZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBOw7p0IHjDoWMgbmjhuq1uIMSRxqFuIGdp4bqjbiBu4bq/dSBraMO0bmcgY+G6p24gdGh1IHRow6ptIHRp4buBblxuICAgICAgICAgICAgYnRuQWN0aW9uLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGV4LnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJM4buXaSBraGkgeMOhYyBuaOG6rW46IFwiICsgZXguZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBwbmxCdXR0b25zLmFkZChidG5BY3Rpb24pO1xuICAgICAgICBwbmxDb250ZW50LmFkZChwbmxCdXR0b25zLCBCb3JkZXJMYXlvdXQuU09VVEgpO1xuXG4gICAgICAgIGRpYWxvZy5hZGQocG5sQ29udGVudCk7XG4gICAgICAgIGRpYWxvZy5zZXRWaXNpYmxlKHRydWUpO1xuICAgIH1cblxuICAgIC8vIFThuqFvIG3hu5l0IGzhu5twIENvbnRhaW5lciDEkeG7gyBnaeG7ryBjw6FjIHRoYW0gY2hp4bq/dVxuICAgIHByaXZhdGUgc3RhdGljIGNsYXNzIENvbnRhaW5lciB7XG4gICAgICAgIHB1YmxpYyBKUmFkaW9CdXR0b24gcmFkQ2FzaDtcbiAgICAgICAgcHVibGljIEpSYWRpb0J1dHRvbiByYWRUcmFuc2ZlcjtcbiAgICAgICAgcHVibGljIEpUZXh0RmllbGQgdHh0Q3VzdG9tZXJQYXltZW50O1xuICAgICAgICBwdWJsaWMgSlRleHRGaWVsZCB0eHRUcmFuc2FjdGlvbklkO1xuICAgICAgICBwdWJsaWMgSkxhYmVsIGxibFBheW1lbnRTdGF0dXM7XG4gICAgICAgIHB1YmxpYyBKQ29tYm9Cb3g8U3RyaW5nPiBjbWJQYXltZW50VHlwZTtcbiAgICAgICAgcHVibGljIEpMYWJlbCBsYmxDaGFuZ2U7XG4gICAgfVxuLi4uXG5cbiAgICAvLyBQaMawxqFuZyB0aOG7qWMga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHRoYW5oIHRvw6FuIFZOUGF5XG4gICAgcHJpdmF0ZSBib29sZWFuIGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKFN0cmluZyBtYVZlLCBKTGFiZWwgbGJsU3RhdHVzLCBKRGlhbG9nIHBhcmVudERpYWxvZykge1xuICAgICAgICAvLyBU4bqhbyBTd2luZ1dvcmtlciDEkeG7gyBraMO0bmcgbMOgbSDEkcahIGdpYW8gZGnhu4duXG4gICAgICAgIFN3aW5nV29ya2VyPEJvb2xlYW4sIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgQm9vbGVhbiBkb0luQmFja2dyb3VuZCgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcm9uZyBtw7RpIHRyxrDhu51uZyB0aOG7sWMgdOG6vywgYuG6oW4gc+G6vSBn4buNaSBBUEkgVk5QYXkgxJHhu4Mga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIGdpYW8gZOG7i2NoXG4gICAgICAgICAgICAgICAgICAgIC8vIOG7niDEkcOieSBjaMO6bmcgdGEgc+G6vSBtw7QgcGjhu49uZyB2aeG7h2Mga2nhu4NtIHRyYSwgdHLhuqMgduG7gSBuZ+G6q3Ugbmhpw6puIMSR4buDIGRlbW9cbiAgICAgICAgICAgICAgICAgICAgLy8gVHJvbmcgdGjhu7FjIHThur8sIHPhur0ga2nhu4NtIHRyYSBk4buxYSB0csOqbiBtw6MgZ2lhbyBk4buLY2ggxJHDoyBsxrB1XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTcO0IHBo4buPbmcgZ+G7jWkgQVBJIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSAoNTAlIGPGoSBo4buZaSB0aMOgbmggY8O0bmcpXG4gICAgICAgICAgICAgICAgICAgIFRocmVhZC5zbGVlcCgxNTAwKTsgLy8gTcO0IHBo4buPbmcgdGjhu51pIGdpYW4gZ+G7jWkgQVBJXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZG9tKCkubmV4dEJvb2xlYW4oKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICBwcml2YXRlIHZvaWQgZ2VuZXJhdGVWbnBheVFSQ29kZShKTGFiZWwgbGJsUVJDb2RlLCBTdHJpbmcgbWFWZSwgZG91YmxlIGFtb3VudCwgSkxhYmVsIGxibFN0YXR1cykge1xuICAgICAgICAvLyBU4bqhbyBTd2luZ1dvcmtlciDEkeG7gyBraMO0bmcgbMOgbSDEkcahIGdpYW8gZGnhu4duXG4gICAgICAgIFN3aW5nV29ya2VyPEltYWdlSWNvbiwgVm9pZD4gd29ya2VyID0gbmV3IFN3aW5nV29ya2VyPD4oKSB7XG4gICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICAgICAgICAgIHByb3RlY3RlZCBJbWFnZUljb24gZG9JbkJhY2tncm91bmQoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVOG6oW8gdGhhbSBz4buRIGNobyBBUEkgVk5QYXlcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9UeG5SZWYgPSBtYVZlICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCk7IC8vIE3DoyB0aGFtIGNoaeG6v3UgZ2lhbyBk4buLY2hcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9BbW91bnQgPSBTdHJpbmcudmFsdWVPZigobG9uZykoYW1vdW50ICogMTAwKSk7IC8vIFPhu5EgdGnhu4FuICogMTAwICjEkcahbiB24buLIHh1KVxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgdm5wX09yZGVySW5mbyA9IFwiVGhhbmggdG9hbiBob2EgZG9uIHZlIHRhdSBcIiArIG1hVmU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVVJMIEFQSSB04bqhbyBtw6MgUVIgY+G7p2EgVk5QYXkgKMSRw6J5IGzDoCBVUkwgZ2nhuqMgxJHhu4tuaCwgYuG6oW4gY+G6p24gdGhheSB0aOG6vyBi4bqxbmcgVVJMIHRo4buxYylcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGFwaVVybCA9IFwiaHR0cHM6Ly9zYW5kYm94LnZucGF5bWVudC52bi9wYXltZW50djIvY3JlYXRlX3FyX2NvZGUuaHRtbFwiO1xuLi4uXG5cbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9TZWN1cmVIYXNoID0gaG1hY1NIQTUxMihcIllPVVJfU0VDUkVUX0tFWVwiLCBoYXNoRGF0YS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkuYXBwZW5kKFwiJnZucF9TZWN1cmVIYXNoPVwiKS5hcHBlbmQodm5wX1NlY3VyZUhhc2gpO1xuXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBwYXltZW50VXJsID0gYXBpVXJsICsgXCI/XCIgKyBxdWVyeS50b1N0cmluZygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyb25nIG3DtGkgdHLGsOG7nW5nIHRo4buxYyB04bq/LCBi4bqhbiBz4bq9IGfhu41pIEFQSSBWTlBheSDEkeG7gyBs4bqleSBVUkwgaG/hurdjIGThu68gbGnhu4d1IFFSXG4gICAgICAgICAgICAgICAgICAgIC8vIOG7niDEkcOieSwgY2jDum5nIHRhIHPhur0gdOG6oW8gbcOjIFFSIHThu6sgVVJMIHRoYW5oIHRvw6FuXG4gICAgICAgICAgICAgICAgICAgIC8vIEzGsHUgdGjDtG5nIHRpbiBuw6B5IMSR4buDIHRyYSBj4bupdSB0cuG6oW5nIHRow6FpIHRoYW5oIHRvw6FuIHNhdSBuw6B5XG4gICAgICAgICAgICAgICAgICAgIHNhdmVWbnBheVRyYW5zYWN0aW9uKHZucF9UeG5SZWYsIG1hVmUsIGFtb3VudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVOG6oW8gUVIgY29kZSB04burIFVSTCB0aGFuaCB0b8OhblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVRUkNvZGVJbWFnZShwYXltZW50VXJsLCAyMDAsIDIwMCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICAgICAgLy8gR+G7jWkgQVBJIMSR4buDIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqVxuICAgICAgICBib29sZWFuIHN1Y2Nlc3MgPSBkb2lWZURBTy5jYXBOaGF0VHJhbmdUaGFpVmUodmVUYXVIaWVuVGFpLmdldE1hVmUoKSwgVHJhbmdUaGFpVmVUYXUuREFfRE9JKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGRpYWxvZy5kaXNwb3NlKCk7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoU1VDQ0VTU19URVhULCBmYWxzZSk7XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBs4bqhaSB0cuG6oW5nIHRow6FpIHRyw6puIGdpYW8gZGnhu4duXG4gICAgICAgICAgICBsYmxUcmFuZ1RoYWkuc2V0VGV4dCh2ZVRhdUhpZW5UYWkuZ2V0VHJhbmdUaGFpKCkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBzZXRUcmFuZ1RoYWlDb2xvcihsYmxUcmFuZ1RoYWksIHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKSk7XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBs4bqhaSBi4bqjbmcgbOG7i2NoIHPhu61cbiAgICAgICAgICAgIERlZmF1bHRUYWJsZU1vZGVsIG1vZGVsID0gKERlZmF1bHRUYWJsZU1vZGVsKSB0YmxMaWNoU3UuZ2V0TW9kZWwoKTtcbiAgICAgICAgICAgIGludCByb3dDb3VudCA9IG1vZGVsLmdldFJvd0NvdW50KCk7XG4gICAgICAgICAgICBpZiAocm93Q291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IGTDsm5nIGN14buRaSBjw7luZyAoduG7q2EgdGjDqm0pXG4gICAgICAgICAgICAgICAgbW9kZWwuc2V0VmFsdWVBdChUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOLCByb3dDb3VudCAtIDEsIDMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYW1Nb2koKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgXCJLaMO0bmcgdGjhu4MgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICB9XG4uLi5cblxuICAgIC8vIFBoxrDGoW5nIHRo4bupYyB44butIGzDvSB0aGFuaCB0b8OhbiB24bubaSB0aMO0bmcgdGluIHbhu4EgcGjGsMahbmcgdGjhu6ljIHRoYW5oIHRvw6FuIHbDoCBtw6MgZ2lhbyBk4buLY2ggKG7hur91IGPDsylcbiAgICBwcml2YXRlIGJvb2xlYW4geHVMeVRoYW5oVG9hbihTdHJpbmcgcGh1b25nVGh1Y1RoYW5oVG9hbiwgU3RyaW5nIG1hR2lhb0RpY2gpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIENvZGUgeOG7rSBsw70gdGhhbmggdG/DoW4g4bufIMSRw6J5XG4gICAgICAgICAgICAvLyBMxrB1IHRow7RuZyB0aW4gcGjGsMahbmcgdGjhu6ljIHRoYW5oIHRvw6FuIHbDoCBtw6MgZ2lhbyBk4buLY2ggdsOgbyBjxqEgc+G7nyBk4buvIGxp4buHdVxuXG4gICAgICAgICAgICAvLyBHaeG6oyBz4butIHBoxrDGoW5nIHRo4bupYyBuw6B5IGx1w7RuIHRy4bqjIHbhu4EgdHJ1ZSBu4bq/dSBraMO0bmcgY8OzIG5nb+G6oWkgbOG7h1xuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiWOG7rSBsw70gdGhhbmggdG/DoW46IFwiICsgcGh1b25nVGh1Y1RoYW5oVG9hbiArIFwiLCBNw6MgZ2lhbyBk4buLY2g6IFwiICtcbiAgICAgICAgICAgICAgICAgICAgKG1hR2lhb0RpY2guaXNFbXB0eSgpID8gXCJLaMO0bmcgY8OzXCIgOiBtYUdpYW9EaWNoKSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZXgpIHtcbiAgICAgICAgICAgIGV4LnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuLi4uXG4gICAgcHJpdmF0ZSBib29sZWFuIHh1THlUaGFuaFRvYW4oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFZlVGF1IHZlVGF1TW9pID0gbmV3IFZlVGF1KCk7XG4gICAgICAgICAgICB2ZVRhdU1vaS5zZXRNYVZlKGdlbmVyYXRlTWFWZSgpKTtcbiAgICAgICAgICAgIGJvb2xlYW4gbHV1VmVNb2kgPSBEb2lWZURBTy5kYXRWZSh2ZVRhdU1vaSxjaG9OZ29pRGFDaG9uLmdldE1hQ2hvKCkpO1xuICAgICAgICAgICAgLy8gMS4gVMOsbSBraMOhY2ggaMOgbmcgdOG7qyBtw6MgdsOpXG4gICAgICAgICAgICBLaGFjaEhhbmcga2hhY2hIYW5nID0gZG9pVmVEQU8uZ2V0S2hhY2hIYW5nQnlNYVZlKHZlVGF1SGllblRhaS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgaWYgKGtoYWNoSGFuZyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIktow7RuZyB0w6xtIHRo4bqleSB0aMO0bmcgdGluIGtow6FjaCBow6BuZyFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCLEkMOjIHTDrG0gdGjhuqV5IEtoYWNoSGFuZzogXCIgKyBraGFjaEhhbmcuZ2V0TWFLaGFjaEhhbmcoKSk7XG5cbiAgICAgICAgICAgIGRvdWJsZSB2YXQgPSAwLjE7IC8vIFZBVCA4JSAtIMSQaeG7gXUgY2jhu4luaCB0aGVvIHF1eSDEkeG7i25oIGPhu6dhIGLhuqFuXG4gICAgICAgICAgICBkb3VibGUgdGllblRodWUgPSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSAqIHZhdDtcbiAgICAgICAgICAgIGRvdWJsZSB0aGFuaFRpZW4gPSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSt0aWVuVGh1ZTtcbiAgICAgICAgICAgIGRvdWJsZSB0b25nVGllbiA9IHRoYW5oVGllbit0aWVuVGh1ZTtcbiAgICAgICAgICAgIC8vIDIuIFThuqFvIGjDs2EgxJHGoW4gbeG7m2lcbiAgICAgICAgICAgIEhvYURvbiBob2FEb24gPSBuZXcgSG9hRG9uKCk7XG4gICAgICAgICAgICBTdHJpbmcgbWFIRCA9IGdlbmVyYXRlTWFIRCgpO1xuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiR2VuZXJhdGVkIE1hSEQ6IFwiICsgbWFIRCk7XG4gICAgICAgICAgICBob2FEb24uc2V0TWFIRChtYUhEKTtcbiAgICAgICAgICAgIGhvYURvbi5zZXROZ2F5TGFwKExvY2FsRGF0ZVRpbWUubm93KCkpO1xuICAgICAgICAgICAgaG9hRG9uLnNldFRpZW5HaWFtKGdpYVZlQmFuRGF1IC0gdG9uZ1RpZW4pO1xuICAgICAgICAgICAgaG9hRG9uLnNldFRvbmdUaWVuKHRvbmdUaWVuKTtcbiAgICAgICAgICAgIGhvYURvbi5zZXRLaGFjaEhhbmcoa2hhY2hIYW5nKTtcblxuICAgICAgICAgICAgLy8gRGVidWdnaW5nIHRoZSBOaGFuVmllbiByZWZlcmVuY2VcbiAgICAgICAgICAgIGlmIChuaGFuVmllblBhbmVsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJFUlJPUjogbmhhblZpZW5QYW5lbCBpcyBudWxsXCIpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJUaGnhur91IHRow7RuZyB0aW4gbmjDom4gdmnDqm4hXCIpO1xuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkVycm9yIGluIHh1THlUaGFuaFRvYW46IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgeOG7rSBsw70gdGhhbmggdG/DoW46IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBTdHJpbmcgZ2VuZXJhdGVNYVZlKCkge1xuICAgICAgICAvLyBGb3JtYXQ6IEhEICsgeXl5eU1NZGQgKyA0IHPhu5EgcmFuZG9tXG4gICAgICAgIFNpbXBsZURhdGVGb3JtYXQgc2RmID0gbmV3IFNpbXBsZURhdGVGb3JtYXQoXCJ5eXl5TU1kZFwiKTtcbiAgICAgICAgU3RyaW5nIGRhdGVQYXJ0ID0gc2RmLmZvcm1hdChuZXcgRGF0ZSgpKTtcbiAgICAgICAgU3RyaW5nIHJhbmRvbVBhcnQgPSBTdHJpbmcuZm9ybWF0KFwiJTA0ZFwiLCBuZXcgUmFuZG9tKCkubmV4dEludCgxMDAwMCkpO1xuICAgICAgICByZXR1cm4gXCJWVFwiICsgZGF0ZVBhcnQgKyByYW5kb21QYXJ0O1xuICAgIH1cblxuICAgIHByaXZhdGUgU3RyaW5nIGdlbmVyYXRlTWFIRCgpIHtcbiAgICAgICAgLy8gRm9ybWF0OiBIRCArIHl5eXlNTWRkICsgNCBz4buRIHJhbmRvbVxuICAgICAgICBTaW1wbGVEYXRlRm9ybWF0IHNkZiA9IG5ldyBTaW1wbGVEYXRlRm9ybWF0KFwieXl5eU1NZGRcIik7XG4gICAgICAgIFN0cmluZyBkYXRlUGFydCA9IHNkZi5mb3JtYXQobmV3IERhdGUoKSk7XG4gICAgICAgIFN0cmluZyByYW5kb21QYXJ0ID0gU3RyaW5nLmZvcm1hdChcIiUwNGRcIiwgbmV3IFJhbmRvbSgpLm5leHRJbnQoMTAwMDApKTtcbiAgICAgICAgcmV0dXJuIFwiSERcIiArIGRhdGVQYXJ0ICsgcmFuZG9tUGFydDtcbiAgICB9XG59Li4uXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFUUHRwM1VzcU45Z2hoOXZiVUVpaXB5In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmciLCJmb2xkZXJSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiTm93IEkgY2FuIHNlZSB0aGUgaXNzdWUuIEluIHRoZSBgeHVMeVRoYW5oVG9hbigpYCBtZXRob2QgaW4gRG9pVmVQYW5lbC5qYXZhLCB0aGVyZSdzIGEgcHJvYmxlbSB3aXRoIHRoZSB3YXkgdGhlIG5ldyB0aWNrZXQgaXMgYmVpbmcgY3JlYXRlZC4gTGV0IG1lIGZpeCB0aGlzIGlzc3VlOlxuXG4xLiBUaGUgZXJyb3Igb2NjdXJzIGJlY2F1c2Ugd2hlbiBjcmVhdGluZyBhIG5ldyB0aWNrZXQgKFZlVGF1KSwgdGhlIGN1c3RvbWVyIG5hbWUgaXMgbm90IGJlaW5nIHNldCwgd2hpY2ggaXMgY2F1c2luZyB0aGUgdmFsaWRhdGlvbiBlcnJvciBpbiB0aGUgRG9pVmVEQU9JbXBsLmRhdFZlIG1ldGhvZC5cblxuMi4gVGhlIGxpbmUgYGJvb2xlYW4gbHV1VmVNb2kgPSBEb2lWZURBTy5kYXRWZSh2ZVRhdU1vaSxjaG9OZ29pRGFDaG9uLmdldE1hQ2hvKCkpO2AgaXMgdXNpbmcgYSBzdGF0aWMgcmVmZXJlbmNlIHRvIERvaVZlREFPIGluc3RlYWQgb2YgdGhlIGluc3RhbmNlIHZhcmlhYmxlIGBkb2lWZURBT2AuXG5cbjMuIFRoZSBuZXcgdGlja2V0ICh2ZVRhdU1vaSkgaXMgYmVpbmcgY3JlYXRlZCB3aXRob3V0IHNldHRpbmcgcmVxdWlyZWQgZmllbGRzIGxpa2UgdGVuS2hhY2hIYW5nLCBnaWF5VG8sIG5nYXlEaSwgZG9pVHVvbmcsIGxpY2hUcmluaFRhdSwgZXRjLlxuXG5MZXQgbWUgY3JlYXRlIGEgZml4IGZvciB0aGlzIGlzc3VlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImViNjljY2NmLTY2MGYtNGM1NC04YWM1LTY4NGM0ZDhlNGExNCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMU5YdVphNXVVWUVySjljRmJYRVE3NloiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlNob3cgbWUgdGhlIGRhdFZlIG1ldGhvZCBzaWduYXR1cmUgaW4gdGhlIERvaVZlREFPIGludGVyZmFjZVwifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCdzIGNoZWNrIHRoZSBEb2lWZURBTyBpbnRlcmZhY2UgdG8gdW5kZXJzdGFuZCB0aGUgY29ycmVjdCBtZXRob2Qgc2lnbmF0dXJlIGZvciBkYXRWZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkZpbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMThtdnJTbXh0TXU3THRtVVRIeDFjaXYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyIsImZvbGRlclJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0J3MgY2hlY2sgdGhlIERvaVZlREFPIGludGVyZmFjZSB0byB1bmRlcnN0YW5kIHRoZSBjb3JyZWN0IG1ldGhvZCBzaWduYXR1cmUgZm9yIGRhdFZlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjY0NGY3NmFjLWJjZmEtNGZlMS04YWM4LTFlOTQ0YzIyM2JmOSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDE5VU5LTjFmYlNHRlNYcW9nOVlVZUozIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTaG93IG1lIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgZGF0VmUgbWV0aG9kIGluIERvaVZlREFPSW1wbC5qYXZhXCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJIHNlZSB0aGUgaXNzdWUgbm93LiBUaGUgRG9pVmVEQU8gaW50ZXJmYWNlIGhhcyBhIGBkYXRWZShWZVRhdSB2ZVRhdSlgIG1ldGhvZCwgYnV0IGluIHRoZSBEb2lWZVBhbmVsLmphdmEgZmlsZSwgaXQncyBiZWluZyBjYWxsZWQgd2l0aCB0d28gcGFyYW1ldGVyczogYERvaVZlREFPLmRhdFZlKHZlVGF1TW9pLCBjaG9OZ29pRGFDaG9uLmdldE1hQ2hvKCkpYC4gVGhpcyBpcyBpbmNvcnJlY3QuXG5cbkxldCBtZSBjaGVjayB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIGRhdFZlIG1ldGhvZCBpbiBEb2lWZURBT0ltcGwgdG8gdW5kZXJzdGFuZCB3aGF0IHBhcmFtZXRlcnMgaXQgYWN0dWFsbHkgbmVlZHM6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9Eb2lWZURBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxuaW1wb3J0IG1vZGVsLkNob05nb2k7XG5pbXBvcnQgbW9kZWwuS2hhY2hIYW5nO1xuaW1wb3J0IG1vZGVsLlRyYW5nVGhhaVZlVGF1O1xuaW1wb3J0IG1vZGVsLlZlVGF1O1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlO1xuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcblxucHVibGljIGludGVyZmFjZSBEb2lWZURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgVmVUYXUgZ2V0VmVUYXUoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZG9pVmUoVmVUYXUgdmVUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxWZVRhdT4gZ2V0VmVUYXVCeVRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB0ZXN0Q29ubmVjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxUcmFuZ1RoYWlWZVRhdT4gZ2V0QWxsVHJhbmdUaGFpVmUoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gVGjDqm0gY2jhu6ljIG7Eg25nIG3hu5tpXG4gICAgYm9vbGVhbiBkYXRWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGh1eVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gdGhhbmhUb2FuVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBjYXBOaGF0VHJhbmdUaGFpVmUoU3RyaW5nIG1hVmUsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBLaGFjaEhhbmcgZ2V0S2hhY2hIYW5nQnlNYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIHZvaWQgYmVnaW5UcmFuc2FjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgdm9pZCBjb21taXRUcmFuc2FjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgdm9pZCByb2xsYmFja1RyYW5zYWN0aW9uKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL1RyYUN1dVZlREFPLmphdmFcbi4uLlxuXG5wdWJsaWMgaW50ZXJmYWNlIFRyYUN1dVZlREFPIGV4dGVuZHMgUmVtb3RlIHtcblxuICAgIFZlVGF1IHRpbVZlVGF1VGhlb01hKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxWZVRhdT4gdGltRGFuaFNhY2hWZVRhdVRoZW9NYShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIENoaVRpZXRIb2FEb24gdGltQ2hpVGlldEhvYURvblRoZW9NYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxWZVRhdT4gdGltVmVUYXVUaGVvR2lheVRvKFN0cmluZyBnaWF5VG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBMaXN0PFZlVGF1PiB0aW1WZVRhdVRoZW9UZW5LSChTdHJpbmcgdGVuS2hhY2hIYW5nKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxWZVRhdT4gdGltVmVUYXVUaGVvQ2hpdGlldChTdHJpbmcgdGVuS2hhY2hIYW5nLCBTdHJpbmcgZ2lheVRvLCBMb2NhbERhdGUgbmdheURpLCBTdHJpbmcgbWFDaG9OZ29pLCBTdHJpbmcgZG9pVHVvbmcpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBMaXN0PFZlVGF1PiB0aW1WZVRhdVRoZW9UZW5LSFZhVGhvaUdpYW4oU3RyaW5nIGhvVGVuLCBMb2NhbERhdGUgbmdheURpRnJvbSwgTG9jYWxEYXRlIG5nYXlEaVRvKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgYm9vbGVhbiB0ZXN0Q29ubmVjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59Li4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9WZVRhdURBTy5qYXZhXG4uLi5cblxuLyoqXG4gKiBAROG7sSDDoW46IFBoYW5UYW5KYXZhTmhvbUdQVFxuICogQENsYXNzOiBWZURBT1xuICogQFThuqFvIHbDoG8gbmfDoHk6IDE4LzA0LzIwMjVcbiAqIEBUw6FjIGdp4bqjOiBOZ3V5ZW4gSHV1IFNhbmdcbiAqL1xucHVibGljIGludGVyZmFjZSBWZVRhdURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgYm9vbGVhbiBzYXZlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8VmVUYXU+IGdldEFsbExpc3QoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIFZlVGF1IGdldEJ5SWQoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gdXBkYXRlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZGVsZXRlKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFZlVGF1PiBnZXRCeUludm9pY2VJZChTdHJpbmcgaW52b2ljZUlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgYm9vbGVhbiB1cGRhdGVTdGF0dXNUb1JldHVybmVkKFN0cmluZyB0aWNrZXRJZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBIb2FEb24gZ2V0SG9hRG9uVGhhbmhUb2FuQnlNYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIEtoYWNoSGFuZyBnZXRLaGFjaEhhbmdCeU1hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBNYXA8U3RyaW5nLCBTdHJpbmc+IGdldFRob25nVGluR2FCeU1hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59Li4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9UcmFWZURBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxucHVibGljIGludGVyZmFjZSBUcmFWZURBTyB7XG4gICAgU3RyaW5nIGdldFRlblR1eWVuQnlNYVZlKFN0cmluZyBtYVZlKTtcbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vQ2hvTmdvaURvaVZlREFPLmphdmFcbi4uLlxuXG5wdWJsaWMgaW50ZXJmYWNlIENob05nb2lEb2lWZURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgLy8gTOG6pXkgZGFuaCBzw6FjaCBjaOG7lyBuZ+G7k2kgdGhlbyB0b2EgdMOgdVxuICAgIExpc3Q8Q2hvTmdvaT4gZ2V0Q2hvTmdvaUJ5VG9hVGF1KFN0cmluZyBtYVRvYVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIEtp4buDbSB0cmEgY2jhu5cgbmfhu5NpIGPDsyBraOG6oyBk4bulbmcga2jDtG5nICh0aW5oX3RyYW5nID0gdHJ1ZSlcbiAgICBib29sZWFuIGtpZW1UcmFDaG9OZ29pS2hhRHVuZyhTdHJpbmcgbWFDaG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBLaeG7g20gdHJhIGNo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCB0cm9uZyBt4buZdCBs4buLY2ggdHLDrG5oIGPhu6UgdGjhu4MgY2jGsGFcbiAgICBib29sZWFuIGtpZW1UcmFDaG9OZ29pRGFEYXQoU3RyaW5nIG1hQ2hvLCBTdHJpbmcgbWFMaWNoVHJpbmgpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBLaMOzYSBjaOG7lyBuZ+G7k2kgdOG6oW0gdGjhu51pIChraGkga2jDoWNoIGjDoG5nIGNo4buNbilcbiAgICBib29sZWFuIGtob2FDaG9OZ29pKFN0cmluZyBtYUNobywgU3RyaW5nIG1hTGljaFRyaW5oLCBTdHJpbmcgc2Vzc2lvbklkLCBsb25nIHRob2lHaWFuS2hvYU1pbGxpcykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIEjhu6d5IGtow7NhIGNo4buXIG5n4buTaVxuICAgIGJvb2xlYW4gaHV5S2hvYUNob05nb2koU3RyaW5nIG1hQ2hvLCBTdHJpbmcgbWFMaWNoVHJpbmgsIFN0cmluZyBzZXNzaW9uSWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSBraOG6oyBk4bulbmcgY+G7p2EgY2jhu5cgbmfhu5NpICjEkWFuZyBz4butYSBjaOG7r2EgaGF5IGtow7RuZylcbiAgICBib29sZWFuIGNhcE5oYXRLaGFOYW5nU3VEdW5nQ2hvTmdvaShTdHJpbmcgbWFDaG8sIGJvb2xlYW4ga2hhRHVuZykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIMSQ4bq3dCBs4bqhaSB0cuG6oW5nIHRow6FpIMSR4bq3dCBjaOG7lyBuZ+G7k2kgZOG7sWEgdHLDqm4gdsOpXG4gICAgaW50IGRvbmdCb1RyYW5nVGhhaURhdENobygpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyDEkMSDbmcga8O9IGNsaWVudCDEkeG7gyBuaOG6rW4gdGjDtG5nIGLDoW8ga2hpIGPDsyB0aGF5IMSR4buVaSB0cuG6oW5nIHRow6FpIGNo4buXIG5n4buTaVxuICAgIHZvaWQgZGFuZ0t5Q2xpZW50Q2hvVGhvbmdCYW8oQ2hvTmdvaUNhbGxiYWNrIGNhbGxiYWNrKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gSOG7p3kgxJHEg25nIGvDvSBjbGllbnRcbiAgICB2b2lkIGh1eURhbmdLeUNsaWVudENob1Rob25nQmFvKENob05nb2lDYWxsYmFjayBjYWxsYmFjaykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGtpZW1UcmFDaG9OZ29pRGFEYXRUcmVuSGVUSG9uZyhTdHJpbmcgbWFDaG8sIFN0cmluZyBtYVZlTG9haVRydSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFN0cmluZz4gbGF5RGFuaFNhY2hMaWNoVHJpbmhEYURhdENobyhTdHJpbmcgbWFDaG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL1RvYVRhdURvaVZlREFPLmphdmFcbnBhY2thZ2UgZGFvO1xuXG5pbXBvcnQgbW9kZWwuVG9hVGF1O1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlO1xuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcblxucHVibGljIGludGVyZmFjZSBUb2FUYXVEb2lWZURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgLy8gTOG6pXkgZGFuaCBzw6FjaCB0b2EgdMOgdSB0aGVvIG3DoyB0w6B1XG4gICAgTGlzdDxUb2FUYXU+IGdldFRvYVRhdUJ5TWFUYXUoU3RyaW5nIG1hVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vVGhvbmdLZURBTy5qYXZhXG4uLi5cblxuLyoqXG4gKiBJbnRlcmZhY2UgY2hvIHZp4buHYyB0aOG7kW5nIGvDqiBk4buvIGxp4buHdSB2w6kgdMOgdSBxdWEgUk1JXG4gKi9cbnB1YmxpYyBpbnRlcmZhY2UgVGhvbmdLZURBTyBleHRlbmRzIFJlbW90ZSB7XG5cbiAgICAvKipcbiAgICAgKiBUaOG7kW5nIGvDqiBz4buRIGzGsOG7o25nIHbDqSB0aGVvIHRo4budaSBnaWFuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHVOZ2F5IG5nw6B5IGLhuq90IMSR4bqndSB0aOG7kW5nIGvDqlxuICAgICAqIEBwYXJhbSBkZW5OZ2F5IG5nw6B5IGvhur90IHRow7pjIHRo4buRbmcga8OqXG4gICAgICogQHBhcmFtIGxvYWlUaG9pR2lhbiBsb+G6oWkgdGjhu51pIGdpYW4gKE5nw6B5LCBUdeG6p24sIFRow6FuZywgUXXDvSwgTsSDbSlcbiAgICAgKiBAcmV0dXJuIGRhbmggc8OhY2gga+G6v3QgcXXhuqMgdGjhu5FuZyBrw6pcbiAgICAgKiBAdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiBs4buXaSBSTUlcbiAgICAgKi9cbiAgICBMaXN0PEtldFF1YVRob25nS2VWZT4gdGhvbmdLZVZlVGhlb1Rob2lHaWFuKFxuICAgICAgICAgICAgTG9jYWxEYXRlIHR1TmdheSxcbiAgICAgICAgICAgIExvY2FsRGF0ZSBkZW5OZ2F5LFxuICAgICAgICAgICAgU3RyaW5nIGxvYWlUaG9pR2lhbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8qKlxuICAgICAqIEtp4buDbSB0cmEga+G6v3QgbuG7kWkgZGF0YWJhc2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4gdHJ1ZSBu4bq/dSBr4bq/dCBu4buRaSB0aMOgbmggY8O0bmdcbiAgICAgKiBAdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiBs4buXaSBSTUlcbiAgICAgKi9cbiAgICBib29sZWFuIHRlc3RDb25uZWN0aW9uKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9Eb2lWZURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGRhby5Eb2lWZURBTztcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eU1hbmFnZXI7XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlUcmFuc2FjdGlvbjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLk5vUmVzdWx0RXhjZXB0aW9uO1xuaW1wb3J0IG1vZGVsLio7XG5pbXBvcnQgdXRpbC5KUEFVdGlsO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEucm1pLnNlcnZlci5VbmljYXN0UmVtb3RlT2JqZWN0O1xuaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGU7XG5pbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuVVVJRDtcblxucHVibGljIGNsYXNzIERvaVZlREFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBEb2lWZURBTyB7XG5cbiAgICBwdWJsaWMgRG9pVmVEQU9JbXBsKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIC8vIEtow7RuZyBraOG7n2kgdOG6oW8gRW50aXR5TWFuYWdlciB0cm9uZyBjb25zdHJ1Y3RvclxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBWZVRhdSBnZXRWZVRhdShTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgVmVUYXUgdmVUYXUgPSBudWxsO1xuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBkYXRWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdsOpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIFZlVGF1IHZlVGF1ID0gZW0uZmluZChWZVRhdS5jbGFzcywgbWFWZSk7XG4gICAgICAgICAgICBpZiAodmVUYXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgdsOpIChjaOG7iSBo4buneSDEkcaw4bujYyB2w6kg4bufIHRy4bqhbmcgdGjDoWkgQ0hPX1hBQ19OSEFOIGhv4bq3YyBEQV9USEFOSF9UT0FOKVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTiAmJlxuICAgICAgICAgICAgICAgICAgICB2ZVRhdS5nZXRUcmFuZ1RoYWkoKSAhPSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdp4bqjaSBwaMOzbmcgY2jhu5cgbmfhu5NpXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0Q2hvTmdvaSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBDaG9OZ29pIGNob05nb2kgPSB2ZVRhdS5nZXRDaG9OZ29pKCk7XG4gICAgICAgICAgICAgICAgY2hvTmdvaS5zZXRUaW5oVHJhbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGVtLm1lcmdlKGNob05nb2kpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIERBX1RSQVxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkRBX1RSQSk7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4uLi5cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBib29sZWFuIHRoYW5oVG9hblZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdsOpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIFZlVGF1IHZlVGF1ID0gZW0uZmluZChWZVRhdS5jbGFzcywgbWFWZSk7XG4gICAgICAgICAgICBpZiAodmVUYXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgdsOpIChjaOG7iSB0aGFuaCB0b8OhbiDEkcaw4bujYyB2w6kg4bufIHRy4bqhbmcgdGjDoWkgQ0hPX1hBQ19OSEFOKVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTikge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIERBX1RIQU5IX1RPQU5cbiAgICAgICAgICAgIHZlVGF1LnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKHZlVGF1KTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gY2FwTmhhdFRyYW5nVGhhaVZlKFN0cmluZyBtYVZlLCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB2w6kgY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgVmVUYXUgdmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCBtYVZlKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqVxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKHRyYW5nVGhhaSk7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIHRoaXMgbWV0aG9kIHRvIHlvdXIgZXhpc3RpbmcgRG9pVmVEQU9JbXBsIGNsYXNzXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgS2hhY2hIYW5nIGdldEtoYWNoSGFuZ0J5TWFWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICBLaGFjaEhhbmcga2hhY2hIYW5nID0gbnVsbDtcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9UcmFWZURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW50aXR5TWFuYWdlcjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLk5vUmVzdWx0RXhjZXB0aW9uO1xuaW1wb3J0IHV0aWwuSlBBVXRpbDtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlbW90ZU9iamVjdDtcblxucHVibGljIGNsYXNzIFRyYVZlREFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBkYW8uVHJhVmVEQU8ge1xuICAgIHByaXZhdGUgRW50aXR5TWFuYWdlciBlbTtcblxuICAgIHB1YmxpYyBUcmFWZURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgdGhpcy5lbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBTdHJpbmcgZ2V0VGVuVHV5ZW5CeU1hVmUoU3RyaW5nIG1hVmUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJcIlwiXG4gICAgICAgICAgICBTRUxFQ1QgdHQudGVuVHV5ZW5cbiAgICAgICAgICAgIEZST00gVmVUYXUgdnRcbiAgICAgICAgICAgIEpPSU4gdnQubGljaFRyaW5oVGF1IGx0dFxuICAgICAgICAgICAgSk9JTiBsdHQudGF1IHRcbiAgICAgICAgICAgIEpPSU4gdC50dXllblRhdSB0dFxuICAgICAgICAgICAgV0hFUkUgdnQubWFWZSA9IDptYVZlXG4gICAgICAgIFwiXCJcIjtcblxuICAgICAgICAgICAgcmV0dXJuIGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFN0cmluZy5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hVmVcIiwgbWFWZSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuICAgICAgICB9IGNhdGNoIChOb1Jlc3VsdEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gS2jDtG5nIHTDrG0gdGjhuqV5XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vTmhhblZpZW5EQU8uamF2YVxucGFja2FnZSBkYW87XG5cbmltcG9ydCBtb2RlbC5OaGFuVmllbjtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZTtcbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5cbnB1YmxpYyBpbnRlcmZhY2UgTmhhblZpZW5EQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIE5oYW5WaWVuIGdldG5oYW52aWVuQnlJZChTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBib29sZWFuIHNhdmUoTmhhblZpZW4gbnYpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBib29sZWFuIHVwZGF0ZShOaGFuVmllbiBudikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIGJvb2xlYW4gZGVsZXRlKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIExpc3Q8TmhhblZpZW4+IGdldEFsbE5oYW5WaWVuKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHRlc3RDb25uZWN0aW9uKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9UdXllblRhdURBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxuaW1wb3J0IG1vZGVsLlR1eWVuVGF1O1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlO1xuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcblxucHVibGljIGludGVyZmFjZSBUdXllblRhdURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgVHV5ZW5UYXUgZ2V0TGlzdFR1eWVuVGF1QnlHYURpR2FEZW4oU3RyaW5nIGdhRGksIFN0cmluZyBnYURlbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFR1eWVuVGF1PiBnZXRMaXN0VHV5ZW5UYXUoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIFR1eWVuVGF1IGdldFR1eWVuVGF1QnlJZChTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBzYXZlKFR1eWVuVGF1IHR1eWVuVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZGVsZXRlKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHVwZGF0ZShUdXllblRhdSB0dXllblRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBUdXllblRhdSBnZXRUdXllblRhdUJ5TmFtZShTdHJpbmcgbmFtZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBUdXllblRhdSBnZXRMaXN0VHV5ZW5UYXVCeURpZW1EaURpZW1EZW4oU3RyaW5nIGRpZW1EaSwgU3RyaW5nIGRpZW1EZW4pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0xvYWlIb2FEb25EQU8uamF2YVxucGFja2FnZSBkYW87XG5cbmltcG9ydCBtb2RlbC5Mb2FpSG9hRG9uO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlO1xuXG5wdWJsaWMgaW50ZXJmYWNlIExvYWlIb2FEb25EQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIExvYWlIb2FEb24gZmluZEJ5SWQoU3RyaW5nIGlkKSB0aHJvd3MgRXhjZXB0aW9uO1xufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9DaG9OZ29pREFPLmphdmFcbnBhY2thZ2UgZGFvO1xuXG5pbXBvcnQgbW9kZWwuQ2hvTmdvaTtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTWFwO1xuXG5wdWJsaWMgaW50ZXJmYWNlIENob05nb2lEQU8ge1xuICAgIE1hcDxTdHJpbmcsIFN0cmluZz4gZ2V0QXZhaWxhYmxlU2VhdHNNYXBCeVNjaGVkdWxlQW5kVG9hKFN0cmluZyBtYUxpY2gsIFN0cmluZyBtYVRvYSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIENob05nb2kgZ2V0QnlJZChTdHJpbmcgaWQpO1xuXG4gICAgcHVibGljIExpc3Q8Q2hvTmdvaT4gZ2V0TGlzdEJ5VG9hKFN0cmluZyBtYVRvYSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9UcmFDdXVWZURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGRhby5UcmFDdXVWZURBTztcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eU1hbmFnZXI7XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlUcmFuc2FjdGlvbjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLlR5cGVkUXVlcnk7XG5pbXBvcnQgbW9kZWwuKjtcbmltcG9ydCB1dGlsLkpQQVV0aWw7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS5ybWkuc2VydmVyLlVuaWNhc3RSZW1vdGVPYmplY3Q7XG5pbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZTtcbmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0O1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuXG5wdWJsaWMgY2xhc3MgVHJhQ3V1VmVEQU9JbXBsIGV4dGVuZHMgVW5pY2FzdFJlbW90ZU9iamVjdCBpbXBsZW1lbnRzIFRyYUN1dVZlREFPIHtcblxuICAgIHB1YmxpYyBUcmFDdXVWZURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgLy8gS2jDtG5nIGto4bufaSB04bqhbyBFbnRpdHlNYW5hZ2VyIHRyb25nIGNvbnN0cnVjdG9yXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFZlVGF1IHRpbVZlVGF1VGhlb01hKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBWZVRhdSB2ZVRhdSA9IG51bGw7XG4uLi5cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBMaXN0PFZlVGF1PiB0aW1EYW5oU2FjaFZlVGF1VGhlb01hKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBMaXN0PFZlVGF1PiBkYW5oU2FjaFZlVGF1ID0gbmV3IEFycmF5TGlzdDw+KCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpQUUwgduG7m2kgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB04bqldCBj4bqjIGThu68gbGnhu4d1IGPhuqduIHRoaeG6v3QgdHJvbmcgbeG7mXQgY8OidSBxdWVyeVxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCB2IEZST00gVmVUYXUgdiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB2LmxpY2hUcmluaFRhdSBsdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCBsdC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB0LnR1eWVuVGF1IHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYuY2hvTmdvaSBjIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2Lm1hVmUgPSA6bWFWZVwiO1xuXG4gICAgICAgICAgICBUeXBlZFF1ZXJ5PFZlVGF1PiBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKTtcbiAgICAgICAgICAgIHF1ZXJ5LnNldFBhcmFtZXRlcihcIm1hVmVcIiwgbWFWZSk7XG5cbiAgICAgICAgICAgIGRhbmhTYWNoVmVUYXUgPSBxdWVyeS5nZXRSZXN1bHRMaXN0KCk7XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0xpY2hUcmluaFRhdURBTy5qYXZhXG4uLi5cblxucHVibGljIGludGVyZmFjZSBMaWNoVHJpbmhUYXVEQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIExpc3Q8TGljaFRyaW5oVGF1PiBnZXRBbGxMaXN0KCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaWNoVHJpbmhUYXUgZ2V0QnlJZChTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBzYXZlKExpY2hUcmluaFRhdSBsaWNoVHJpbmhUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB1cGRhdGUoTGljaFRyaW5oVGF1IGxpY2hUcmluaFRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGRlbGV0ZShMaWNoVHJpbmhUYXUgbGljaFRyaW5oVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZGVsZXRlKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PExpY2hUcmluaFRhdT4gZ2V0TGlzdExpY2hUcmluaFRhdUJ5RGF0ZShMb2NhbERhdGUgZGF0ZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PExpY2hUcmluaFRhdT4gZ2V0TGlzdExpY2hUcmluaFRhdUJ5RGF0ZUFuZEdhRGkoTG9jYWxEYXRlIGRhdGUsIFN0cmluZyBnYURpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8TGljaFRyaW5oVGF1PiBnZXRMaXN0TGljaFRyaW5oVGF1QnlEYXRlQW5kR2FEaUdhRGVuKExvY2FsRGF0ZSBkYXRlLCBTdHJpbmcgZ2FEaSwgU3RyaW5nIGdhRGVuKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9Ib2FEb25EQU8uamF2YVxuLi4uXG5cbi8qKlxuICogQEThu7Egw6FuOiBQaGFuVGFuSmF2YU5ob21HUFRcbiAqIEBJbnRlcmZhY2U6IEhvYURvbkRBT1xuICogQFThuqFvIHbDoG8gbmfDoHk6IDE4LzA0LzIwMjVcbiAqIEBUw6FjIGdp4bqjOiBOZ3V5ZW4gSHV1IFNhbmdcbiAqL1xucHVibGljIGludGVyZmFjZSBIb2FEb25EQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIC8vIENyZWF0ZTogVGjDqm0gaMOzYSDEkcahbiBt4bubaVxuICAgIGJvb2xlYW4gc2F2ZUhvYURvbihIb2FEb24gaG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gUmVhZDogTOG6pXkgZGFuaCBzw6FjaCBow7NhIMSRxqFuXG4gICAgTGlzdDxIb2FEb24+IGdldEFsbEhvYURvbnMoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gUmVhZDogVMOsbSBow7NhIMSRxqFuIHRoZW8gbcOjIGjDs2EgxJHGoW5cbiAgICBIb2FEb24gZ2V0SG9hRG9uQnlJZChTdHJpbmcgbWFIRCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIFVwZGF0ZTogQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gaMOzYSDEkcahblxuICAgIGJvb2xlYW4gdXBkYXRlSG9hRG9uKEhvYURvbiBob2FEb24pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBEZWxldGU6IFjDs2EgaMOzYSDEkcahbiB0aGVvIG3DoyBow7NhIMSRxqFuXG4gICAgYm9vbGVhbiBkZWxldGVIb2FEb24oU3RyaW5nIG1hSEQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBSZXRyaWV2ZSBpbnZvaWNlcyBieSBjdXN0b21lciBJRFxuICAgIExpc3Q8SG9hRG9uPiBnZXRCeUN1c3RvbWVySWQoU3RyaW5nIGN1c3RvbWVySWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBTdHJpbmcgZ2VuZXJhdGVNYUhvYURvbihMb2NhbERhdGUgbmdheSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMb2FpSG9hRG9uIGdldExvYWlIb2FEb25CeUlkKFN0cmluZyBtYUxvYWlIRCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIExpc3Q8SG9hRG9uPiB0aW1LaWVtSG9hRG9uKFN0cmluZyBtYUhvYURvbiwgU3RyaW5nIHNvRGllblRob2FpLCBTdHJpbmcgbWFOaGFuVmllbiwgICBMb2NhbERhdGUgdHVOZ2F5LCBMb2NhbERhdGUgZGVuTmdheSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIEhvYURvbiBnZXRIb2FEb25CeU1hKFN0cmluZyBtYUhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PEhvYURvbj4gZ2V0SG9hRG9uc0J5RGF0ZVJhbmdlKExvY2FsRGF0ZSBzdGFydERhdGUsIExvY2FsRGF0ZSBlbmREYXRlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8SG9hRG9uPiBnZXRIb2FEb25zQnlEYXRlUmFuZ2VBbmRTaGlmdChMb2NhbERhdGUgc3RhcnREYXRlLCBMb2NhbERhdGUgZW5kRGF0ZSwgaW50IGNhKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9WZVRhdURBT0ltcGwuamF2YVxuLi4uXG5cbnB1YmxpYyBjbGFzcyBWZVRhdURBT0ltcGwgZXh0ZW5kcyBVbmljYXN0UmVtb3RlT2JqZWN0IGltcGxlbWVudHMgVmVUYXVEQU8ge1xuICAgIHB1YmxpYyBWZVRhdURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcblxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBMaXN0PFZlVGF1PiBnZXRBbGxMaXN0KCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICBMaXN0PFZlVGF1PiBsaXN0ID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG4gICAgICAgICAgICBsaXN0ID0gZW0uY3JlYXRlUXVlcnkoXCJTRUxFQ1QgdnQgRlJPTSBWZVRhdSB2dFwiLCBWZVRhdS5jbGFzcykuZ2V0UmVzdWx0TGlzdCgpO1xuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggVmVUYXVcIik7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBWZVRhdSBnZXRCeUlkKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgcmV0dXJuIGVtLmZpbmQoVmVUYXUuY2xhc3MsIGlkKTtcbiAgICB9XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0xpY2hMYW1WaWVjREFPLmphdmFcbnBhY2thZ2UgZGFvO1xuXG5pbXBvcnQgamFrYXJ0YS50cmFuc2FjdGlvbi5UcmFuc2FjdGlvbmFsO1xuaW1wb3J0IG1vZGVsLkxpY2hMYW1WaWVjO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGU7XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5cbnB1YmxpYyBpbnRlcmZhY2UgTGljaExhbVZpZWNEQU8ge1xuICAgIExpY2hMYW1WaWVjIGdldExpY2hMYW1WaWVjQnlJZChTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBib29sZWFuIHNhdmUoTGljaExhbVZpZWMgbGx2KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgYm9vbGVhbiB1cGRhdGUoTGljaExhbVZpZWMgbGx2KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgYm9vbGVhbiBkZWxldGUoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxMaWNoTGFtVmllYz4gZ2V0Q2FMYW1WaWVjRm9yRGF0ZShTdHJpbmcgbWFOaGFuVmllbiwgTG9jYWxEYXRlIHRvZGF5KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgQFRyYW5zYWN0aW9uYWxcbiAgICB2b2lkIHVwZGF0ZVRyYW5nVGhhaShTdHJpbmcgbWFMaWNoTGFtVmllYywgU3RyaW5nIHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vTG9haUtoYWNoSGFuZ0RBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxuaW1wb3J0IG1vZGVsLkxvYWlLaGFjaEhhbmc7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGU7XG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuXG4vKipcbiAqIEBE4buxIMOhbjogUGhhblRhbkphdmFOaG9tR1BUXG4gKiBAQ2xhc3M6IExvYWlLaGFjaEhhbmdEQU9cbiAqIEBU4bqhbyB2w6BvIG5nw6B5OiAxOC8wNC8yMDI1XG4gKiBAVMOhYyBnaeG6ozogTmd1eWVuIEh1dSBTYW5nXG4gKi9cbnB1YmxpYyBpbnRlcmZhY2UgTG9haUtoYWNoSGFuZ0RBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgTGlzdDxMb2FpS2hhY2hIYW5nPiBnZXRBbGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExvYWlLaGFjaEhhbmcgZmluZEJ5SWQoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gc2F2ZShMb2FpS2hhY2hIYW5nIGxvYWlLaGFjaEhhbmcpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB1cGRhdGUoTG9haUtoYWNoSGFuZyBsb2FpS2hhY2hIYW5nKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZGVsZXRlKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuLy8gICAgIExpc3Q8TG9haUtoYWNoSGFuZz4gZ2V0QWxsTGlzdCgpO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9Ub2FUYXVEb2lWZURBT0ltcGwuamF2YVxuLi4uXG5cbnB1YmxpYyBjbGFzcyBUb2FUYXVEb2lWZURBT0ltcGwgZXh0ZW5kcyBVbmljYXN0UmVtb3RlT2JqZWN0IGltcGxlbWVudHMgVG9hVGF1RG9pVmVEQU8ge1xuXG4gICAgLy8gQ2FjaGUgY2hvIGRhbmggc8OhY2ggdG9hIHTDoHUsIHPhu60gZOG7pW5nIENvbmN1cnJlbnRIYXNoTWFwIMSR4buDIMSR4bqjbSBi4bqjbyB0aHJlYWQtc2FmZVxuICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIE1hcDxTdHJpbmcsIExpc3Q8VG9hVGF1Pj4gdG9hVGF1Q2FjaGUgPSBuZXcgLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTlh1WmE1dVVZRXJKOWNGYlhFUTc2WiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIiwiZm9sZGVyUm9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6Ikkgc2VlIHRoZSBpc3N1ZSBub3cuIFRoZSBEb2lWZURBTyBpbnRlcmZhY2UgaGFzIGEgYGRhdFZlKFZlVGF1IHZlVGF1KWAgbWV0aG9kLCBidXQgaW4gdGhlIERvaVZlUGFuZWwuamF2YSBmaWxlLCBpdCdzIGJlaW5nIGNhbGxlZCB3aXRoIHR3byBwYXJhbWV0ZXJzOiBgRG9pVmVEQU8uZGF0VmUodmVUYXVNb2ksIGNob05nb2lEYUNob24uZ2V0TWFDaG8oKSlgLiBUaGlzIGlzIGluY29ycmVjdC5cblxuTGV0IG1lIGNoZWNrIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgZGF0VmUgbWV0aG9kIGluIERvaVZlREFPSW1wbCB0byB1bmRlcnN0YW5kIHdoYXQgcGFyYW1ldGVycyBpdCBhY3R1YWxseSBuZWVkczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIwMDI3ODc1NC02NDYzLTQ0NzMtYWRhOS1mYzk0ZDU0ODVkYWQiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFGZ1RLaUNyN0VVNmllWW1TU2JrSm9uIiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImZpbGVfcGF0aFwiOiBcIlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWxfRml4LmphdmFcIiwgXCJmaWxlX2NvbnRlbnRcIjogXCIvLyBUaGlzIGlzIGEgZml4IGZvciB0aGUgeHVMeVRoYW5oVG9hbiBtZXRob2QgaW4gRG9pVmVQYW5lbC5qYXZhXFxuXFxucHJpdmF0ZSBib29sZWFuIHh1THlUaGFuaFRvYW4oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcXG4gICAgdHJ5IHtcXG4gICAgICAgIC8vIDEuIFRcXHUwMGVjbSBraFxcdTAwZTFjaCBoXFx1MDBlMG5nIHRcXHUxZWViIG1cXHUwMGUzIHZcXHUwMGU5XFxuICAgICAgICBLaGFjaEhhbmcga2hhY2hIYW5nID0gZG9pVmVEQU8uZ2V0S2hhY2hIYW5nQnlNYVZlKHZlVGF1SGllblRhaS5nZXRNYVZlKCkpO1xcbiAgICAgICAgaWYgKGtoYWNoSGFuZyA9PSBudWxsKSB7XFxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcXFwiS2hcXHUwMGY0bmcgdFxcdTAwZWNtIHRoXFx1MWVhNXkgdGhcXHUwMGY0bmcgdGluIGtoXFx1MDBlMWNoIGhcXHUwMGUwbmchXFxcIik7XFxuICAgICAgICB9XFxuICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXFxcIlxcdTAxMTBcXHUwMGUzIHRcXHUwMGVjbSB0aFxcdTFlYTV5IEtoYWNoSGFuZzogXFxcIiArIGtoYWNoSGFuZy5nZXRNYUtoYWNoSGFuZygpKTtcXG5cXG4gICAgICAgIC8vIFRcXHUxZWExbyB2XFx1MDBlOSBtXFx1MWVkYmkgdlxcdTFlZGJpIFxcdTAxMTFcXHUxZWE3eSBcXHUwMTExXFx1MWVlNyB0aFxcdTAwZjRuZyB0aW5cXG4gICAgICAgIFZlVGF1IHZlVGF1TW9pID0gbmV3IFZlVGF1KCk7XFxuICAgICAgICB2ZVRhdU1vaS5zZXRNYVZlKGdlbmVyYXRlTWFWZSgpKTtcXG4gICAgICAgIFxcbiAgICAgICAgLy8gU2FvIGNoXFx1MDBlOXAgdGhcXHUwMGY0bmcgdGluIHRcXHUxZWViIHZcXHUwMGU5IGhpXFx1MWVjN24gdFxcdTFlYTFpXFxuICAgICAgICB2ZVRhdU1vaS5zZXRUZW5LaGFjaEhhbmcodmVUYXVIaWVuVGFpLmdldFRlbktoYWNoSGFuZygpKTtcXG4gICAgICAgIHZlVGF1TW9pLnNldEdpYXlUbyh2ZVRhdUhpZW5UYWkuZ2V0R2lheVRvKCkpO1xcbiAgICAgICAgdmVUYXVNb2kuc2V0TmdheURpKHZlVGF1SGllblRhaS5nZXROZ2F5RGkoKSk7XFxuICAgICAgICB2ZVRhdU1vaS5zZXREb2lUdW9uZyh2ZVRhdUhpZW5UYWkuZ2V0RG9pVHVvbmcoKSk7XFxuICAgICAgICB2ZVRhdU1vaS5zZXRMaWNoVHJpbmhUYXUobGljaFRyaW5oRGFDaG9uKTtcXG4gICAgICAgIHZlVGF1TW9pLnNldENob05nb2koY2hvTmdvaURhQ2hvbik7ICAvLyBcXHUwMTEwXFx1MWViN3QgY2hcXHUxZWQ3IG5nXFx1MWVkM2kgdHJcXHUwMWIwXFx1MWVkYmMga2hpIGdcXHUxZWNkaSBkYXRWZVxcbiAgICAgICAgdmVUYXVNb2kuc2V0S2h1eWVuTWFpKGtodXllbk1haURhQ2hvbik7XFxuICAgICAgICB2ZVRhdU1vaS5zZXRHaWFWZSh2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSk7XFxuICAgICAgICB2ZVRhdU1vaS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKTtcXG4gICAgICAgIFxcbiAgICAgICAgLy8gTFxcdTAxYjB1IHZcXHUwMGU5IG1cXHUxZWRiaSAtIGNoXFx1MWVjOSB0cnV5XFx1MWVjMW4gdmVUYXVNb2ksIGtoXFx1MDBmNG5nIHRydXlcXHUxZWMxbiBtXFx1MDBlMyBjaFxcdTFlZDcgbmdcXHUxZWQzaVxcbiAgICAgICAgYm9vbGVhbiBsdXVWZU1vaSA9IGRvaVZlREFPLmRhdFZlKHZlVGF1TW9pKTtcXG4gICAgICAgIGlmICghbHV1VmVNb2kpIHtcXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxcXCJLaFxcdTAwZjRuZyB0aFxcdTFlYzMgdFxcdTFlYTFvIHZcXHUwMGU5IG1cXHUxZWRiaSFcXFwiKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGRvdWJsZSB2YXQgPSAwLjE7IC8vIFZBVCAxMCVcXG4gICAgICAgIGRvdWJsZSB0aWVuVGh1ZSA9IHZlVGF1SGllblRhaS5nZXRHaWFWZSgpICogdmF0O1xcbiAgICAgICAgZG91YmxlIHRoYW5oVGllbiA9IHZlVGF1SGllblRhaS5nZXRHaWFWZSgpICsgdGllblRodWU7XFxuICAgICAgICBkb3VibGUgdG9uZ1RpZW4gPSB0aGFuaFRpZW47XFxuICAgICAgICBcXG4gICAgICAgIC8vIDIuIFRcXHUxZWExbyBoXFx1MDBmM2EgXFx1MDExMVxcdTAxYTFuIG1cXHUxZWRiaVxcbiAgICAgICAgSG9hRG9uIGhvYURvbiA9IG5ldyBIb2FEb24oKTtcXG4gICAgICAgIFN0cmluZyBtYUhEID0gZ2VuZXJhdGVNYUhEKCk7XFxuICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXFxcIkdlbmVyYXRlZCBNYUhEOiBcXFwiICsgbWFIRCk7XFxuICAgICAgICBob2FEb24uc2V0TWFIRChtYUhEKTtcXG4gICAgICAgIGhvYURvbi5zZXROZ2F5TGFwKExvY2FsRGF0ZVRpbWUubm93KCkpO1xcbiAgICAgICAgaG9hRG9uLnNldFRpZW5HaWFtKGdpYVZlQmFuRGF1IC0gdG9uZ1RpZW4pO1xcbiAgICAgICAgaG9hRG9uLnNldFRvbmdUaWVuKHRvbmdUaWVuKTtcXG4gICAgICAgIGhvYURvbi5zZXRLaGFjaEhhbmcoa2hhY2hIYW5nKTtcXG5cXG4gICAgICAgIC8vIERlYnVnZ2luZyB0aGUgTmhhblZpZW4gcmVmZXJlbmNlXFxuICAgICAgICBpZiAobmhhblZpZW5QYW5lbCA9PSBudWxsKSB7XFxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFxcXCJFUlJPUjogbmhhblZpZW5QYW5lbCBpcyBudWxsXFxcIik7XFxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcXFwiVGhpXFx1MWViZnUgdGhcXHUwMGY0bmcgdGluIG5oXFx1MDBlMm4gdmlcXHUwMGVhbiFcXFwiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcXFwiTmhhblZpZW4gaW5mbzogXFxcIiArIG5oYW5WaWVuUGFuZWwuZ2V0Q2xhc3MoKS5nZXROYW1lKCkpO1xcbiAgICAgICAgaG9hRG9uLnNldE52KG5oYW5WaWVuUGFuZWwpO1xcblxcbiAgICAgICAgLy8gR2V0IExvYWlIb2FEb24gYW5kIHZlcmlmeSBpdCBleGlzdHNcXG4gICAgICAgIExvYWlIb2FEb24gbG9haUhvYURvbiA9IGxvYWlIb2FEb25EQU8uZmluZEJ5SWQoXFxcIkxIRDAwMVxcXCIpO1xcbiAgICAgICAgaWYgKGxvYWlIb2FEb24gPT0gbnVsbCkge1xcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcXFwiRVJST1I6IEtoXFx1MDBmNG5nIHRcXHUwMGVjbSB0aFxcdTFlYTV5IGxvXFx1MWVhMWkgaFxcdTAwZjNhIFxcdTAxMTFcXHUwMWExbiBMSEQwMDFcXFwiKTtcXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFxcXCJLaFxcdTAwZjRuZyB0XFx1MDBlY20gdGhcXHUxZWE1eSBsb1xcdTFlYTFpIGhcXHUwMGYzYSBcXHUwMTExXFx1MDFhMW4hXFxcIik7XFxuICAgICAgICB9XFxuICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXFxcIkZvdW5kIExvYWlIb2FEb246IFxcXCIgKyBsb2FpSG9hRG9uLmdldE1hTG9haUhvYURvbigpKTtcXG4gICAgICAgIGhvYURvbi5zZXRMb2FpSG9hRG9uKGxvYWlIb2FEb24pO1xcblxcbiAgICAgICAgLy8gMy4gTFxcdTAxYjB1IGhcXHUwMGYzYSBcXHUwMTExXFx1MDFhMW5cXG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcXFwiQXR0ZW1wdGluZyB0byBzYXZlIEhvYURvbi4uLlxcXCIpO1xcbiAgICAgICAgYm9vbGVhbiBzYXZlZEhvYURvbiA9IGhvYURvbkRBTy5zYXZlSG9hRG9uKGhvYURvbik7XFxuICAgICAgICBpZiAoIXNhdmVkSG9hRG9uKSB7XFxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFxcXCJGYWlsZWQgdG8gc2F2ZSBIb2FEb24hXFxcIik7XFxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcXFwiS2hcXHUwMGY0bmcgdGhcXHUxZWMzIGxcXHUwMWIwdSBoXFx1MDBmM2EgXFx1MDExMVxcdTAxYTFuIVxcXCIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFxcXCJIb2FEb24gc2F2ZWQgc3VjY2Vzc2Z1bGx5OiBcXFwiICsgaG9hRG9uLmdldE1hSEQoKSk7XFxuXFxuICAgICAgICAvLyA0LiBUXFx1MWVhMW8gY2hpIHRpXFx1MWViZnQgaFxcdTAwZjNhIFxcdTAxMTFcXHUwMWExblxcbiAgICAgICAgQ2hpVGlldEhvYURvbiBjaGlUaWV0SG9hRG9uID0gbmV3IENoaVRpZXRIb2FEb24oKTtcXG4gICAgICAgIENoaVRpZXRIb2FEb25JZCBjaGlUaWV0SWQgPSBuZXcgQ2hpVGlldEhvYURvbklkKCk7XFxuICAgICAgICBjaGlUaWV0SWQuc2V0TWFIRChob2FEb24uZ2V0TWFIRCgpKTtcXG4gICAgICAgIGNoaVRpZXRJZC5zZXRNYVZlKHZlVGF1TW9pLmdldE1hVmUoKSk7XFxuICAgICAgICBjaGlUaWV0SG9hRG9uLnNldElkKGNoaVRpZXRJZCk7XFxuICAgICAgICBjaGlUaWV0SG9hRG9uLnNldEhvYURvbihob2FEb24pO1xcbiAgICAgICAgY2hpVGlldEhvYURvbi5zZXRWZVRhdSh2ZVRhdU1vaSk7XFxuICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFNvTHVvbmcoMSk7XFxuICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFZBVCh2YXQpO1xcbiAgICAgICAgY2hpVGlldEhvYURvbi5zZXRUaWVuVGh1ZSh0aWVuVGh1ZSk7XFxuICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFRoYW5oVGllbih0aGFuaFRpZW4pO1xcblxcbiAgICAgICAgLy8gNS4gTFxcdTAxYjB1IGNoaSB0aVxcdTFlYmZ0IGhcXHUwMGYzYSBcXHUwMTExXFx1MDFhMW5cXG4gICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcXFwiQXR0ZW1wdGluZyB0byBzYXZlIENoaVRpZXRIb2FEb24uLi5cXFwiKTtcXG4gICAgICAgIGJvb2xlYW4gc2F2ZWRDaGlUaWV0ID0gY2hpVGlldEhvYURvbkRBTy5zYXZlKGNoaVRpZXRIb2FEb24pO1xcbiAgICAgICAgaWYgKCFzYXZlZENoaVRpZXQpIHtcXG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXFxcIkZhaWxlZCB0byBzYXZlIENoaVRpZXRIb2FEb24hXFxcIik7XFxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcXFwiS2hcXHUwMGY0bmcgdGhcXHUxZWMzIGxcXHUwMWIwdSBjaGkgdGlcXHUxZWJmdCBoXFx1MDBmM2EgXFx1MDExMVxcdTAxYTFuIVxcXCIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFxcXCJDaGlUaWV0SG9hRG9uIHNhdmVkIHN1Y2Nlc3NmdWxseVxcXCIpO1xcblxcbiAgICAgICAgLy8gNi4gQ1xcdTFlYWRwIG5oXFx1MWVhZHQgdHJcXHUxZWExbmcgdGhcXHUwMGUxaSB2XFx1MDBlOSBjXFx1MDE2OSB0aFxcdTAwZTBuaCBEQV9ET0lcXG4gICAgICAgIGJvb2xlYW4gdXBkYXRlZE9sZFRpY2tldCA9IGRvaVZlREFPLmNhcE5oYXRUcmFuZ1RoYWlWZSh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBUcmFuZ1RoYWlWZVRhdS5EQV9ET0kpO1xcbiAgICAgICAgaWYgKCF1cGRhdGVkT2xkVGlja2V0KSB7XFxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFxcXCJGYWlsZWQgdG8gdXBkYXRlIG9sZCB0aWNrZXQgc3RhdHVzIVxcXCIpO1xcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXFxcIktoXFx1MDBmNG5nIHRoXFx1MWVjMyBjXFx1MWVhZHAgbmhcXHUxZWFkdCB0clxcdTFlYTFuZyB0aFxcdTAwZTFpIHZcXHUwMGU5IGNcXHUwMTY5IVxcXCIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFxcXCJPbGQgdGlja2V0IHN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseVxcXCIpO1xcblxcbiAgICAgICAgLy8gNy4gQ1xcdTFlYWRwIG5oXFx1MWVhZHQgdlxcdTAwZTkgaGlcXHUxZWM3biB0XFx1MWVhMWkgdGhcXHUwMGUwbmggdlxcdTAwZTkgbVxcdTFlZGJpXFxuICAgICAgICB2ZVRhdUhpZW5UYWkgPSB2ZVRhdU1vaTtcXG5cXG4gICAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xcbiAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFxcXCJFcnJvciBpbiB4dUx5VGhhbmhUb2FuOiBcXFwiICsgZS5nZXRNZXNzYWdlKCkpO1xcbiAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcXG4gICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXFxcIkxcXHUxZWQ3aSBraGkgeFxcdTFlZWQgbFxcdTAwZmQgdGhhbmggdG9cXHUwMGUxbjogXFxcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcXG4gICAgfVxcbn1cIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkJhc2VkIG9uIG15IGFuYWx5c2lzLCBJIGNhbiBub3cgcHJvdmlkZSBhIGZpeCBmb3IgdGhlIGlzc3VlLiBUaGUgcHJvYmxlbSBpcyBpbiB0aGUgYHh1THlUaGFuaFRvYW4oKWAgbWV0aG9kIGluIERvaVZlUGFuZWwuamF2YS4gVGhlIG1ldGhvZCBpcyBpbmNvcnJlY3RseSBjYWxsaW5nIGBEb2lWZURBTy5kYXRWZSh2ZVRhdU1vaSwgY2hvTmdvaURhQ2hvbi5nZXRNYUNobygpKWAgd2l0aCB0d28gcGFyYW1ldGVycywgYnV0IHRoZSBpbnRlcmZhY2Ugb25seSBkZWZpbmVzIGEgbWV0aG9kIHdpdGggb25lIHBhcmFtZXRlcjogYGRhdFZlKFZlVGF1IHZlVGF1KWAuXG5cbkhlcmUncyB0aGUgZml4IGZvciB0aGUgRG9pVmVQYW5lbC5qYXZhIGZpbGU6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL0RvaVZlREFPSW1wbC5qYXZhXG5wYWNrYWdlIGRhby5pbXBsO1xuXG5pbXBvcnQgZGFvLkRvaVZlREFPO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW50aXR5TWFuYWdlcjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eVRyYW5zYWN0aW9uO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuTm9SZXN1bHRFeGNlcHRpb247XG5pbXBvcnQgbW9kZWwuKjtcbmltcG9ydCB1dGlsLkpQQVV0aWw7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS5ybWkuc2VydmVyLlVuaWNhc3RSZW1vdGVPYmplY3Q7XG5pbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZTtcbmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0O1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuaW1wb3J0IGphdmEudXRpbC5VVUlEO1xuXG5wdWJsaWMgY2xhc3MgRG9pVmVEQU9JbXBsIGV4dGVuZHMgVW5pY2FzdFJlbW90ZU9iamVjdCBpbXBsZW1lbnRzIERvaVZlREFPIHtcblxuICAgIHB1YmxpYyBEb2lWZURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgLy8gS2jDtG5nIGto4bufaSB04bqhbyBFbnRpdHlNYW5hZ2VyIHRyb25nIGNvbnN0cnVjdG9yXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFZlVGF1IGdldFZlVGF1KFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICBWZVRhdSB2ZVRhdSA9IG51bGw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpPSU4gRkVUQ0ggxJHhu4MgdOG6o2kgdHLGsOG7m2MgZOG7ryBsaeG7h3UgbGnDqm4gcXVhbiDEkeG7gyB0csOhbmggbOG7l2kgTGF6eUluaXRpYWxpemF0aW9uRXhjZXB0aW9uXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHZ0IEZST00gVmVUYXUgdnQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5saWNoVHJpbmhUYXUgbHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQuY2hvTmdvaSBjbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmtodXllbk1haSBrbSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGx0dC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHZ0Lm1hVmUgPSA6aWRcIjtcblxuICAgICAgICAgICAgdmVUYXUgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBWZVRhdS5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcImlkXCIsIGlkKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0U2luZ2xlUmVzdWx0KCk7XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB0csaw4bubYyBk4buvIGxp4buHdSBsacOqbiBxdWFuXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHZ0IEZST00gVmVUYXUgdnQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5saWNoVHJpbmhUYXUgbHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQuY2hvTmdvaSBjbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmtodXllbk1haSBrbSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGx0dC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHZ0LnRyYW5nVGhhaSA9IDp0cmFuZ1RoYWlcIjtcblxuICAgICAgICAgICAgbGlzdCA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpXCIsIHRyYW5nVGhhaSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIHbDqSB0aGVvIHRy4bqhbmcgdGjDoWk6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB2w6kgdGhlbyB0cuG6oW5nIHRow6FpXCIsIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4uLi5cblxuICAgICAgICAgICAgLy8gNy4gR2VuZXJhdGUgdGlja2V0IElEIGlmIG5vdCBwcm92aWRlZFxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldE1hVmUoKSA9PSBudWxsIHx8IHZlVGF1LmdldE1hVmUoKS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBTdHJpbmcgbWFWZSA9IFwiVkVcIiArIFVVSUQucmFuZG9tVVVJRCgpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDgpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdmVUYXUuc2V0TWFWZShtYVZlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHRpY2tldCBJRCBhbHJlYWR5IGV4aXN0c1xuICAgICAgICAgICAgICAgIFZlVGF1IGV4aXN0aW5nVmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCB2ZVRhdS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1ZlVGF1ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIk3DoyB2w6kgxJHDoyB04buTbiB04bqhaSB0cm9uZyBo4buHIHRo4buRbmdcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyA4LiBTZXQgdXAgdGlja2V0IGRhdGEgd2l0aCB2YWxpZCBlbnRpdGllc1xuICAgICAgICAgICAgdmVUYXUuc2V0Q2hvTmdvaShjaG9OZ29pKTtcbiAgICAgICAgICAgIHZlVGF1LnNldExpY2hUcmluaFRhdShsaWNoVHJpbmhUYXUpO1xuXG4gICAgICAgICAgICAvLyBTZXQgZGVmYXVsdCBzdGF0dXMgaWYgbm90IHByb3ZpZGVkXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0VHJhbmdUaGFpKCkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZlVGF1LnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pO1xuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiB0aGFuaFRvYW5WZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHbDqSBjw7MgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICBWZVRhdSB2ZVRhdSA9IGVtLmZpbmQoVmVUYXUuY2xhc3MsIG1hVmUpO1xuICAgICAgICAgICAgaWYgKHZlVGF1ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHbDqSAoY2jhu4kgdGhhbmggdG/DoW4gxJHGsOG7o2MgdsOpIOG7nyB0cuG6oW5nIHRow6FpIENIT19YQUNfTkhBTilcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRUcmFuZ1RoYWkoKSAhPSBUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpIHRow6BuaCBEQV9USEFOSF9UT0FOXG4gICAgICAgICAgICB2ZVRhdS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuREFfVEhBTkhfVE9BTik7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvVHJhVmVEQU9JbXBsLmphdmFcbnBhY2thZ2UgZGFvLmltcGw7XG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eU1hbmFnZXI7XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5Ob1Jlc3VsdEV4Y2VwdGlvbjtcbmltcG9ydCB1dGlsLkpQQVV0aWw7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS5ybWkuc2VydmVyLlVuaWNhc3RSZW1vdGVPYmplY3Q7XG5cbnB1YmxpYyBjbGFzcyBUcmFWZURBT0ltcGwgZXh0ZW5kcyBVbmljYXN0UmVtb3RlT2JqZWN0IGltcGxlbWVudHMgZGFvLlRyYVZlREFPIHtcbiAgICBwcml2YXRlIEVudGl0eU1hbmFnZXIgZW07XG5cbiAgICBwdWJsaWMgVHJhVmVEQU9JbXBsKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIHRoaXMuZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgU3RyaW5nIGdldFRlblR1eWVuQnlNYVZlKFN0cmluZyBtYVZlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiXCJcIlxuICAgICAgICAgICAgU0VMRUNUIHR0LnRlblR1eWVuXG4gICAgICAgICAgICBGUk9NIFZlVGF1IHZ0XG4gICAgICAgICAgICBKT0lOIHZ0LmxpY2hUcmluaFRhdSBsdHRcbiAgICAgICAgICAgIEpPSU4gbHR0LnRhdSB0XG4gICAgICAgICAgICBKT0lOIHQudHV5ZW5UYXUgdHRcbiAgICAgICAgICAgIFdIRVJFIHZ0Lm1hVmUgPSA6bWFWZVxuICAgICAgICBcIlwiXCI7XG5cbiAgICAgICAgICAgIHJldHVybiBlbS5jcmVhdGVRdWVyeShqcHFsLCBTdHJpbmcuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYVZlXCIsIG1hVmUpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRTaW5nbGVSZXN1bHQoKTtcbiAgICAgICAgfSBjYXRjaCAoTm9SZXN1bHRFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIEtow7RuZyB0w6xtIHRo4bqleVxuICAgICAgICB9XG4gICAgfVxuXG59XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvVHJhQ3V1VmVEQU9JbXBsLmphdmFcbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKUFFMIHbhu5tpIEpPSU4gRkVUQ0ggxJHhu4MgdOG6o2kgdOG6pXQgY+G6oyBk4buvIGxp4buHdSBj4bqnbiB0aGnhur90IHRyb25nIG3hu5l0IGPDonUgcXVlcnlcbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgdiBGUk9NIFZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5saWNoVHJpbmhUYXUgbHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggbHQudGF1IHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdC50dXllblRhdSB0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB2LmNob05nb2kgYyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGMudG9hVGF1IHRvYSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHRvYS5sb2FpVG9hIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2Lm1hVmUgPSA6bWFWZVwiO1xuXG4gICAgICAgICAgICBUeXBlZFF1ZXJ5PFZlVGF1PiBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKTtcbiAgICAgICAgICAgIHF1ZXJ5LnNldFBhcmFtZXRlcihcIm1hVmVcIiwgbWFWZSk7XG5cbiAgICAgICAgICAgIC8vIGdldFNpbmdsZVJlc3VsdCgpIGPDsyB0aOG7gyBuw6ltIE5vUmVzdWx0RXhjZXB0aW9uIG7hur91IGtow7RuZyB0w6xtIHRo4bqleSBr4bq/dCBxdeG6o1xuICAgICAgICAgICAgLy8gbsOqbiBjaMO6bmcgdGEgY+G6p24gYuG6r3Qgbmdv4bqhaSBs4buHIG7DoHkgdsOgIHjhu60gbMO9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZlVGF1ID0gcXVlcnkuZ2V0U2luZ2xlUmVzdWx0KCk7XG4gICAgICAgICAgICB9IGNhdGNoIChqYWthcnRhLnBlcnNpc3RlbmNlLk5vUmVzdWx0RXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAvLyBLaMO0bmcgdMOsbSB0aOG6pXkgdsOpLCB0cuG6oyB24buBIG51bGxcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VmVUYXU+IHRpbURhbmhTYWNoVmVUYXVUaGVvTWEoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIExpc3Q8VmVUYXU+IGRhbmhTYWNoVmVUYXUgPSBuZXcgQXJyYXlMaXN0PD4oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSlBRTCB24bubaSBKT0lOIEZFVENIIMSR4buDIHThuqNpIHThuqV0IGPhuqMgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dCB0cm9uZyBt4buZdCBjw6J1IHF1ZXJ5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHYgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYubGljaFRyaW5oVGF1IGx0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5jaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYubWFWZSA9IDptYVZlXCI7XG5cbiAgICAgICAgICAgIFR5cGVkUXVlcnk8VmVUYXU+IHF1ZXJ5ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibWFWZVwiLCBtYVZlKTtcblxuICAgICAgICAgICAgZGFuaFNhY2hWZVRhdSA9IHF1ZXJ5LmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIHTDrG0gZGFuaCBzw6FjaCB2w6kgdMOgdSB0aGVvIG3DozogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSB0w6xtIGRhbmggc8OhY2ggdsOpIHTDoHUgdGhlbyBtw6NcIiwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGFuaFNhY2hWZVRhdTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgQ2hpVGlldEhvYURvbiB0aW1DaGlUaWV0SG9hRG9uVGhlb01hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIENoaVRpZXRIb2FEb24gY2hpVGlldEhvYURvbiA9IG51bGw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpQUUwgxJHhu4MgbOG6pXkgY2hpIHRp4bq/dCBow7NhIMSRxqFuIG3hu5tpIG5o4bqldCB0aGVvIG5nw6B5IGzhuq1wXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIGMgRlJPTSBDaGlUaWV0SG9hRG9uIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggYy5ob2FEb24gaCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCBjLnZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGMuaWQubWFWZSA9IDptYVZlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJPUkRFUiBCWSBoLm5nYXlMYXAgREVTQ1wiOyAgLy8gU+G6r3AgeOG6v3AgdGhlbyBuZ8OgeSBs4bqtcCBow7NhIMSRxqFuIG3hu5tpIG5o4bqldFxuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxWZVRhdT4gdGltVmVUYXVUaGVvR2lheVRvKFN0cmluZyBnaWF5VG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIExpc3Q8VmVUYXU+IGRhbmhTYWNoVmVUYXUgPSBuZXcgQXJyYXlMaXN0PD4oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSlBRTCB24bubaSBKT0lOIEZFVENIIMSR4buDIHThuqNpIHThuqV0IGPhuqMgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dCB0cm9uZyBt4buZdCBjw6J1IHF1ZXJ5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHYgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYubGljaFRyaW5oVGF1IGx0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5jaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYuZ2lheVRvID0gOmdpYXlUb1wiO1xuXG4gICAgICAgICAgICBUeXBlZFF1ZXJ5PFZlVGF1PiBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKTtcbiAgICAgICAgICAgIHF1ZXJ5LnNldFBhcmFtZXRlcihcImdpYXlUb1wiLCBnaWF5VG8pO1xuXG4gICAgICAgICAgICBkYW5oU2FjaFZlVGF1ID0gcXVlcnkuZ2V0UmVzdWx0TGlzdCgpO1xuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxWZVRhdT4gdGltVmVUYXVUaGVvVGVuS0goU3RyaW5nIHRlbktoYWNoSGFuZykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgTGlzdDxWZVRhdT4gZGFuaFNhY2hWZVRhdSA9IG5ldyBBcnJheUxpc3Q8PigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKUFFMIHbhu5tpIEpPSU4gRkVUQ0ggxJHhu4MgdOG6o2kgdOG6pXQgY+G6oyBk4buvIGxp4buHdSBj4bqnbiB0aGnhur90IHRyb25nIG3hu5l0IGPDonUgcXVlcnlcbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgdiBGUk9NIFZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5saWNoVHJpbmhUYXUgbHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggbHQudGF1IHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdC50dXllblRhdSB0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB2LmNob05nb2kgYyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdi50ZW5LaGFjaEhhbmcgPSA6dGVuS2hhY2hIYW5nXCI7XG5cbiAgICAgICAgICAgIFR5cGVkUXVlcnk8VmVUYXU+IHF1ZXJ5ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwidGVuS2hhY2hIYW5nXCIsIHRlbktoYWNoSGFuZyk7XG5cbiAgICAgICAgICAgIGRhbmhTYWNoVmVUYXUgPSBxdWVyeS5nZXRSZXN1bHRMaXN0KCk7XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSlBRTCB24bubaSBKT0lOIEZFVENIIMSR4buDIHThuqNpIHThuqV0IGPhuqMgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dCB0cm9uZyBt4buZdCBjw6J1IHF1ZXJ5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHYgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYubGljaFRyaW5oVGF1IGx0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5jaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYudGVuS2hhY2hIYW5nID0gOnRlbktoYWNoSGFuZyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYuZ2lheVRvID0gOmdpYXlUbyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYubmdheURpID0gOm5nYXlEaSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYuY2hvTmdvaS5tYUNobyA9IDptYUNobyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYuZG9pVHVvbmcgPSA6ZG9pVHVvbmdcIjtcblxuICAgICAgICAgICAgVHlwZWRRdWVyeTxWZVRhdT4gcXVlcnkgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBWZVRhdS5jbGFzcyk7XG4gICAgICAgICAgICBxdWVyeS5zZXRQYXJhbWV0ZXIoXCJ0ZW5LaGFjaEhhbmdcIiwgdGVuS2hhY2hIYW5nKTtcbiAgICAgICAgICAgIHF1ZXJ5LnNldFBhcmFtZXRlcihcImdpYXlUb1wiLCBnaWF5VG8pO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibmdheURpXCIsIG5nYXlEaSk7XG4gICAgICAgICAgICBxdWVyeS5zZXRQYXJhbWV0ZXIoXCJtYUNob1wiLCBtYUNob05nb2kpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwiZG9pVHVvbmdcIiwgZG9pVHVvbmcpO1xuXG4gICAgICAgICAgICB2ZVRhdUxpc3QgPSBxdWVyeS5nZXRSZXN1bHRMaXN0KCk7XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSlBRTCB24bubaSBKT0lOIEZFVENIIMSR4buDIHThuqNpIHThuqV0IGPhuqMgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dCB0cm9uZyBt4buZdCBjw6J1IHF1ZXJ5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHYgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYubGljaFRyaW5oVGF1IGx0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5jaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYudGVuS2hhY2hIYW5nID0gOnRlbktoYWNoSGFuZyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYubmdheURpIEJFVFdFRU4gOm5nYXlEaUZyb20gQU5EIDpuZ2F5RGlUb1wiO1xuXG4gICAgICAgICAgICBUeXBlZFF1ZXJ5PFZlVGF1PiBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKTtcbiAgICAgICAgICAgIHF1ZXJ5LnNldFBhcmFtZXRlcihcInRlbktoYWNoSGFuZ1wiLCBob1Rlbik7XG4gICAgICAgICAgICBxdWVyeS5zZXRQYXJhbWV0ZXIoXCJuZ2F5RGlGcm9tXCIsIG5nYXlEaUZyb20pO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibmdheURpVG9cIiwgbmdheURpVG8pO1xuXG4gICAgICAgICAgICB2ZVRhdUxpc3QgPSBxdWVyeS5nZXRSZXN1bHRMaXN0KCk7XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0RvaVZlREFPLmphdmFcbi4uLlxuXG5wdWJsaWMgaW50ZXJmYWNlIERvaVZlREFPIGV4dGVuZHMgUmVtb3RlIHtcbiAgICBWZVRhdSBnZXRWZVRhdShTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBkb2lWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFZlVGF1PiBnZXRWZVRhdUJ5VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHRlc3RDb25uZWN0aW9uKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFRyYW5nVGhhaVZlVGF1PiBnZXRBbGxUcmFuZ1RoYWlWZSgpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBUaMOqbSBjaOG7qWMgbsSDbmcgbeG7m2lcbiAgICBib29sZWFuIGRhdFZlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gaHV5VmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB0aGFuaFRvYW5WZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGNhcE5oYXRUcmFuZ1RoYWlWZShTdHJpbmcgbWFWZSwgVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIEtoYWNoSGFuZyBnZXRLaGFjaEhhbmdCeU1hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvVG9hVGF1RG9pVmVEQU9JbXBsLmphdmFcbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBU4buRaSDGsHUgcXVlcnkgxJHhu4MgY2jhu4kgbOG6pXkgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dFxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCBESVNUSU5DVCB0IEZST00gVG9hVGF1IHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB0LmxvYWlUb2EgbGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB0LnRhdSB0YSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdC50YXUubWFUYXUgPSA6bWFUYXVcIjtcblxuICAgICAgICAgICAgTGlzdDxUb2FUYXU+IGRzVG9hVGF1ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVG9hVGF1LmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFUYXVcIiwgbWFUYXUpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRSZXN1bHRMaXN0KCk7XG5cbiAgICAgICAgICAgIC8vIENo4buJIHThuqNpIG5o4buvbmcgdGh14buZYyB0w61uaCB0aOG7sWMgc+G7sSBj4bqnbiB0aGnhur90XG4gICAgICAgICAgICBmb3IgKFRvYVRhdSB0b2FUYXUgOiBkc1RvYVRhdSkge1xuICAgICAgICAgICAgICAgIGlmICh0b2FUYXUuZ2V0TG9haVRvYSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hVGF1LmdldExvYWlUb2EoKS5nZXRUZW5Mb2FpKCk7XG4gICAgICAgICAgICAgICAgICAgIHRvYVRhdS5nZXRMb2FpVG9hKCkuZ2V0TWFMb2FpKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0b2FUYXUuZ2V0VGF1KCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0b2FUYXUuZ2V0VGF1KCkuZ2V0TWFUYXUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuXG4gICAgICAgICAgICAvLyBMxrB1IGvhur90IHF14bqjIHbDoG8gY2FjaGVcbiAgICAgICAgICAgIHVwZGF0ZUNhY2hlKG1hVGF1LCBkc1RvYVRhdSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkc1RvYVRhdTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL0Nob05nb2lEb2lWZURBT0ltcGwuamF2YVxuLi4uXG5cbiAgICAgICAgICAgIC8vIE1hcCBzZWF0IElEcyB0byB0aGVpciB0aWNrZXQgc3RhdHVzXG4gICAgICAgICAgICBmb3IgKFZlVGF1IHZlIDogdGlja2V0cykge1xuICAgICAgICAgICAgICAgIC8vIExhdGVzdCB0aWNrZXQgc3RhdHVzIGZvciBlYWNoIHNlYXQgdGFrZXMgcHJlY2VkZW5jZVxuICAgICAgICAgICAgICAgIFN0cmluZyBtYUNobyA9IHZlLmdldENob05nb2koKS5nZXRNYUNobygpO1xuICAgICAgICAgICAgICAgIFRyYW5nVGhhaVZlVGF1IGN1cnJlbnRTdGF0dXMgPSByZXN1bHQuZ2V0KG1hQ2hvKTtcblxuICAgICAgICAgICAgICAgIC8vIE9ubHkgb3ZlcndyaXRlIGlmOlxuICAgICAgICAgICAgICAgIC8vIDEuIE5vIHN0YXR1cyBleGlzdHMgeWV0LCBvclxuICAgICAgICAgICAgICAgIC8vIDIuIE5ldyBzdGF0dXMgaXMgREFfVEhBTkhfVE9BTiAodGFrZXMgcHJlY2VkZW5jZSksIG9yXG4gICAgICAgICAgICAgICAgLy8gMy4gQ3VycmVudCBpcyBub3QgREFfVEhBTkhfVE9BTiBhbmQgbmV3IGlzIERBX0RPSSBvciBEQV9UUkFcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFN0YXR1cyA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZS5nZXRUcmFuZ1RoYWkoKSA9PSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoY3VycmVudFN0YXR1cyAhPSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh2ZS5nZXRUcmFuZ1RoYWkoKSA9PSBUcmFuZ1RoYWlWZVRhdS5EQV9ET0kgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZS5nZXRUcmFuZ1RoYWkoKSA9PSBUcmFuZ1RoYWlWZVRhdS5EQV9UUkEpKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXQobWFDaG8sIHZlLmdldFRyYW5nVGhhaSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB0csaw4bubYyBk4buvIGxp4buHdSBsacOqbiBxdWFuXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIERJU1RJTkNUIGMgRlJPTSBDaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBjLmxvYWlDaG8gbGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGMudG9hVGF1Lm1hVG9hID0gOm1hVG9hVGF1XCI7XG5cbiAgICAgICAgICAgIGRzQ2hvTmdvaSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIENob05nb2kuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYVRvYVRhdVwiLCBtYVRvYVRhdSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICAgICAgLy8gxJDhuqNtIGLhuqNvIGPDoWMgdGh14buZYyB0w61uaCBsYXp5IMSRxrDhu6NjIHThuqNpXG4gICAgICAgICAgICBmb3IgKENob05nb2kgY2hvTmdvaSA6IGRzQ2hvTmdvaSkge1xuICAgICAgICAgICAgICAgIGlmIChjaG9OZ29pLmdldExvYWlDaG8oKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNob05nb2kuZ2V0TG9haUNobygpLmdldFRlbkxvYWkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggY2jhu5cgbmfhu5NpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkc0Nob05nb2k7XG4gICAgfVxuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgQ09VTlQodikgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2LmNob05nb2kubWFDaG8gPSA6bWFDaG8gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkFORCB2LnRyYW5nVGhhaSBOT1QgSU4gKDp0cmFuZ1RoYWlEYVRyYSwgOnRyYW5nVGhhaURhRG9pKVwiO1xuXG4gICAgICAgICAgICAvLyBO4bq/dSBjw7MgbcOjIHbDqSBj4bqnbiBsb+G6oWkgdHLhu6ssIHRow6ptIMSRaeG7gXUga2nhu4duXG4gICAgICAgICAgICBpZiAobWFWZUxvYWlUcnUgIT0gbnVsbCAmJiAhbWFWZUxvYWlUcnUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAganBxbCArPSBcIiBBTkQgdi5tYVZlICE9IDptYVZlTG9haVRydVwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBRdWVyeSBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibWFDaG9cIiwgbWFDaG8pXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlEYVRyYVwiLCBUcmFuZ1RoYWlWZVRhdS5EQV9UUkEpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlEYURvaVwiLCBUcmFuZ1RoYWlWZVRhdS5EQV9ET0kpO1xuXG4gICAgICAgICAgICBpZiAobWFWZUxvYWlUcnUgIT0gbnVsbCAmJiAhbWFWZUxvYWlUcnUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibWFWZUxvYWlUcnVcIiwgbWFWZUxvYWlUcnUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBMb25nIGNvdW50ID0gKExvbmcpIHF1ZXJ5LmdldFNpbmdsZVJlc3VsdCgpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiBjb3VudCA+IDA7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIERJU1RJTkNUIHYubGljaFRyaW5oVGF1Lm1hTGljaCBGUk9NIFZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYuY2hvTmdvaS5tYUNobyA9IDptYUNobyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYudHJhbmdUaGFpIE5PVCBJTiAoOnRyYW5nVGhhaURhVHJhLCA6dHJhbmdUaGFpRGFEb2kpXCI7XG5cbiAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBkYW5oU2FjaExpY2hUcmluaCA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFN0cmluZy5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hQ2hvXCIsIG1hQ2hvKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpRGFUcmFcIiwgVHJhbmdUaGFpVmVUYXUuREFfVFJBKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpRGFEb2lcIiwgVHJhbmdUaGFpVmVUYXUuREFfRE9JKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0UmVzdWx0TGlzdCgpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiBkYW5oU2FjaExpY2hUcmluaDtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIGzhu4tjaCB0csOsbmggxJHDoyDEkeG6t3QgY2jhu5c6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL1ZlVGF1REFPSW1wbC5qYXZhXG4uLi5cblxucHVibGljIGNsYXNzIFZlVGF1REFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBWZVRhdURBTyB7XG4gICAgcHVibGljIFZlVGF1REFPSW1wbCgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VmVUYXU+IGdldEFsbExpc3QoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIExpc3Q8VmVUYXU+IGxpc3QgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcbiAgICAgICAgICAgIGxpc3QgPSBlbS5jcmVhdGVRdWVyeShcIlNFTEVDVCB2dCBGUk9NIFZlVGF1IHZ0XCIsIFZlVGF1LmNsYXNzKS5nZXRSZXN1bHRMaXN0KCk7XG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCBWZVRhdVwiKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFZlVGF1IGdldEJ5SWQoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICByZXR1cm4gZW0uZmluZChWZVRhdS5jbGFzcywgaWQpO1xuICAgIH1cbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VmVUYXU+IGdldEJ5SW52b2ljZUlkKFN0cmluZyBpbnZvaWNlSWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgTGlzdDxWZVRhdT4gbGlzdCA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuICAgICAgICAgICAgU3RyaW5nIHF1ZXJ5ID0gXCJTRUxFQ1QgRElTVElOQ1QgdnQgRlJPTSBWZVRhdSB2dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB2dC5jaGlUaWV0SG9hRG9ucyBjdGhkIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGN0aGQuaG9hRG9uIGhkIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSBoZC5tYUhEID0gOmludm9pY2VJZFwiO1xuXG4gICAgICAgICAgICBsaXN0ID0gZW0uY3JlYXRlUXVlcnkocXVlcnksIFZlVGF1LmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwiaW52b2ljZUlkXCIsIGludm9pY2VJZClcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB2w6kgdGhlbyBow7NhIMSRxqFuOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIH0gZmluYWwuLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxOVVOS04xZmJTR0ZTWHFvZzlZVWVKMyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIiwiZm9sZGVyUm9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkJhc2VkIG9uIG15IGFuYWx5c2lzLCBJIGNhbiBub3cgcHJvdmlkZSBhIGZpeCBmb3IgdGhlIGlzc3VlLiBUaGUgcHJvYmxlbSBpcyBpbiB0aGUgYHh1THlUaGFuaFRvYW4oKWAgbWV0aG9kIGluIERvaVZlUGFuZWwuamF2YS4gVGhlIG1ldGhvZCBpcyBpbmNvcnJlY3RseSBjYWxsaW5nIGBEb2lWZURBTy5kYXRWZSh2ZVRhdU1vaSwgY2hvTmdvaURhQ2hvbi5nZXRNYUNobygpKWAgd2l0aCB0d28gcGFyYW1ldGVycywgYnV0IHRoZSBpbnRlcmZhY2Ugb25seSBkZWZpbmVzIGEgbWV0aG9kIHdpdGggb25lIHBhcmFtZXRlcjogYGRhdFZlKFZlVGF1IHZlVGF1KWAuXG5cbkhlcmUncyB0aGUgZml4IGZvciB0aGUgRG9pVmVQYW5lbC5qYXZhIGZpbGU6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InNlbnQiLCJyZXF1ZXN0X2lkIjoiNDY0ZDM3MzQtY2Q3YS00ODU2LWE0YTAtYmY5ODQ3M2JiOWY0IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOltdLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkZpbGUgYWxyZWFkeSBleGlzdHM6IEQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWxfRml4LmphdmEiLCJpc19lcnJvciI6dHJ1ZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUZnVEtpQ3I3RVU2aWVZbVNTYmtKb24ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyIsImZvbGRlclJvb3QiOiJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZyJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInJlc3BvbnNlX3RleHQiOiJMZXQgbWUgdHJ5IHRvIHVwZGF0ZSB0aGUgZmlsZSB3aXRoIGEgZGlmZmVyZW50IG5hbWU6Iiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX1dLCJmZWVkYmFja1N0YXRlcyI6eyJ0ZW1wLWZlLTIxZGY0NmRlLWRjYTYtNGJkYy1iYTQyLTYzODRmODgwNjUxNiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNGU1N2ZkOGUtM2Q1YS00NjVhLWE4Y2YtYjIyMjNlNWZmZGQxIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS02MGY2ODk0Mi1jMjFmLTQwMjEtYjQwOS1lZThmNmI2ODMzOWQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTQzYzcyM2UwLWUzYTItNDRiOC1hYzdiLWI2ZDVlNjVkNDZmNCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYjg1NzVhMWItMmRhOS00YzM3LTg1MjktYmY1NjZmNGM3NmVhIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0yY2FmM2Q1NC1jZWM4LTQ3ZDEtYjU2Zi1hMDFmYzQ3OWJjOTAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTFiZDE1YjhmLTViMzctNGU3MS1hNmJlLWI2YjZkNjNjZmI2MyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMTU4Y2JlZTAtM2I1Yy00Zjk1LWJiNWYtNGY3NzBiMzBmNmM2Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0yMGVlNzAyNi04MTZlLTQ1ZDEtODcwYi01NzkwN2UyYTFlYTUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTJiOWQwYjcwLTY4YmYtNDFmMC1iNjNjLTQxMTJmMjFiYzBjMiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYzY2M2IwMTMtMDU1Zi00ZTk3LWI0YzItNGJjNmMxNjFhY2FlIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wNzNjMDcwMi1mY2ZlLTRmMjctYmRiMy1kM2M2MWQxZWU3NmEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLThkZjM3Zjc0LTk0YjQtNDhlYi1iOTdlLTQ5MmZhZjk1MTZmNSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYWNkNTVhZGMtYTRlMi00NzI0LTg3ZTYtMGMzMDNlZGJkZDEzIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1mZDA4OWYxOC04NmYzLTRhYzgtYjJhYi04ZTNjMWMyMDEzYzQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWYzNzBjMjcxLTAxNzctNGEzOS04NzI0LTRlNjQxYjAyYmQ0MCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZDFiNTEyZGUtMDIwNS00ZTQxLWJkMjEtYWFiNmE3MDJiZjEwIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifX0sInRvb2xVc2VTdGF0ZXMiOnsiMTMzYmM3ZDAtMzliOC00YjZmLWE3MmYtYzUxMWZiODM3YWYyO3Rvb2x1X3ZydHhfMDFLbWsyYkR5V0YzRHZhdjI4b0I1Y3RtIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YVxuLi4uXG5cbnB1YmxpYyBjbGFzcyBEb2lWZVBhbmVsIGV4dGVuZHMgSlBhbmVsIHtcbiAgICAvLyDEkOG7i2EgY2jhu4kgSVAgdsOgIHBvcnQgY+G7p2EgUk1JIHNlcnZlclxuICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBSTUlfU0VSVkVSX0lQID0gXCIxMjcuMC4wLjFcIjtcbiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBpbnQgUk1JX1NFUlZFUl9QT1JUID0gOTA5MDtcbiAgICAvLyBUaMOqbSBjw6FjIGJp4bq/biBjaG8gcHJlbG9hZGluZ1xuICAgIHByaXZhdGUgYm9vbGVhbiBpc1ByZWxvYWRpbmdEYXRhID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBTd2luZ1dvcmtlcjxNYXA8U3RyaW5nLCBMaXN0PExpY2hUcmluaFRhdT4+LCBWb2lkPiBwcmVsb2FkV29ya2VyO1xuICAgIHByaXZhdGUgTWFwPFN0cmluZywgTGlzdDxMaWNoVHJpbmhUYXU+PiBjYWNoZWRMaWNoVHJpbmggPSBuZXcgQ29uY3VycmVudEhhc2hNYXA8PigpO1xuXG4gICAgcHJpdmF0ZSBEb2lWZURBTyBkb2lWZURBTztcbiAgICBwcml2YXRlIExpY2hUcmluaFRhdURBTyBsaWNoVHJpbmhUYXVEQU87XG4gICAgcHJpdmF0ZSBUb2FUYXVEb2lWZURBTyB0b2FUYXVEQU87XG4gICAgcHJpdmF0ZSBDaG9OZ29pRG9pVmVEQU8gY2hvTmdvaURBTztcbiAgICBwcml2YXRlIExvYWlIb2FEb25EQU8gbG9haUhvYURvbkRBTztcbiAgICBwcml2YXRlIEhvYURvbkRBTyBob2FEb25EQU87XG4gICAgcHJpdmF0ZSBDaGlUaWV0SG9hRG9uREFPIGNoaVRpZXRIb2FEb25EQU87XG4gICAgLy8gTcOgdSBz4bqvYyBjaMOtbmhcbiAgICBwcml2YXRlIENvbG9yIHByaW1hcnlDb2xvciA9IG5ldyBDb2xvcig0MSwgMTI4LCAxODUpOyAvLyBNw6B1IHhhbmggZMawxqFuZ1xuICAgIHByaXZhdGUgQ29sb3Igc3VjY2Vzc0NvbG9yID0gbmV3IENvbG9yKDQ2LCAyMDQsIDExMyk7IC8vIE3DoHUgeGFuaCBsw6FcbiAgICBwcml2YXRlIENvbG9yIHdhcm5pbmdDb2xvciA9IG5ldyBDb2xvcigyNDMsIDE1NiwgMTgpOyAvLyBNw6B1IHbDoG5nIGNhbVxuICAgIHByaXZhdGUgQ29sb3IgZGFuZ2VyQ29sb3IgPSBuZXcgQ29sb3IoMjMxLCA3NiwgNjApOyAgIC8vIE3DoHUgxJHhu49cbiAgICBwcml2YXRlIENvbG9yIGdyYXlDb2xvciA9IG5ldyBDb2xvcigxMDgsIDExNywgMTI1KTsgICAvLyBNw6B1IHjDoW1cbiAgICBwcml2YXRlIENvbG9yIGRhcmtUZXh0Q29sb3IgPSBuZXcgQ29sb3IoNTIsIDczLCA5NCk7ICAvLyBNw6B1IGNo4buvIHThu5FpXG4gICAgcHJpdmF0ZSBDb2xvciBsaWdodEJhY2tncm91bmQgPSBuZXcgQ29sb3IoMjQwLCAyNDAsIDI0MCk7IC8vIE3DoHUgbuG7gW4gbmjhuqF0XG5cbiAgICAvLyBDb21wb25lbnRzIGZvciBVSVxuICAgIHByaXZhdGUgSlRleHRGaWVsZCB0eHRNYVZlO1xuICAgIHByaXZhdGUgSlRleHRGaWVsZCB0eHRUZW5LaGFjaEhhbmc7XG4gICAgcHJpdmF0ZSBKVGV4dEZpZWxkIHR4dEdpYXlUbztcbiAgICBwcml2YXRlIEpUZXh0RmllbGQgdHh0TmdheURpO1xuICAgIHByaXZhdGUgSkNvbWJvQm94PFN0cmluZz4gY2JvRG9pVHVvbmc7XG4gICAgcHJpdmF0ZSBKQnV0dG9uIGJ0blRpbVZlO1xuICAgIHByaXZhdGUgSkJ1dHRvbiBidG5Eb2lWZTtcbiAgICBwcml2YXRlIEpCdXR0b24gYnRuTGFtTW9pO1xuICAgIHByaXZhdGUgSkJ1dHRvbiBidG5DaG9uTGljaFRyaW5oO1xuICAgIHByaXZhdGUgSkJ1dHRvbiBidG5DaG9uQ2hvTmdvaTtcbiAgICBwcml2YXRlIEpMYWJlbCBsYmxUcmFuZ1RoYWk7XG4gICAgcHJpdmF0ZSBKTGFiZWwgbGJsR2lhVmU7XG4gICAgcHJpdmF0ZSBKTGFiZWwgbGJsTGljaFRyaW5oO1xuICAgIHByaXZhdGUgSkxhYmVsIGxibENob05nb2k7XG4gICAgcHJpdmF0ZSBKTGFiZWwgbGJsU3RhdHVzO1xuICAgIHByaXZhdGUgSlRhYmxlIHRibExpY2hTdTtcbiAgICBwcml2YXRlIERlZmF1bHRUYWJsZU1vZGVsIG1vZGVsTGljaFN1O1xuICAgIHByaXZhdGUgSlByb2dyZXNzQmFyIHByb2dyZXNzQmFyO1xuLi4uXG5cbiAgICBwdWJsaWMgRG9pVmVQYW5lbChOaGFuVmllbiBuaGFuVmllbikge1xuICAgICAgICB0aGlzLm5oYW5WaWVuUGFuZWwgPSBuaGFuVmllbjtcbiAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShcInZpXCIsIFwiVk5cIik7XG4gICAgICAgIGN1cnJlbmN5Rm9ybWF0dGVyID0gTnVtYmVyRm9ybWF0LmdldEN1cnJlbmN5SW5zdGFuY2UobG9jYWxlKTtcblxuICAgICAgICAvLyDEkOG6o20gYuG6o28gY8OhYyBuw7p0IGhp4buDbiB0aOG7iyDEkcO6bmcgbcOgdSBz4bqvY1xuICAgICAgICBVSU1hbmFnZXIucHV0KFwiQnV0dG9uLmJhY2tncm91bmRcIiwgQ29sb3IuV0hJVEUpO1xuICAgICAgICBVSU1hbmFnZXIucHV0KFwiQnV0dG9uLm9wYXF1ZVwiLCBCb29sZWFuLlRSVUUpO1xuXG4gICAgICAgIHNldExheW91dChuZXcgQm9yZGVyTGF5b3V0KDEwLCAxMCkpO1xuICAgICAgICBzZXRCb3JkZXIobmV3IEVtcHR5Qm9yZGVyKDE1LCAxNSwgMTUsIDE1KSk7XG4gICAgICAgIHNldEJhY2tncm91bmQoQ29sb3IuV0hJVEUpO1xuXG4gICAgICAgIC8vIEto4bufaSB04bqhbyBnaWFvIGRp4buHbiB0csaw4bubY1xuICAgICAgICBpbml0aWFsaXplVUkoKTtcblxuICAgICAgICAvLyBUaGnhur90IGzhuq1wIHRy4bqhbmcgdGjDoWkgYmFuIMSR4bqndVxuICAgICAgICB1cGRhdGVTdGF0dXMoUkVBRFlfVEVYVCwgZmFsc2UpO1xuXG4gICAgICAgIC8vIEvhur90IG7hu5FpIMSR4bq/biBSTUkgc2VydmVyXG4gICAgICAgIGNvbm5lY3RUb1NlcnZlcigpO1xuICAgICAgICBzdGFydFByZWxvYWRpbmdEYXRhKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2b2lkIGNvbm5lY3RUb1NlcnZlcigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhMT0FESU5HX1RFWFQsIHRydWUpO1xuXG4gICAgICAgICAgICBSZWdpc3RyeSByZWdpc3RyeSA9IExvY2F0ZVJlZ2lzdHJ5LmdldFJlZ2lzdHJ5KFJNSV9TRVJWRVJfSVAsIFJNSV9TRVJWRVJfUE9SVCk7XG4gICAgICAgICAgICBkb2lWZURBTyA9IChEb2lWZURBTykgcmVnaXN0cnkubG9va3VwKFwiZG9pVmVEQU9cIik7XG4gICAgICAgICAgICBsaWNoVHJpbmhUYXVEQU8gPSAoTGljaFRyaW5oVGF1REFPKSByZWdpc3RyeS5sb29rdXAoXCJsaWNoVHJpbmhUYXVEQU9cIik7XG4vLyAgICAgICAgICAgIGtodXllbk1haURBTyA9IChLaHV5ZW5NYWlEQU8pIHJlZ2lzdHJ5Lmxvb2t1cChcImtodXllbk1haURBT1wiKTtcbiAgICAgICAgICAgIHRvYVRhdURBTyA9IChUb2FUYXVEb2lWZURBTykgcmVnaXN0cnkubG9va3VwKFwidG9hVGF1RG9pVmVEQU9cIik7XG4gICAgICAgICAgICBjaG9OZ29pREFPID0gKENob05nb2lEb2lWZURBTykgcmVnaXN0cnkubG9va3VwKFwiY2hvTmdvaURvaVZlREFPXCIpO1xuICAgICAgICAgICAgbG9haUhvYURvbkRBTyA9IChMb2FpSG9hRG9uREFPKSByZWdpc3RyeS5sb29rdXAoXCJsb2FpSG9hRG9uREFPXCIpO1xuICAgICAgICAgICAgaG9hRG9uREFPID0gKEhvYURvbkRBTykgcmVnaXN0cnkubG9va3VwKFwiaG9hRG9uREFPXCIpO1xuICAgICAgICAgICAgY2hpVGlldEhvYURvbkRBTyA9IChDaGlUaWV0SG9hRG9uREFPKSByZWdpc3RyeS5sb29rdXAoXCJjaGlUaWV0SG9hRG9uREFPXCIpO1xuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSBr4bq/dCBu4buRaVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoZG9pVmVEQU8udGVzdENvbm5lY3Rpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICBTd2luZ1V0aWxpdGllcy5pbnZva2VMYXRlcigoKSAtPiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoUkVBRFlfVEVYVCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQcmVsb2FkaW5nRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbi4uLlxuXG4gICAgcHJpdmF0ZSB2b2lkIGluaXRpYWxpemVVSSgpIHtcbiAgICAgICAgLy8gUGFuZWwgY2jDrW5oIGNoaWEgbMOgbSBoYWkgcGjhuqduXG4gICAgICAgIEpQYW5lbCBtYWluUGFuZWwgPSBuZXcgSlBhbmVsKG5ldyBCb3JkZXJMYXlvdXQoMTAsIDEwKSk7XG4gICAgICAgIG1haW5QYW5lbC5zZXRCYWNrZ3JvdW5kKENvbG9yLldISVRFKTtcblxuICAgICAgICAvLyBQYW5lbCBiw6puIHRyw6FpIGNo4bupYSB0aMO0bmcgdGluIHbDoCB0aGFvIHTDoWNcbiAgICAgICAgSlBhbmVsIGxlZnRQYW5lbCA9IGNyZWF0ZUxlZnRQYW5lbCgpO1xuXG4gICAgICAgIC8vIFBhbmVsIGLDqm4gcGjhuqNpIGNo4bupYSBs4buLY2ggc+G7rSDEkeG7lWkgdsOpXG4gICAgICAgIEpQYW5lbCByaWdodFBhbmVsID0gY3JlYXRlUmlnaHRQYW5lbCgpO1xuXG4gICAgICAgIC8vIENoaWEgxJHDtGkgbcOgbiBow6xuaFxuICAgICAgICBKU3BsaXRQYW5lIHNwbGl0UGFuZSA9IG5ldyBKU3BsaXRQYW5lKEpTcGxpdFBhbmUuSE9SSVpPTlRBTF9TUExJVCwgbGVmdFBhbmVsLCByaWdodFBhbmVsKTtcbiAgICAgICAgc3BsaXRQYW5lLnNldERpdmlkZXJMb2NhdGlvbig2NTApO1xuICAgICAgICBzcGxpdFBhbmUuc2V0RGl2aWRlclNpemUoNSk7XG4gICAgICAgIHNwbGl0UGFuZS5zZXRPbmVUb3VjaEV4cGFuZGFibGUodHJ1ZSk7XG4gICAgICAgIHNwbGl0UGFuZS5zZXRCYWNrZ3JvdW5kKENvbG9yLldISVRFKTtcblxuICAgICAgICAvLyBUaMOqbSBzcGxpdFBhbmUgdsOgbyBwYW5lbCBjaMOtbmhcbiAgICAgICAgbWFpblBhbmVsLmFkZChzcGxpdFBhbmUsIEJvcmRlckxheW91dC5DRU5URVIpO1xuLi4uXG5cbiAgICBwcml2YXRlIEpQYW5lbCBjcmVhdGVMZWZ0UGFuZWwoKSB7XG4gICAgICAgIEpQYW5lbCBsZWZ0UGFuZWwgPSBuZXcgSlBhbmVsKG5ldyBCb3JkZXJMYXlvdXQoMCwgMTUpKTtcbiAgICAgICAgbGVmdFBhbmVsLnNldEJhY2tncm91bmQoQ29sb3IuV0hJVEUpO1xuICAgICAgICBsZWZ0UGFuZWwuc2V0Qm9yZGVyKEJvcmRlckZhY3RvcnkuY3JlYXRlRW1wdHlCb3JkZXIoMTAsIDEwLCAxMCwgMTApKTtcblxuICAgICAgICAvLyBQYW5lbCB0w6xtIGtp4bq/bSB2w6lcbiAgICAgICAgSlBhbmVsIHNlYXJjaFBhbmVsID0gY3JlYXRlU2VhcmNoUGFuZWwoKTtcbiAgICAgICAgbGVmdFBhbmVsLmFkZChzZWFyY2hQYW5lbCwgQm9yZGVyTGF5b3V0Lk5PUlRIKTtcblxuICAgICAgICAvLyBQYW5lbCB0aMO0bmcgdGluIHbDqVxuICAgICAgICBKUGFuZWwgaW5mb1BhbmVsID0gY3JlYXRlSW5mb1BhbmVsKCk7XG4gICAgICAgIGxlZnRQYW5lbC5hZGQoaW5mb1BhbmVsLCBCb3JkZXJMYXlvdXQuQ0VOVEVSKTtcblxuICAgICAgICAvLyBQYW5lbCBuw7p0IHRoYW8gdMOhY1xuICAgICAgICBKUGFuZWwgYnV0dG9uUGFuZWwgPSBjcmVhdGVCdXR0b25QYW5lbCgpO1xuICAgICAgICBsZWZ0UGFuZWwuYWRkKGJ1dHRvblBhbmVsLCBCb3JkZXJMYXlvdXQuU09VVEgpO1xuXG4gICAgICAgIHJldHVybiBsZWZ0UGFuZWw7XG4gICAgfVxuLi4uXG5cbiAgICAgICAgICAgIHdvcmtlci5leGVjdXRlKCk7XG4gICAgICAgICAgICBsb2FkaW5nRGlhbG9nLnNldFZpc2libGUodHJ1ZSk7IC8vIEhp4buDbiB0aOG7iyBkaWFsb2cgY2jhu50gKHPhur0gdOG7sSDEkcOzbmcga2hpIHdlYmNhbSBraOG7n2kgdOG6oW8geG9uZylcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpIGtoaSBraOG7n2kgdOG6oW8gd2ViY2FtOiBcIiArIGUuZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBKUGFuZWwgY3JlYXRlSW5mb1BhbmVsKCkge1xuICAgICAgICBKUGFuZWwgaW5mb1BhbmVsID0gbmV3IEpQYW5lbChuZXcgQm9yZGVyTGF5b3V0KCkpO1xuICAgICAgICBpbmZvUGFuZWwuc2V0Qm9yZGVyKEJvcmRlckZhY3RvcnkuY3JlYXRlQ29tcG91bmRCb3JkZXIoXG4gICAgICAgICAgICAgICAgQm9yZGVyRmFjdG9yeS5jcmVhdGVUaXRsZWRCb3JkZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBCb3JkZXJGYWN0b3J5LmNyZWF0ZUxpbmVCb3JkZXIocHJpbWFyeUNvbG9yLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVGjDtG5nIFRpbiBWw6lcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlZEJvcmRlci5MRUZULCBUaXRsZWRCb3JkZXIuVE9QLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZvbnQoXCJBcmlhbFwiLCBGb250LkJPTEQsIDE0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW1hcnlDb2xvclxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgQm9yZGVyRmFjdG9yeS5jcmVhdGVFbXB0eUJvcmRlcigxNSwgMTUsIDE1LCAxNSlcbiAgICAgICAgKSk7XG4uLi5cblxuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEZvbnQobmV3IEZvbnQoXCJBcmlhbFwiLCBGb250LlBMQUlOLCAxMSkpO1xuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEZvcmVncm91bmQoQ29sb3IuV0hJVEUpO1xuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEJvcmRlclBhaW50ZWQoZmFsc2UpO1xuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldENvbnRlbnRBcmVhRmlsbGVkKGZhbHNlKTtcbiAgICAgICAgYnRuQ2hvbkxpY2hUcmluaC5zZXRGb2N1c1BhaW50ZWQoZmFsc2UpO1xuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEN1cnNvcihuZXcgQ3Vyc29yKEN1cnNvci5IQU5EX0NVUlNPUikpO1xuICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEljb24oY3JlYXRlQ2FsZW5kYXJJY29uKDEyLCAxMiwgQ29sb3IuV0hJVEUpKTtcbiAgICAgICAgYnRuQ2hvbkxpY2hUcmluaC5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IGhpZW5UaGlEaWFsb2dDaG9uTGljaFRyaW5oKCkpO1xuXG4gICAgICAgIHBubExpY2hUcmluaC5hZGQoYnRuQ2hvbkxpY2hUcmluaCwgQm9yZGVyTGF5b3V0LkVBU1QpO1xuXG4gICAgICAgIGdiYy5ncmlkeCA9IDE7XG4gICAgICAgIGdiYy5ncmlkeSA9IDI7XG4gICAgICAgIGdiYy5ncmlkd2lkdGggPSAzO1xuICAgICAgICBmb3JtUGFuZWwuYWRkKHBubExpY2hUcmluaCwgZ2JjKTtcblxuICAgICAgICAvLyBIw6BuZyA0OiBDaOG7lyBuZ+G7k2lcbiAgICAgICAgYWRkRm9ybVJvdyhmb3JtUGFuZWwsIGdiYywgMywgXCJDaOG7lyBuZ+G7k2k6XCIsIFwiXCIsIGxhYmVsRm9udCk7XG5cbiAgICAgICAgSlBhbmVsIHBubENob05nb2kgPSBuZXcgSlBhbmVsKG5ldyBCb3JkZXJMYXlvdXQoNSwgMCkpO1xuICAgICAgICBwbmxDaG9OZ29pLnNldE9wYXF1ZShmYWxzZSk7XG5cbiAgICAgICAgbGJsQ2hvTmdvaSA9IG5ldyBKTGFiZWwoXCJDaMawYSBjaOG7jW5cIik7XG4gICAgICAgIGxibENob05nb2kuc2V0Rm9udChmaWVsZEZvbnQpO1xuICAgICAgICBwbmxDaG9OZ29pLmFkZChsYmxDaG9OZ29pLCBCb3JkZXJMYXlvdXQuQ0VOVEVSKTtcblxuICAgICAgICAvLyBU4bqhbyBKQnV0dG9uIHTDuXkgY2jhu4luaCBjaG8gY2jhu5cgbmfhu5NpXG4gICAgICAgIGJ0bkNob25DaG9OZ29pID0gbmV3IEpCdXR0b24oXCJDaOG7jW5cIikge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgdm9pZCBwYWludENvbXBvbmVudChHcmFwaGljcyBnKSB7XG4gICAgICAgICAgICAgICAgR3JhcGhpY3MyRCBnMiA9IChHcmFwaGljczJEKSBnLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGcyLnNldFJlbmRlcmluZ0hpbnQoUmVuZGVyaW5nSGludHMuS0VZX0FOVElBTElBU0lORywgUmVuZGVyaW5nSGludHMuVkFMVUVfQU5USUFMSUFTX09OKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0TW9kZWwoKS5pc1ByZXNzZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZzIuc2V0Q29sb3IocHJpbWFyeUNvbG9yLmRhcmtlcigpLmRhcmtlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChnZXRNb2RlbCgpLmlzUm9sbG92ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZzIuc2V0Q29sb3IocHJpbWFyeUNvbG9yLmRhcmtlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGcyLnNldENvbG9yKHByaW1hcnlDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnMi5zZXRDb2xvcihuZXcgQ29sb3IoMjAwLCAyMDAsIDIwMCkpOyAvLyBNw6B1IGtoaSBuw7p0IGLhu4sgdsO0IGhp4buHdSBow7NhXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZzIuZmlsbFJlY3QoMCwgMCwgZ2V0V2lkdGgoKSwgZ2V0SGVpZ2h0KCkpO1xuICAgICAgICAgICAgICAgIGcyLmRpc3Bvc2UoKTtcblxuICAgICAgICAgICAgICAgIHN1cGVyLnBhaW50Q29tcG9uZW50KGcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGJ0bkNob25DaG9OZ29pLnNldEZvbnQobmV3IEZvbnQoXCJBcmlhbFwiLCBGb250LlBMQUlOLCAxMSkpO1xuICAgICAgICBidG5DaG9uQ2hvTmdvaS5zZXRGb3JlZ3JvdW5kKENvbG9yLldISVRFKTtcbiAgICAgICAgYnRuQ2hvbkNob05nb2kuc2V0Qm9yZGVyUGFpbnRlZChmYWxzZSk7XG4gICAgICAgIGJ0bkNob25DaG9OZ29pLnNldENvbnRlbnRBcmVhRmlsbGVkKGZhbHNlKTtcbiAgICAgICAgYnRuQ2hvbkNob05nb2kuc2V0Rm9jdXNQYWludGVkKGZhbHNlKTtcbiAgICAgICAgYnRuQ2hvbkNob05nb2kuc2V0Q3Vyc29yKG5ldyBDdXJzb3IoQ3Vyc29yLkhBTkRfQ1VSU09SKSk7XG4gICAgICAgIGJ0bkNob25DaG9OZ29pLnNldEljb24oY3JlYXRlU2VhdEljb24oMTIsIDEyLCBDb2xvci5XSElURSkpO1xuICAgICAgICBidG5DaG9uQ2hvTmdvaS5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IGhpZW5UaGlEaWFsb2dDaG9uQ2hvTmdvaSgpKTtcblxuICAgICAgICBwbmxDaG9OZ29pLmFkZChidG5DaG9uQ2hvTmdvaSwgQm9yZGVyTGF5b3V0LkVBU1QpO1xuXG4gICAgICAgIGdiYy5ncmlkeCA9IDE7XG4gICAgICAgIGdiYy5ncmlkeSA9IDM7XG4gICAgICAgIGdiYy5ncmlkd2lkdGggPSAzO1xuICAgICAgICBmb3JtUGFuZWwuYWRkKHBubENob05nb2ksIGdiYyk7XG5cbiAgICAgICAgLy8gSMOgbmcgNTogVHLhuqFuZyB0aMOhaSB2w6AgR2nDoSB2w6lcbiAgICAgICAgYWRkRm9ybVJvdyhmb3JtUGFuZWwsIGdiYywgNCwgXCJUcuG6oW5nIHRow6FpOlwiLCBcIkdpw6EgdsOpOlwiLCBsYWJlbEZvbnQpO1xuLi4uXG5cbiAgICAgICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdm9pZCBkb25lKCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVUYXVIaWVuVGFpID0gZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVUYXVIaWVuVGFpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhEb2lWZVBhbmVsLnRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIktow7RuZyB0w6xtIHRo4bqleSB2w6kgduG7m2kgbcOjOiBcIiArIG1hVmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFtTW9pKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdpYVZlQmFuRGF1ID0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGllblRoaVRob25nVGluVmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgeGVtIGPDsyB0aOG7gyDEkeG7lWkgdsOpIGtow7RuZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW4gY29UaGVEb2lWZSA9ICh2ZVRhdUhpZW5UYWkuZ2V0VHJhbmdUaGFpKCkgPT0gVHJhbmdUaGFpVmVUYXUuREFfVEhBTkhfVE9BTik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SW5wdXRGaWVsZHNFbmFibGVkKGNvVGhlRG9pVmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkRvaVZlLnNldEVuYWJsZWQoY29UaGVEb2lWZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQ2hvbkxpY2hUcmluaC5zZXRFbmFibGVkKGNvVGhlRG9pVmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkNob25DaG9OZ29pLnNldEVuYWJsZWQoY29UaGVEb2lWZSk7XG4uLi5cblxuICAgIHByaXZhdGUgdm9pZCBzZXRUcmFuZ1RoYWlDb2xvcihKTGFiZWwgbGFiZWwsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkge1xuICAgICAgICBzd2l0Y2ggKHRyYW5nVGhhaSkge1xuICAgICAgICAgICAgY2FzZSBDSE9fWEFDX05IQU46XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZCh3YXJuaW5nQ29sb3IpOyAvLyBDYW1cbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZVBlbmRpbmdJY29uKDE0LCAxNCwgd2FybmluZ0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERBX1RIQU5IX1RPQU46XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChzdWNjZXNzQ29sb3IpOyAvLyBYYW5oIGzDoVxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24oY3JlYXRlQ2hlY2tJY29uKDE0LCAxNCwgc3VjY2Vzc0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERBX1RSQTpcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRGb3JlZ3JvdW5kKGRhbmdlckNvbG9yKTsgLy8gxJDhu49cbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZUNhbmNlbEljb24oMTQsIDE0LCBkYW5nZXJDb2xvcikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEQV9ET0k6XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChncmF5Q29sb3IpOyAvLyBYw6FtXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVFeGNoYW5nZUljb24oMTQsIDE0LCBncmF5Q29sb3IpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChkYXJrVGV4dENvbG9yKTtcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuLi4uXG5cbiAgICAgICAgICAgIC8vIMSQ4buVaSB0cuG6oW5nIHRow6FpIHbDqSB0aMOgbmggQ0hPX1hBQ19OSEFOXG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTik7XG5cbiAgICAgICAgICAgIC8vIEfhu41pIEFQSSDEkeG7gyBj4bqtcCBuaOG6rXQgdsOpXG4gICAgICAgICAgICBib29sZWFuIHN1Y2Nlc3MgPSBkb2lWZURBTy5kb2lWZSh2ZVRhdUhpZW5UYWkpO1xuXG4gICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUxpY2hTdUFuZFNob3dTdWNjZXNzKHRyYW5nVGhhaUN1KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwixJDhu5VpIHbDqSBraMO0bmcgdGjDoG5oIGPDtG5nIVwiLCBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgXCJM4buXaSBraGkgdGjhu7FjIGhp4buHbiDEkeG7lWkgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKEVSUk9SX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbi4uLlxuXG4gICAgICAgIC8vIFRhYiAyOiBWTlBheSBRUlxuICAgICAgICBKUGFuZWwgcG5sVm5wYXlRUiA9IG5ldyBKUGFuZWwobmV3IEJvcmRlckxheW91dCgxMCwgMTApKTtcbiAgICAgICAgcG5sVm5wYXlRUi5zZXRCb3JkZXIoQm9yZGVyRmFjdG9yeS5jcmVhdGVFbXB0eUJvcmRlcigxMCwgMTAsIDEwLCAxMCkpO1xuXG4gICAgICAgIC8vIFBhbmVsIGhp4buDbiB0aOG7iyBtw6MgUVJcbiAgICAgICAgSlBhbmVsIHBubFFSRGlzcGxheSA9IG5ldyBKUGFuZWwobmV3IEJvcmRlckxheW91dCgpKTtcbiAgICAgICAgcG5sUVJEaXNwbGF5LnNldEJvcmRlcihCb3JkZXJGYWN0b3J5LmNyZWF0ZUxpbmVCb3JkZXIobmV3IENvbG9yKDIzMCwgMjMwLCAyMzApKSk7XG4gICAgICAgIHBubFFSRGlzcGxheS5zZXRCYWNrZ3JvdW5kKENvbG9yLldISVRFKTtcbiAgICAgICAgcG5sUVJEaXNwbGF5LnNldFByZWZlcnJlZFNpemUobmV3IERpbWVuc2lvbigyNDAsIDI0MCkpO1xuXG4gICAgICAgIC8vIExhYmVsIMSR4buDIGhp4buDbiB0aOG7iyBtw6MgUVIgKGJhbiDEkeG6p3UgY2jhu4kgaGnhu4NuIHRo4buLIGljb24gdOG6o2kpXG4gICAgICAgIEpMYWJlbCBsYmxRUkNvZGUgPSBuZXcgSkxhYmVsKCk7XG4gICAgICAgIGxibFFSQ29kZS5zZXRIb3Jpem9udGFsQWxpZ25tZW50KFN3aW5nQ29uc3RhbnRzLkNFTlRFUik7XG4gICAgICAgIGxibFFSQ29kZS5zZXRJY29uKGNyZWF0ZUxvYWRpbmdJY29uKDQ4LCA0OCkpO1xuICAgICAgICBwbmxRUkRpc3BsYXkuYWRkKGxibFFSQ29kZSwgQm9yZGVyTGF5b3V0LkNFTlRFUik7XG5cbiAgICAgICAgcG5sVm5wYXlRUi5hZGQocG5sUVJEaXNwbGF5LCBCb3JkZXJMYXlvdXQuQ0VOVEVSKTtcbi4uLlxuXG4gICAgICAgIC8vIExpc3RlbmVyIGNobyBjb21ib2JveCDEkeG7gyBjaHV54buDbiB0YWJcbiAgICAgICAgY21iUGF5bWVudFR5cGUuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBDYXJkTGF5b3V0IGNsID0gKENhcmRMYXlvdXQpIHBubFBheW1lbnRUYWJzLmdldExheW91dCgpO1xuICAgICAgICAgICAgaW50IHNlbGVjdGVkSW5kZXggPSBjbWJQYXltZW50VHlwZS5nZXRTZWxlY3RlZEluZGV4KCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2wuc2hvdyhwbmxQYXltZW50VGFicywgXCJCQU5LX1RSQU5TRkVSXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbC5zaG93KHBubFBheW1lbnRUYWJzLCBcIlZOUEFZX1FSXCIpO1xuICAgICAgICAgICAgICAgIC8vIFThuqFvIFFSIGNvZGUga2hpIGNo4buNbiB0YWIgVk5QYXlcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZVZucGF5UVJDb2RlKGxibFFSQ29kZSwgdmVUYXVIaWVuVGFpLmdldE1hVmUoKSwgdmVUYXVIaWVuVGFpLmdldEdpYVZlKCksIGxibFBheW1lbnRTdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBwbmxUcmFuc2ZlckluZm8uc2V0Qm9yZGVyKEJvcmRlckZhY3RvcnkuY3JlYXRlRW1wdHlCb3JkZXIoMCwgMCwgMTAsIDApKTtcbiAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LmFkZChwbmxUcmFuc2ZlckluZm8sIEJvcmRlckxheW91dC5OT1JUSCk7XG4gICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5hZGQocG5sUGF5bWVudFRhYnMsIEJvcmRlckxheW91dC5DRU5URVIpO1xuXG4gICAgICAgIC8vIE7DunQgbMOgbSBt4bubaSB0cuG6oW5nIHRow6FpIHRoYW5oIHRvw6FuXG4gICAgICAgIGJ0blJlZnJlc2hTdGF0dXMuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBsYmxQYXltZW50U3RhdHVzLCBkaWFsb2cpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIaeG7g24gdGjhu4sgcGFuZWwgcGjGsMahbmcgdGjhu6ljIHRoYW5oIHRvw6FuIGJhbiDEkeG6p3UgKG3hurdjIMSR4buLbmggbMOgIHRp4buBbiBt4bq3dClcbiAgICAgICAgcG5sUGF5bWVudC5hZGQocG5sQ2FzaFBheW1lbnQpO1xuICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgIHBubFBheW1lbnQuYWRkKHBubFRyYW5zZmVyUGF5bWVudCk7XG5cbiAgICAgICAgLy8gVGjDqm0gbGlzdGVuZXIgY2hvIHJhZGlvIGJ1dHRvbiDEkeG7gyBjaHV54buDbiDEkeG7lWkgZ2nhu69hIGPDoWMgcGjGsMahbmcgdGjhu6ljIHRoYW5oIHRvw6FuXG4gICAgICAgIHJhZENhc2guYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBwbmxDYXNoUGF5bWVudC5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgZGlhbG9nLnJldmFsaWRhdGUoKTtcbiAgICAgICAgICAgIGRpYWxvZy5yZXBhaW50KCk7XG4gICAgICAgIH0pO1xuLi4uXG5cbiAgICAgICAgYnRuVGhhbmhUb2FuLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAocmFkQ2FzaC5pc1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gWOG7rSBsw70gdGhhbmggdG/DoW4gdGnhu4FuIG3hurd0XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBpbnB1dCA9IHR4dEN1c3RvbWVyUGF5bWVudC5nZXRUZXh0KCkucmVwbGFjZUFsbChcIlteXFxcXGRdXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVnVpIGzDsm5nIG5o4bqtcCBz4buRIHRp4buBbiBraMOhY2ggxJHGsGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZG91YmxlIGN1c3RvbWVyUGF5bWVudCA9IERvdWJsZS5wYXJzZURvdWJsZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21lclBheW1lbnQgPCB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlPhu5EgdGnhu4FuIGtow6FjaCDEkcawYSBraMO0bmcgxJHhu6dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHh1THlUaGFuaFRvYW4oXCJUSUVOX01BVFwiLCBcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGNoYW5nZSA9IGN1c3RvbWVyUGF5bWVudCAtIHZlVGF1SGllblRhaS5nZXRHaWFWZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1BheW1lbnRTdWNjZXNzRGlhbG9nKGNoYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQWZ0ZXJTdWNjZXNzZnVsUGF5bWVudChkaWFsb2cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4uLi5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gVk5QYXkgUVJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFjDoWMgdGjhu7FjIGzhuqFpIHRy4bqhbmcgdGjDoWkgdGhhbmggdG/DoW4gbeG7mXQgbOG6p24gbuG7r2FcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW4gcGF5bWVudFN1Y2Nlc3MgPSBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBsYmxQYXltZW50U3RhdHVzLCBudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBheW1lbnRTdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1ZucGF5U3VjY2Vzc0RpYWxvZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2jGsGEgbmjhuq1uIMSRxrDhu6NjIHRow7RuZyB0aW4gdGhhbmggdG/DoW4uIFZ1aSBsw7JuZyB0aGFuaCB0b8OhbiBob+G6t2Mga2nhu4NtIHRyYSBs4bqhaS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2jGsGEgdGhhbmggdG/DoW5cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU+G7kSB0aeG7gW4ga2jDtG5nIGjhu6NwIGzhu4dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZXgpIHtcbiAgICAgICAgICAgICAgICBleC5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpIGtoaSB0aGFuaCB0b8OhbjogXCIgKyBleC5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbi4uLlxuXG4gICAgLy8gUGjGsMahbmcgdGjhu6ljIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBWTlBheVxuICAgIHByaXZhdGUgYm9vbGVhbiBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyhTdHJpbmcgbWFWZSwgSkxhYmVsIGxibFN0YXR1cywgSkRpYWxvZyBwYXJlbnREaWFsb2cpIHtcbiAgICAgICAgLy8gVOG6oW8gU3dpbmdXb3JrZXIgxJHhu4Mga2jDtG5nIGzDoG0gxJHGoSBnaWFvIGRp4buHblxuICAgICAgICBTd2luZ1dvcmtlcjxCb29sZWFuLCBWb2lkPiB3b3JrZXIgPSBuZXcgU3dpbmdXb3JrZXI8PigpIHtcbiAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgcHJvdGVjdGVkIEJvb2xlYW4gZG9JbkJhY2tncm91bmQoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJvbmcgbcO0aSB0csaw4budbmcgdGjhu7FjIHThur8sIGLhuqFuIHPhur0gZ+G7jWkgQVBJIFZOUGF5IMSR4buDIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSBnaWFvIGThu4tjaFxuICAgICAgICAgICAgICAgICAgICAvLyDhu54gxJHDonkgY2jDum5nIHRhIHPhur0gbcO0IHBo4buPbmcgdmnhu4djIGtp4buDbSB0cmEsIHRy4bqjIHbhu4Egbmfhuqt1IG5oacOqbiDEkeG7gyBkZW1vXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyb25nIHRo4buxYyB04bq/LCBz4bq9IGtp4buDbSB0cmEgZOG7sWEgdHLDqm4gbcOjIGdpYW8gZOG7i2NoIMSRw6MgbMawdVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIE3DtCBwaOG7j25nIGfhu41pIEFQSSBraeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgKDUwJSBjxqEgaOG7mWkgdGjDoG5oIGPDtG5nKVxuICAgICAgICAgICAgICAgICAgICBUaHJlYWQuc2xlZXAoMTUwMCk7IC8vIE3DtCBwaOG7j25nIHRo4budaSBnaWFuIGfhu41pIEFQSVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJhbmRvbSgpLm5leHRCb29sZWFuKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgcHJpdmF0ZSB2b2lkIGdlbmVyYXRlVm5wYXlRUkNvZGUoSkxhYmVsIGxibFFSQ29kZSwgU3RyaW5nIG1hVmUsIGRvdWJsZSBhbW91bnQsIEpMYWJlbCBsYmxTdGF0dXMpIHtcbiAgICAgICAgLy8gVOG6oW8gU3dpbmdXb3JrZXIgxJHhu4Mga2jDtG5nIGzDoG0gxJHGoSBnaWFvIGRp4buHblxuICAgICAgICBTd2luZ1dvcmtlcjxJbWFnZUljb24sIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgSW1hZ2VJY29uIGRvSW5CYWNrZ3JvdW5kKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFThuqFvIHRoYW0gc+G7kSBjaG8gQVBJIFZOUGF5XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfVHhuUmVmID0gbWFWZSArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOyAvLyBNw6MgdGhhbSBjaGnhur91IGdpYW8gZOG7i2NoXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfQW1vdW50ID0gU3RyaW5nLnZhbHVlT2YoKGxvbmcpKGFtb3VudCAqIDEwMCkpOyAvLyBT4buRIHRp4buBbiAqIDEwMCAoxJHGoW4gduG7iyB4dSlcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9PcmRlckluZm8gPSBcIlRoYW5oIHRvYW4gaG9hIGRvbiB2ZSB0YXUgXCIgKyBtYVZlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVSTCBBUEkgdOG6oW8gbcOjIFFSIGPhu6dhIFZOUGF5ICjEkcOieSBsw6AgVVJMIGdp4bqjIMSR4buLbmgsIGLhuqFuIGPhuqduIHRoYXkgdGjhur8gYuG6sW5nIFVSTCB0aOG7sWMpXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBhcGlVcmwgPSBcImh0dHBzOi8vc2FuZGJveC52bnBheW1lbnQudm4vcGF5bWVudHYyL2NyZWF0ZV9xcl9jb2RlLmh0bWxcIjtcbi4uLlxuXG4gICAgcHJpdmF0ZSB2b2lkIGxhbU1vaSgpIHtcbiAgICAgICAgdHh0TWFWZS5zZXRUZXh0KFwiXCIpO1xuICAgICAgICB0eHRUZW5LaGFjaEhhbmcuc2V0VGV4dChcIlwiKTtcbiAgICAgICAgdHh0R2lheVRvLnNldFRleHQoXCJcIik7XG4gICAgICAgIHR4dE5nYXlEaS5zZXRUZXh0KFwiXCIpO1xuICAgICAgICBjYm9Eb2lUdW9uZy5zZXRTZWxlY3RlZEluZGV4KDApO1xuXG4gICAgICAgIGxibExpY2hUcmluaC5zZXRUZXh0KFwiQ2jGsGEgY2jhu41uXCIpO1xuICAgICAgICBsYmxDaG9OZ29pLnNldFRleHQoXCJDaMawYSBjaOG7jW5cIik7XG5cbiAgICAgICAgbGJsVHJhbmdUaGFpLnNldFRleHQoXCItLS1cIik7XG4gICAgICAgIGxibFRyYW5nVGhhaS5zZXRGb3JlZ3JvdW5kKENvbG9yLkJMQUNLKTtcbiAgICAgICAgbGJsR2lhVmUuc2V0VGV4dChcIjAgVk7EkFwiKTtcblxuICAgICAgICB2ZVRhdUhpZW5UYWkgPSBudWxsO1xuICAgICAgICBsaWNoVHJpbmhEYUNob24gPSBudWxsO1xuICAgICAgICBjaG9OZ29pRGFDaG9uID0gbnVsbDtcbiAgICAgICAga2h1eWVuTWFpRGFDaG9uID0gbnVsbDtcblxuICAgICAgICBzZXRJbnB1dEZpZWxkc0VuYWJsZWQoZmFsc2UpO1xuICAgICAgICBidG5Eb2lWZS5zZXRFbmFibGVkKGZhbHNlKTtcbiAgICAgICAgYnRuQ2hvbkxpY2hUcmluaC5zZXRFbmFibGVkKGZhbHNlKTtcbiAgICAgICAgYnRuQ2hvbkNob05nb2kuc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgICAgIHVwZGF0ZVN0YXR1cyhSRUFEWV9URVhULCBmYWxzZSk7XG4gICAgfVxuLi4uXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJlYzFhY2VjMS1jMzYzLTQzM2YtOTMzMi1hYTg0NTgwMDY1OTE7dG9vbHVfdnJ0eF8wMVRCMUtxMkxnclFDWDliQlc3Y0FLN3kiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9WZVRhdS5qYXZhXG4uLi5cblxuQEVudGl0eVxuQERhdGFcbkBFcXVhbHNBbmRIYXNoQ29kZShvbmx5RXhwbGljaXRseUluY2x1ZGVkID0gdHJ1ZSlcbkBUYWJsZShuYW1lID0gXCJ2ZXRhdVwiKVxucHVibGljIGNsYXNzIFZlVGF1IGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBASWRcbiAgICBAQ29sdW1uKG5hbWUgPSBcIm1hX3ZlXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIlZBUkNIQVIoMjU1KVwiLCB1bmlxdWUgPSB0cnVlLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgU3RyaW5nIG1hVmU7XG4gICAgQENvbHVtbihuYW1lID0gXCJ0ZW5fa2hhY2hfaGFuZ1wiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJWQVJDSEFSKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSlcblxuICAgIHByaXZhdGUgU3RyaW5nIHRlbktoYWNoSGFuZztcbiAgICBAQ29sdW1uKG5hbWUgPSBcImdpYXlfdG9cIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiVkFSQ0hBUigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UpXG5cbiAgICBwcml2YXRlIFN0cmluZyBnaWF5VG87XG4gICAgQENvbHVtbihuYW1lID0gXCJuZ2F5X2RpXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIkRBVEVcIixudWxsYWJsZSA9IGZhbHNlKVxuXG4gICAgcHJpdmF0ZSBMb2NhbERhdGUgbmdheURpO1xuICAgIEBDb2x1bW4obmFtZSA9IFwiZG9pX3R1b25nXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIlZBUkNIQVIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuXG4gICAgcHJpdmF0ZSBTdHJpbmcgZG9pVHVvbmc7XG4gICAgQENvbHVtbihuYW1lID0gXCJnaWFfdmVcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiRkxPQVRcIiwgbnVsbGFibGUgPSBmYWxzZSlcblxuICAgIHByaXZhdGUgZG91YmxlIGdpYVZlO1xuXG4gICAgQEVudW1lcmF0ZWQoRW51bVR5cGUuU1RSSU5HKVxuICAgIEBDb2x1bW4obmFtZSA9IFwidHJhbmdfdGhhaVwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJWQVJDSEFSKDI1NSlcIixudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpO1xuXG4gICAgQE1hbnlUb09uZVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcImxpY2hfdHJpbmhfdGF1X21hX2xpY2hcIiwgcmVmZXJlbmNlZENvbHVtbk5hbWUgPSBcIm1hX2xpY2hcIilcbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIHByaXZhdGUgTGljaFRyaW5oVGF1IGxpY2hUcmluaFRhdTtcblxuICAgIEBNYW55VG9PbmVcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJraHV5ZW5fbWFpX21hX2ttXCIsIHJlZmVyZW5jZWRDb2x1bW5OYW1lID0gXCJtYV9rbVwiKVxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgcHJpdmF0ZSBLaHV5ZW5NYWkga2h1eWVuTWFpO1xuXG4gICAgQE9uZVRvT25lXG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwiY2hvX25nb2lfbWFfY2hvXCIscmVmZXJlbmNlZENvbHVtbk5hbWUgPSBcIm1hX2Nob1wiKVxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgIHByaXZhdGUgQ2hvTmdvaSBjaG9OZ29pO1xuXG4vLyAgICBATWFueVRvTWFueShtYXBwZWRCeSA9IFwidmVUYXVzXCIpXG4vLyAgICBwcml2YXRlIFNldDxIb2FEb24+IGhvYURvbnM7XG5cbiAgICAvLyBN4buRaSBxdWFuIGjhu4cgduG7m2kgQ2hpVGlldEhvYURvblxuICAgIEBPbmVUb01hbnkobWFwcGVkQnkgPSBcInZlVGF1XCIsIGZldGNoID0gRmV0Y2hUeXBlLkxBWlkpXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBwcml2YXRlIFNldDxDaGlUaWV0SG9hRG9uPiBjaGlUaWV0SG9hRG9ucztcblxufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9WZVRhdURBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxuaW1wb3J0IG1vZGVsLkhvYURvbjtcbmltcG9ydCBtb2RlbC5LaGFjaEhhbmc7XG5pbXBvcnQgbW9kZWwuVmVUYXU7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGU7XG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuaW1wb3J0IGphdmEudXRpbC5NYXA7XG5cbi8qKlxuICogQEThu7Egw6FuOiBQaGFuVGFuSmF2YU5ob21HUFRcbiAqIEBDbGFzczogVmVEQU9cbiAqIEBU4bqhbyB2w6BvIG5nw6B5OiAxOC8wNC8yMDI1XG4gKiBAVMOhYyBnaeG6ozogTmd1eWVuIEh1dSBTYW5nXG4gKi9cbnB1YmxpYyBpbnRlcmZhY2UgVmVUYXVEQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIGJvb2xlYW4gc2F2ZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFZlVGF1PiBnZXRBbGxMaXN0KCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBWZVRhdSBnZXRCeUlkKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHVwZGF0ZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGRlbGV0ZShTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxWZVRhdT4gZ2V0QnlJbnZvaWNlSWQoU3RyaW5nIGludm9pY2VJZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIGJvb2xlYW4gdXBkYXRlU3RhdHVzVG9SZXR1cm5lZChTdHJpbmcgdGlja2V0SWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgSG9hRG9uIGdldEhvYURvblRoYW5oVG9hbkJ5TWFWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBLaGFjaEhhbmcgZ2V0S2hhY2hIYW5nQnlNYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTWFwPFN0cmluZywgU3RyaW5nPiBnZXRUaG9uZ1RpbkdhQnlNYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9UcmFuZ1RoYWlWZVRhdS5qYXZhXG5wYWNrYWdlIG1vZGVsO1xuXG5wdWJsaWMgZW51bSBUcmFuZ1RoYWlWZVRhdSB7XG4gICAgQ0hPX1hBQ19OSEFOKFwiQ2jhu50geMOhYyBuaOG6rW5cIiksXG4gICAgREFfVEhBTkhfVE9BTihcIsSQw6MgdGhhbmggdG/DoW5cIiksXG4gICAgREFfRE9JKFwixJDDoyDEkeG7lWlcIiksXG4gICAgREFfVFJBKFwixJDDoyB0cuG6o1wiKTtcblxuICAgIHByaXZhdGUgZmluYWwgU3RyaW5nIHZhbHVlO1xuXG4gICAgVHJhbmdUaGFpVmVUYXUoU3RyaW5nIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgU3RyaW5nIGdldFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBUcmFuZ1RoYWlWZVRhdSBmcm9tVmFsdWUoU3RyaW5nIHZhbHVlKSB7XG4gICAgICAgIGZvciAoVHJhbmdUaGFpVmVUYXUgc3RhdHVzIDogVHJhbmdUaGFpVmVUYXUudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUuZXF1YWxzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbihcIk5vIGVudW0gY29uc3RhbnQgZm9yIHZhbHVlOiBcIiArIHZhbHVlKTtcbiAgICB9XG59Li4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL0xpY2hUcmluaFRhdS5qYXZhXG4uLi5cblxuQEVudGl0eVxuQERhdGFcbkBFcXVhbHNBbmRIYXNoQ29kZShvbmx5RXhwbGljaXRseUluY2x1ZGVkID0gdHJ1ZSlcbkBUYWJsZShuYW1lID0gXCJsaWNodHJpbmh0YXVcIilcbnB1YmxpYyBjbGFzcyBMaWNoVHJpbmhUYXUgaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuICAgIEBJZFxuICAgIEBDb2x1bW4obmFtZSA9IFwibWFfbGljaFwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJWQVJDSEFSKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSwgdW5pcXVlID0gdHJ1ZSlcbiAgICBwcml2YXRlIFN0cmluZyBtYUxpY2g7XG5cbiAgICBAQ29sdW1uKG5hbWUgPSBcImdpb19kaVwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJUSU1FXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBMb2NhbFRpbWUgZ2lvRGk7XG5cbiAgICBAQ29sdW1uKG5hbWUgPSBcIm5nYXlfZGlcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiREFURVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgTG9jYWxEYXRlIG5nYXlEaTtcblxuICAgIEBFbnVtZXJhdGVkKEVudW1UeXBlLlNUUklORylcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRyYW5nX3RoYWlcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiTlZBUkNIQVIoNTApXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBUcmFuZ1RoYWkgdHJhbmdUaGFpO1xuXG4gICAgQE1hbnlUb09uZVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcInRhdV9tYV90YXVcIiwgcmVmZXJlbmNlZENvbHVtbk5hbWUgPSBcIm1hX3RhdVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgVGF1IHRhdTtcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9UYXUuamF2YVxuLi4uXG5cbkBEYXRhXG5ARW50aXR5XG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5AVGFibGUobmFtZSA9IFwidGF1XCIpXG5wdWJsaWMgY2xhc3MgVGF1IGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBASWRcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuSW5jbHVkZVxuICAgIEBDb2x1bW4obmFtZSA9IFwibWFfdGF1XCIsIGNvbHVtbkRlZmluaXRpb24gPSBcInZhcmNoYXIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlLCB1bmlxdWUgPSB0cnVlKVxuICAgIHByaXZhdGUgU3RyaW5nIG1hVGF1OyAvLyBNw6MgdMOgdVxuICAgIEBDb2x1bW4obmFtZSA9IFwidGVuX3RhdVwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJ2YXJjaGFyKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuRXhjbHVkZVxuICAgIHByaXZhdGUgU3RyaW5nIHRlblRhdTtcbiAgICBAQ29sdW1uKG5hbWUgPSBcInNvX3RvYVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5FeGNsdWRlLy8gVMOqbiB0w6B1XG4gICAgcHJpdmF0ZSBpbnQgc29Ub2E7XG4gICAgLy8gU+G7kSB0b2FcbiAgICBATWFueVRvT25lKGZldGNoID0gRmV0Y2hUeXBlLkxBWlkpXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJtYV90dXllblwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgVHV5ZW5UYXUgdHV5ZW5UYXU7IC8vIMSQ4buRaSB0xrDhu6NuZyBUdXllblRhdVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9Eb2lWZURBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxuaW1wb3J0IG1vZGVsLkNob05nb2k7XG5pbXBvcnQgbW9kZWwuS2hhY2hIYW5nO1xuaW1wb3J0IG1vZGVsLlRyYW5nVGhhaVZlVGF1O1xuaW1wb3J0IG1vZGVsLlZlVGF1O1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlO1xuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcblxucHVibGljIGludGVyZmFjZSBEb2lWZURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgVmVUYXUgZ2V0VmVUYXUoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZG9pVmUoVmVUYXUgdmVUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxWZVRhdT4gZ2V0VmVUYXVCeVRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB0ZXN0Q29ubmVjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxUcmFuZ1RoYWlWZVRhdT4gZ2V0QWxsVHJhbmdUaGFpVmUoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gVGjDqm0gY2jhu6ljIG7Eg25nIG3hu5tpXG4gICAgYm9vbGVhbiBkYXRWZShWZVRhdSB2ZVRhdSwgU3RyaW5nIGNob05nb2lJZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGh1eVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gdGhhbmhUb2FuVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBjYXBOaGF0VHJhbmdUaGFpVmUoU3RyaW5nIG1hVmUsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBLaGFjaEhhbmcgZ2V0S2hhY2hIYW5nQnlNYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9LZXRRdWFUaG9uZ0tlVmUuamF2YVxucGFja2FnZSBtb2RlbDtcblxuaW1wb3J0IGxvbWJvay5EYXRhO1xuXG5pbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG5pbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZTtcblxuLyoqXG4gKiBDbGFzcyBjaOG7qWEga+G6v3QgcXXhuqMgdGjhu5FuZyBrw6ogdsOpIHTDoHVcbiAqL1xuQERhdGFcbnB1YmxpYyBjbGFzcyBLZXRRdWFUaG9uZ0tlVmUgaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGxvbmcgc2VyaWFsVmVyc2lvblVJRCA9IDFMO1xuXG4gICAgcHJpdmF0ZSBMb2NhbERhdGUgdGhvaUdpYW47XG4gICAgcHJpdmF0ZSBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWk7XG4gICAgcHJpdmF0ZSBTdHJpbmcgdGVuVHV5ZW47XG4gICAgcHJpdmF0ZSBTdHJpbmcgbG9haVRvYTtcbiAgICBwcml2YXRlIGludCBzb0x1b25nO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9Ub2FUYXUuamF2YVxuLi4uXG5cbnB1YmxpYyBjbGFzcyBUb2FUYXUgaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuXG4gICAgQElkXG4gICAgQEVxdWFsc0FuZEhhc2hDb2RlLkluY2x1ZGVcbiAgICBAQ29sdW1uKG5hbWUgPSBcIm1hX3RvYVwiLGNvbHVtbkRlZmluaXRpb24gPSBcInZhcmNoYXIoMjU1KVwiLG51bGxhYmxlID0gZmFsc2UsIHVuaXF1ZSA9IHRydWUpXG4gICAgcHJpdmF0ZSBTdHJpbmcgbWFUb2E7XG5cbiAgICBAQ29sdW1uKG5hbWUgPSBcInRlbl90b2FcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwidmFyY2hhcigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBTdHJpbmcgdGVuVG9hO1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJzb19naGVcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGludCBzb0doZTtcblxuICAgIEBDb2x1bW4obmFtZSA9IFwidGh1X3R1XCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBpbnQgdGh1VHU7XG5cbiAgICBAT25lVG9NYW55KG1hcHBlZEJ5ID0gXCJ0b2FUYXVcIiwgY2FzY2FkZSA9IENhc2NhZGVUeXBlLkFMTCwgb3JwaGFuUmVtb3ZhbCA9IHRydWUpXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBwcml2YXRlIFNldDxDaG9OZ29pPiBkYW5oU2FjaENob05nb2k7XG5cbiAgICBATWFueVRvT25lKGZldGNoID0gRmV0Y2hUeXBlLkxBWlkpXG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfbG9haV90b2FcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIHByaXZhdGUgTG9haVRvYSBsb2FpVG9hO1xuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL1ZlVGF1REFPSW1wbC5qYXZhXG5wYWNrYWdlIGRhby5pbXBsO1xuXG5pbXBvcnQgZGFvLlZlVGF1REFPO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW50aXR5TWFuYWdlcjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eVRyYW5zYWN0aW9uO1xuaW1wb3J0IG1vZGVsLkhvYURvbjtcbmltcG9ydCBtb2RlbC5LaGFjaEhhbmc7XG5pbXBvcnQgbW9kZWwuVHJhbmdUaGFpVmVUYXU7XG5pbXBvcnQgbW9kZWwuVmVUYXU7XG5pbXBvcnQgdXRpbC5KUEFVdGlsO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEucm1pLnNlcnZlci5VbmljYXN0UmVtb3RlT2JqZWN0O1xuaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwO1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuaW1wb3J0IGphdmEudXRpbC5NYXA7XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvVHJhbmdUaGFpLmphdmFcbnBhY2thZ2UgbW9kZWw7XG5cbnB1YmxpYyBlbnVtIFRyYW5nVGhhaSB7XG4gICAgREFfS0hPSV9IQU5IKFwixJDDoyBraOG7n2kgaMOgbmhcIiksXG4gICAgQ0hVQV9LSE9JX0hBTkgoXCJDaMawYSBraOG7n2kgaMOgbmhcIiksXG4gICAgREFfSFVZKFwixJDDoyBo4buneVwiKSxcbiAgICBIT0FUX0RPTkcoXCJIb+G6oXQgxJHhu5luZ1wiKTtcblxuICAgIHByaXZhdGUgZmluYWwgU3RyaW5nIHZhbHVlO1xuXG4gICAgVHJhbmdUaGFpKFN0cmluZyB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIFN0cmluZyBnZXRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgVHJhbmdUaGFpIGZyb21WYWx1ZShTdHJpbmcgdmFsdWUpIHtcbiAgICAgICAgZm9yIChUcmFuZ1RoYWkgc3RhdHVzIDogVHJhbmdUaGFpLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzLnZhbHVlLmVxdWFscyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oXCJObyBlbnVtIGNvbnN0YW50IGZvciB2YWx1ZTogXCIgKyB2YWx1ZSk7XG4gICAgfVxufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vVHJhQ3V1VmVEQU8uamF2YVxuLi4uXG5cbnB1YmxpYyBpbnRlcmZhY2UgVHJhQ3V1VmVEQU8gZXh0ZW5kcyBSZW1vdGUge1xuXG4gICAgVmVUYXUgdGltVmVUYXVUaGVvTWEoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBMaXN0PFZlVGF1PiB0aW1EYW5oU2FjaFZlVGF1VGhlb01hKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgQ2hpVGlldEhvYURvbiB0aW1DaGlUaWV0SG9hRG9uVGhlb01hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBMaXN0PFZlVGF1PiB0aW1WZVRhdVRoZW9HaWF5VG8oU3RyaW5nIGdpYXlUbykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIExpc3Q8VmVUYXU+IHRpbVZlVGF1VGhlb1RlbktIKFN0cmluZyB0ZW5LaGFjaEhhbmcpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBMaXN0PFZlVGF1PiB0aW1WZVRhdVRoZW9DaGl0aWV0KFN0cmluZyB0ZW5LaGFjaEhhbmcsIFN0cmluZyBnaWF5VG8sIExvY2FsRGF0ZSBuZ2F5RGksIFN0cmluZyBtYUNob05nb2ksIFN0cmluZyBkb2lUdW9uZykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIExpc3Q8VmVUYXU+IHRpbVZlVGF1VGhlb1RlbktIVmFUaG9pR2lhbihTdHJpbmcgaG9UZW4sIExvY2FsRGF0ZSBuZ2F5RGlGcm9tLCBMb2NhbERhdGUgbmdheURpVG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBib29sZWFuIHRlc3RDb25uZWN0aW9uKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL1NjcmlwdC9zY3JpcHQuc3FsXG5zZWxlY3QgKiBmcm9tIHRvYXRhdTtcbnNlbGVjdCAqIGZyb20gdGF1O1xuc2VsZWN0ICogZnJvbSB0dXllbnRhdTtcbnNlbGVjdCAqIGZyb20gbG9haXRvYTtcbiNuYXRpdmUgcXVlcnlcbnNlbGVjdCAqIGZyb20gdG9hdGF1IHdoZXJlIHNvX2doZSBiZXR3ZWVuIDc1IGFuZCA4MDtcblxuc2VsZWN0ICogZnJvbSB0YWlraG9hbjtcbnNlbGVjdCAqIGZyb20gbmhhbnZpZW47XG5zZWxlY3QgKiBmcm9tIGxpY2hsYW12aWVjO1xuc2VsZWN0ICogZnJvbSBraGFjaGhhbmc7XG5zZWxlY3QgKiBmcm9tIGhvYWRvbjtcbnNlbGVjdCAqIGZyb20gY2hpdGlldF9ob2Fkb247XG5cblNFTEVDVCBESVNUSU5DVCB0cmFuZ190aGFpIEZST00gbGljaHRyaW5odGF1O1xuXG5VUERBVEUgdmV0YXUgU0VUIHRyYW5nX3RoYWkgPSAnREFfVFJBJyBXSEVSRSB0cmFuZ190aGFpID0gJ8SQw6MgdHLhuqMnO1xuXG5zZWxlY3QgKiBmcm9tIHZldGF1XG5cblxuc2VsZWN0ICogZnJvbSBraGFjaGhhbmc7XG5zZWxlY3QgKiBmcm9tIGxvYWlraGFjaGhhbmc7XG5cbnNlbGVjdCAqIGZyb20gaG9hZG9uO1xuc2VsZWN0ICogZnJvbSBsb2FpaG9hZG9uO1xuc2VsZWN0ICogZnJvbSBjaGl0aWV0X2hvYWRvbjtcblxuc2VsZWN0ICogZnJvbSBraHV5ZW5tYWk7XG5zZWxlY3QgKiBmcm9tIGxvYWljaG87XG5cblxuc2VsZWN0ICogZnJvbSB2ZXRhdTtcblxuREVMRVRFIEZST00gY2hpdGlldF9ob2Fkb247XG5ERUxFVEUgRlJPTSB2ZXRhdTtcbkFMVEVSIFRBQkxFIHZldGF1IEFVVE9fSU5DUkVNRU5UID0gMTtcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vVGF1REFPLmphdmFcbnBhY2thZ2UgZGFvO1xuXG5pbXBvcnQgbW9kZWwuTGljaFRyaW5oVGF1O1xuaW1wb3J0IG1vZGVsLlRhdTtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZTtcbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5cbnB1YmxpYyBpbnRlcmZhY2UgVGF1REFPIGV4dGVuZHMgUmVtb3RlIHtcbiAgICBMaXN0PFRhdT4gZ2V0QWxsTGlzdFQoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8VGF1PiBnZXRBbGxXaXRoUm91dGVzKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBwdWJsaWMgVGF1IGdldFRhdUJ5TGljaFRyaW5oVGF1KExpY2hUcmluaFRhdSBsaWNoVHJpbmgpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvSG9hRG9uLmphdmFcbnBhY2thZ2UgbW9kZWw7XG5cblxuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuKjtcbmltcG9ydCBsb21ib2suRGF0YTtcbmltcG9ydCBsb21ib2suRXF1YWxzQW5kSGFzaENvZGU7XG5pbXBvcnQgbG9tYm9rLlRvU3RyaW5nO1xuXG5pbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG5pbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZTtcbmltcG9ydCBqYXZhLnRpbWUuTG9jYWxEYXRlVGltZTtcbmltcG9ydCBqYXZhLnV0aWwuT2JqZWN0cztcbmltcG9ydCBqYXZhLnV0aWwuU2V0O1xuXG5ARGF0YVxuQEVudGl0eVxuQFRhYmxlKG5hbWUgPSBcImhvYWRvblwiKVxuQEVxdWFsc0FuZEhhc2hDb2RlKG9ubHlFeHBsaWNpdGx5SW5jbHVkZWQgPSB0cnVlKVxucHVibGljIGNsYXNzIEhvYURvbiBpbXBsZW1lbnRzIFNlcmlhbGl6YWJsZSB7XG4gICAgQElkXG4gICAgQENvbHVtbihuYW1lID0gXCJtYV9oZFwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJ2YXJjaGFyKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSwgdW5pcXVlID0gdHJ1ZSlcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuSW5jbHVkZVxuICAgIHByaXZhdGUgU3RyaW5nIG1hSEQ7XG5cbiAgICBAQ29sdW1uKG5hbWUgPSBcIm5nYXlfbGFwXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcImRhdGV0aW1lXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBMb2NhbERhdGVUaW1lIG5nYXlMYXA7XG4gICAgQENvbHVtbihuYW1lID0gXCJ0aWVuX2dpYW1cIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiZG91YmxlXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBkb3VibGUgdGllbkdpYW07XG4gICAgQENvbHVtbihuYW1lID0gXCJ0b25nX3RpZW5cIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiZG91YmxlXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBkb3VibGUgdG9uZ1RpZW47XG5cbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIEBNYW55VG9PbmUoZmV0Y2ggPSBGZXRjaFR5cGUuTEFaWSlcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJtYV9raGFjaF9oYW5nXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBLaGFjaEhhbmcga2hhY2hIYW5nO1xuXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBATWFueVRvT25lKGZldGNoID0gRmV0Y2hUeXBlLkxBWlkpXG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfbmhhbl92aWVuXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBOaGFuVmllbiBudjtcblxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgQE1hbnlUb09uZShmZXRjaCA9IEZldGNoVHlwZS5MQVpZKVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX2xvYWlfaGRcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIExvYWlIb2FEb24gbG9haUhvYURvbjtcblxuLy8gICAgQE1hbnlUb01hbnlcbi8vICAgIEBKb2luVGFibGUobmFtZSA9IFwiY2hpdGlldF9ob2Fkb25cIixcbi8vICAgICAgICAgICAgam9pbkNvbHVtbnMgPSBASm9pbkNvbHVtbihuYW1lID0gXCJtYV9oZFwiKSxcbi8vICAgICAgICAgICAgaW52ZXJzZUpvaW5Db2x1bW5zID0gQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfdmVcIikpXG4vLyAgICBwcml2YXRlIFNldDxWZVRhdT4gdmVUYXVzO1xuXG4gICAgQE9uZVRvTWFueShtYXBwZWRCeSA9IFwiaG9hRG9uXCIpXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBwcml2YXRlIFNldDxDaGlUaWV0SG9hRG9uPiBjaGlUaWV0SG9hRG9ucztcbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9DaGlUaWV0SG9hRG9uLmphdmFcbnBhY2thZ2UgbW9kZWw7XG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLio7XG5pbXBvcnQgbG9tYm9rLkRhdGE7XG5pbXBvcnQgbG9tYm9rLlRvU3RyaW5nO1xuXG5pbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG5cbkBEYXRhXG5ARW50aXR5XG5AVGFibGUobmFtZSA9IFwiY2hpdGlldF9ob2Fkb25cIilcbnB1YmxpYyBjbGFzcyBDaGlUaWV0SG9hRG9uIGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcblxuICAgIEBFbWJlZGRlZElkXG4gICAgcHJpdmF0ZSBDaGlUaWV0SG9hRG9uSWQgaWQ7XG5cbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIEBNYW55VG9PbmUoZmV0Y2ggPSBGZXRjaFR5cGUuTEFaWSlcbiAgICBATWFwc0lkKFwibWFIRFwiKSAgLy8gTWFwcyBtYUhEIGluIHRoZSBjb21wb3NpdGUga2V5XG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfaGRcIiwgcmVmZXJlbmNlZENvbHVtbk5hbWUgPSBcIm1hX2hkXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBIb2FEb24gaG9hRG9uO1xuXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBATWFueVRvT25lKGZldGNoID0gRmV0Y2hUeXBlLkxBWlkpXG4gICAgQE1hcHNJZChcIm1hVmVcIikgIC8vIE1hcHMgbWFWZSBpbiB0aGUgY29tcG9zaXRlIGtleVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX3ZlXCIsIHJlZmVyZW5jZWRDb2x1bW5OYW1lID0gXCJtYV92ZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgVmVUYXUgdmVUYXU7XG5cbiAgICBAQ29sdW1uKG5hbWUgPSBcInNvX2x1b25nXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBpbnQgc29MdW9uZztcblxuICAgIEBDb2x1bW4obmFtZSA9IFwiVkFUXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBkb3VibGUgVkFUO1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJ0aGFuaF90aWVuXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBkb3VibGUgdGhhbmhUaWVuO1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJ0aWVuX3RodWVcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGRvdWJsZSB0aWVuVGh1ZTtcblxuXG59XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvQ2hpVGlldEhvYURvbklkLmphdmFcbnBhY2thZ2UgbW9kZWw7XG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVtYmVkZGFibGU7XG5pbXBvcnQgbG9tYm9rLkRhdGE7XG5pbXBvcnQgbG9tYm9rLkVxdWFsc0FuZEhhc2hDb2RlO1xuXG5pbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG5pbXBvcnQgamF2YS51dGlsLk9iamVjdHM7XG5ARGF0YVxuQEVtYmVkZGFibGVcbkBFcXVhbHNBbmRIYXNoQ29kZShvbmx5RXhwbGljaXRseUluY2x1ZGVkID0gdHJ1ZSlcbnB1YmxpYyBjbGFzcyBDaGlUaWV0SG9hRG9uSWQgaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5JbmNsdWRlXG4gICAgcHJpdmF0ZSBTdHJpbmcgbWFIRDtcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuSW5jbHVkZVxuICAgIHByaXZhdGUgU3RyaW5nIG1hVmU7XG5cbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9Mb2FpSG9hRG9uLmphdmFcbnBhY2thZ2UgbW9kZWw7XG5cblxuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuKjtcbmltcG9ydCBsb21ib2suRGF0YTtcbmltcG9ydCBsb21ib2suRXF1YWxzQW5kSGFzaENvZGU7XG5pbXBvcnQgbG9tYm9rLlRvU3RyaW5nO1xuXG5pbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG5pbXBvcnQgamF2YS51dGlsLlNldDtcblxuQERhdGFcbkBFcXVhbHNBbmRIYXNoQ29kZShvbmx5RXhwbGljaXRseUluY2x1ZGVkID0gdHJ1ZSlcbkBFbnRpdHlcbkBUYWJsZShuYW1lID0gXCJsb2FpaG9hZG9uXCIpXG5AVG9TdHJpbmdcbnB1YmxpYyBjbGFzcyBMb2FpSG9hRG9uIGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBASWRcbiAgICBAQ29sdW1uKG5hbWUgPSBcIm1hX2xvYWlfaGRcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwidmFyY2hhcigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UsIHVuaXF1ZSA9IHRydWUpXG4gICAgQEVxdWFsc0FuZEhhc2hDb2RlLkluY2x1ZGVcbiAgICBwcml2YXRlIFN0cmluZyBtYUxvYWlIb2FEb247XG4gICAgQENvbHVtbihuYW1lID0gXCJ0ZW5fbG9haV9oZFwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJOVkFSQ0hBUigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBTdHJpbmcgdGVuTG9haUhvYURvbjtcblxuICAgIEBPbmVUb01hbnkobWFwcGVkQnkgPSBcImxvYWlIb2FEb25cIilcbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIHByaXZhdGUgU2V0PEhvYURvbj4gaG9hRG9ucztcblxuXG5cblxufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL0Nob05nb2kuamF2YVxucGFja2FnZSBtb2RlbDtcblxuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuKjtcbmltcG9ydCBsb21ib2suRGF0YTtcbmltcG9ydCBsb21ib2suRXF1YWxzQW5kSGFzaENvZGU7XG5pbXBvcnQgbG9tYm9rLlRvU3RyaW5nO1xuXG5pbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG5cbkBFbnRpdHlcbkBEYXRhXG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5AVGFibGUobmFtZSA9IFwiY2hvX25nb2lcIilcbnB1YmxpYyBjbGFzcyBDaG9OZ29pIGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBASWRcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuSW5jbHVkZVxuICAgIEBDb2x1bW4obmFtZSA9IFwibWFfY2hvXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIlZBUkNIQVIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlLCB1bmlxdWUgPSB0cnVlKVxuICAgIHByaXZhdGUgU3RyaW5nIG1hQ2hvO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidGVuX2Nob1wiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJOVkFSQ0hBUigyNTUpXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBTdHJpbmcgdGVuQ2hvO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidGluaF90cmFuZ1wiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJCSVRcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGJvb2xlYW4gdGluaFRyYW5nO1xuICAgIEBDb2x1bW4obmFtZSA9IFwiZ2lhX3RpZW5cIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiRkxPQVRcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGRvdWJsZSBnaWFUaWVuO1xuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL0hvYURvbkRBT0ltcGwuamF2YVxuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICAvLyBDcmVhdGU6IFRow6ptIGjDs2EgxJHGoW4gbeG7m2lcbiAgICBwdWJsaWMgYm9vbGVhbiBzYXZlSG9hRG9uKEhvYURvbiBob2FEb24pIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHRyID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRyLmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgeGVtIG3DoyBow7NhIMSRxqFuIMSRw6MgxJHGsOG7o2MgdGhp4bq/dCBs4bqtcCBjaMawYVxuICAgICAgICAgICAgaWYgKGhvYURvbi5nZXRNYUhEKCkgPT0gbnVsbCB8fCBob2FEb24uZ2V0TWFIRCgpLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIC8vIE7hur91IGNoxrBhIGPDsyBtw6MgaMOzYSDEkcahbiwgdOG7sSDEkeG7mW5nIHNpbmggbcOjXG4gICAgICAgICAgICAgICAgU3RyaW5nIG1hSEQgPSBnZW5lcmF0ZU1hSG9hRG9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgaG9hRG9uLmdldE5nYXlMYXAoKSAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9hRG9uLmdldE5nYXlMYXAoKS50b0xvY2FsRGF0ZSgpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9jYWxEYXRlLm5vdygpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBob2FEb24uc2V0TWFIRChtYUhEKTtcbiAgICAgICAgICAgIH1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9Mb2FpQ2hvLmphdmFcbnBhY2thZ2UgbW9kZWw7XG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLio7XG5pbXBvcnQgbG9tYm9rLkRhdGE7XG5pbXBvcnQgbG9tYm9rLkVxdWFsc0FuZEhhc2hDb2RlO1xuaW1wb3J0IGxvbWJvay5Ub1N0cmluZztcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuaW1wb3J0IGphdmEudXRpbC5TZXQ7XG5cbkBFbnRpdHlcbkBEYXRhXG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5AVGFibGUobmFtZSA9IFwibG9haWNob1wiKVxucHVibGljIGNsYXNzIExvYWlDaG8gaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuICAgIEBJZFxuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5JbmNsdWRlXG4gICAgQENvbHVtbihuYW1lID0gXCJtYV9sb2FpXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIlZBUkNIQVIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlLHVuaXF1ZSA9IHRydWUpXG4gICAgcHJpdmF0ZSBTdHJpbmcgbWFMb2FpO1xuICAgIEBDb2x1bW4obmFtZSA9IFwidGVuX2xvYWlcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiTlZBUkNIQVIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgU3RyaW5nIHRlbkxvYWk7XG5cblxuICAgIEBPbmVUb01hbnkobWFwcGVkQnkgPSBcImxvYWlDaG9cIilcbiAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgcHJpdmF0ZSBTZXQ8Q2hvTmdvaT4gY2hvX25nb2lzO1xufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9Ib2FEb25EQU8uamF2YVxuLi4uXG5cbi8qKlxuICogQEThu7Egw6FuOiBQaGFuVGFuSmF2YU5ob21HUFRcbiAqIEBJbnRlcmZhY2U6IEhvYURvbkRBT1xuICogQFThuqFvIHbDoG8gbmfDoHk6IDE4LzA0LzIwMjVcbiAqIEBUw6FjIGdp4bqjOiBOZ3V5ZW4gSHV1IFNhbmdcbiAqL1xucHVibGljIGludGVyZmFjZSBIb2FEb25EQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIC8vIENyZWF0ZTogVGjDqm0gaMOzYSDEkcahbiBt4bubaVxuICAgIGJvb2xlYW4gc2F2ZUhvYURvbihIb2FEb24gaG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gUmVhZDogTOG6pXkgZGFuaCBzw6FjaCBow7NhIMSRxqFuXG4gICAgTGlzdDxIb2FEb24+IGdldEFsbEhvYURvbnMoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gUmVhZDogVMOsbSBow7NhIMSRxqFuIHRoZW8gbcOjIGjDs2EgxJHGoW5cbiAgICBIb2FEb24gZ2V0SG9hRG9uQnlJZChTdHJpbmcgbWFIRCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIFVwZGF0ZTogQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gaMOzYSDEkcahblxuICAgIGJvb2xlYW4gdXBkYXRlSG9hRG9uKEhvYURvbiBob2FEb24pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBEZWxldGU6IFjDs2EgaMOzYSDEkcahbiB0aGVvIG3DoyBow7NhIMSRxqFuXG4gICAgYm9vbGVhbiBkZWxldGVIb2FEb24oU3RyaW5nIG1hSEQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBSZXRyaWV2ZSBpbnZvaWNlcyBieSBjdXN0b21lciBJRFxuICAgIExpc3Q8SG9hRG9uPiBnZXRCeUN1c3RvbWVySWQoU3RyaW5nIGN1c3RvbWVySWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBTdHJpbmcgZ2VuZXJhdGVNYUhvYURvbihMb2NhbERhdGUgbmdheSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMb2FpSG9hRG9uIGdldExvYWlIb2FEb25CeUlkKFN0cmluZyBtYUxvYWlIRCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIExpc3Q8SG9hRG9uPiB0aW1LaWVtSG9hRG9uKFN0cmluZyBtYUhvYURvbiwgU3RyaW5nIHNvRGllblRob2FpLCBTdHJpbmcgbWFOaGFuVmllbiwgICBMb2NhbERhdGUgdHVOZ2F5LCBMb2NhbERhdGUgZGVuTmdheSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIEhvYURvbiBnZXRIb2FEb25CeU1hKFN0cmluZyBtYUhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PEhvYURvbj4gZ2V0SG9hRG9uc0J5RGF0ZVJhbmdlKExvY2FsRGF0ZSBzdGFydERhdGUsIExvY2FsRGF0ZSBlbmREYXRlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8SG9hRG9uPiBnZXRIb2FEb25zQnlEYXRlUmFuZ2VBbmRTaGlmdChMb2NhbERhdGUgc3RhcnREYXRlLCBMb2NhbERhdGUgZW5kRGF0ZSwgaW50IGNhKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS90ZXN0Q1JVRC9DaGlUaWV0SG9hRG9uREFPVGVzdC5qYXZhXG4uLi5cbi8vICAgICAgICBDaGlUaWV0SG9hRG9uSWQgaWQgPSBuZXcgQ2hpVGlldEhvYURvbklkKCk7IC8vIE3DoyBow7NhIMSRxqFuIHbDoCBtw6MgdsOpIGdp4bqjIMSR4buLbmhcbi8vICAgICAgICBpZC5zZXRNYUhEKFwiSEQwMDFcIik7XG4vLyAgICAgICAgaWQuc2V0TWFWZShcIlZUMDAxXCIpO1xuLy8gICAgICAgIENoaVRpZXRIb2FEb24gY2hpVGlldEhvYURvbiA9IG5ldyBDaGlUaWV0SG9hRG9uKCk7Ly8gU+G7kSBsxrDhu6NuZyB2w6AgxJHGoW4gZ2nDoSBnaeG6oyDEkeG7i25oXG4vL1xuLy8gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0SWQoaWQpO1xuLy8gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0U29MdW9uZyg1KTtcbi8vICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFZBVCgwLjEpOyAvLyAxMCUgVkFUXG4vLyAgICAgICAgY2hpVGlldEhvYURvbi5zZXRUaWVuVGh1ZShjaGlUaWV0SG9hRG9uLmdldFNvTHVvbmcoKSAqIDEwMDAwMCAqIDAuMSk7XG4vLyAgICAgICAgY2hpVGlldEhvYURvbi5zZXRUaGFuaFRpZW4oKGNoaVRpZXRIb2FEb24uZ2V0U29MdW9uZygpICogMTAwMDAwKSArIGNoaVRpZXRIb2FEb24uZ2V0VGllblRodWUoKSk7XG4vLyAgICAgICAgYm9vbGVhbiBpc1NhdmVkID0gY2hpVGlldEhvYURvbkRBT0ltcGwuc2F2ZUNoaVRpZXRIb2FEb24oY2hpVGlldEhvYURvbik7XG4vLyAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiVGjDqm0gY2hpIHRp4bq/dCBow7NhIMSRxqFuOiBcIiArIChpc1NhdmVkID8gXCJUaMOgbmggY8O0bmdcIiA6IFwiVGjhuqV0IGLhuqFpXCIpKTtcbi8vXG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YVxuLi4uXG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCLEkMOjIHTDrG0gdGjhuqV5IEtoYWNoSGFuZzogXCIgKyBraGFjaEhhbmcuZ2V0TWFLaGFjaEhhbmcoKSk7XG5cbiAgICAgICAgICAgIC8vIDIuIFThuqFvIGjDs2EgxJHGoW4gbeG7m2lcbiAgICAgICAgICAgIEhvYURvbiBob2FEb24gPSBuZXcgSG9hRG9uKCk7XG4gICAgICAgICAgICBTdHJpbmcgbWFIRCA9IGdlbmVyYXRlTWFIRCgpO1xuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiR2VuZXJhdGVkIE1hSEQ6IFwiICsgbWFIRCk7XG4gICAgICAgICAgICBob2FEby4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjcwNDkyMjY1LTA0ZTAtNDM3My1hZjkyLTNlNzA5ZGQ0NDVmMzt0b29sdV92cnR4XzAxUzJ2RlFvVWltNDY4U0tLQWRnTjNBUyI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9DaGlUaWV0SG9hRG9uREFPLmphdmFcbnBhY2thZ2UgZGFvO1xuXG5pbXBvcnQgbW9kZWwuQ2hpVGlldEhvYURvbjtcbmltcG9ydCBtb2RlbC5DaGlUaWV0SG9hRG9uSWQ7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGU7XG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuXG5wdWJsaWMgaW50ZXJmYWNlIENoaVRpZXRIb2FEb25EQU8gZXh0ZW5kcyBSZW1vdGUge1xuXG4gICAgIC8vIFJlYWQ6IEzhuqV5IHThuqV0IGPhuqMgY2hpIHRp4bq/dCBow7NhIMSRxqFuXG4gICAgIHB1YmxpYyBMaXN0PENoaVRpZXRIb2FEb24+IGdldEFsbExpc3QoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgIC8vIFJlYWQ6IFTDrG0gY2hpIHRp4bq/dCBow7NhIMSRxqFuIHRoZW8gSURcbiAgICAgcHVibGljIENoaVRpZXRIb2FEb24gZ2V0QnlJZChDaGlUaWV0SG9hRG9uSWQgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAgLy8gQ3JlYXRlOiBUaMOqbSBjaGkgdGnhur90IGjDs2EgxJHGoW5cbiAgICAgcHVibGljIGJvb2xlYW4gc2F2ZShDaGlUaWV0SG9hRG9uIGNoaVRpZXRIb2FEb24pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAgLy8gVXBkYXRlOiBD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbiBjaGkgdGnhur90IGjDs2EgxJHGoW5cbiAgICAgcHVibGljIGJvb2xlYW4gdXBkYXRlKENoaVRpZXRIb2FEb24gY2hpVGlldEhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgICAvLyBEZWxldGU6IFjDs2EgY2hpIHRp4bq/dCBow7NhIMSRxqFuIHRoZW8gSURcbiAgICAgcHVibGljIGJvb2xlYW4gZGVsZXRlKENoaVRpZXRIb2FEb25JZCBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgICAvLyBM4bqleSBkYW5oIHPDoWNoIGNoaSB0aeG6v3QgaMOzYSDEkcahbiB0aGVvIG3DoyBow7NhIMSRxqFuXG4gICAgIHB1YmxpYyBMaXN0PENoaVRpZXRIb2FEb24+IGdldEJ5SG9hRG9uSWQoU3RyaW5nIGhvYURvbklkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgIC8vIEzhuqV5IGRhbmggc8OhY2ggY2hpIHRp4bq/dCBow7NhIMSRxqFuIHRoZW8gbcOjIHbDqVxuICAgICBwdWJsaWMgTGlzdDxDaGlUaWV0SG9hRG9uPiBnZXRCeVZlVGF1SWQoU3RyaW5nIHZlVGF1SWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59Li4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9Ib2FEb25EQU8uamF2YVxuLi4uXG5cbi8qKlxuICogQEThu7Egw6FuOiBQaGFuVGFuSmF2YU5ob21HUFRcbiAqIEBJbnRlcmZhY2U6IEhvYURvbkRBT1xuICogQFThuqFvIHbDoG8gbmfDoHk6IDE4LzA0LzIwMjVcbiAqIEBUw6FjIGdp4bqjOiBOZ3V5ZW4gSHV1IFNhbmdcbiAqL1xucHVibGljIGludGVyZmFjZSBIb2FEb25EQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIC8vIENyZWF0ZTogVGjDqm0gaMOzYSDEkcahbiBt4bubaVxuICAgIGJvb2xlYW4gc2F2ZUhvYURvbihIb2FEb24gaG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gUmVhZDogTOG6pXkgZGFuaCBzw6FjaCBow7NhIMSRxqFuXG4gICAgTGlzdDxIb2FEb24+IGdldEFsbEhvYURvbnMoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gUmVhZDogVMOsbSBow7NhIMSRxqFuIHRoZW8gbcOjIGjDs2EgxJHGoW5cbiAgICBIb2FEb24gZ2V0SG9hRG9uQnlJZChTdHJpbmcgbWFIRCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIFVwZGF0ZTogQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gaMOzYSDEkcahblxuICAgIGJvb2xlYW4gdXBkYXRlSG9hRG9uKEhvYURvbiBob2FEb24pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBEZWxldGU6IFjDs2EgaMOzYSDEkcahbiB0aGVvIG3DoyBow7NhIMSRxqFuXG4gICAgYm9vbGVhbiBkZWxldGVIb2FEb24oU3RyaW5nIG1hSEQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBSZXRyaWV2ZSBpbnZvaWNlcyBieSBjdXN0b21lciBJRFxuICAgIExpc3Q8SG9hRG9uPiBnZXRCeUN1c3RvbWVySWQoU3RyaW5nIGN1c3RvbWVySWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBTdHJpbmcgZ2VuZXJhdGVNYUhvYURvbihMb2NhbERhdGUgbmdheSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMb2FpSG9hRG9uIGdldExvYWlIb2FEb25CeUlkKFN0cmluZyBtYUxvYWlIRCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIExpc3Q8SG9hRG9uPiB0aW1LaWVtSG9hRG9uKFN0cmluZyBtYUhvYURvbiwgU3RyaW5nIHNvRGllblRob2FpLCBTdHJpbmcgbWFOaGFuVmllbiwgICBMb2NhbERhdGUgdHVOZ2F5LCBMb2NhbERhdGUgZGVuTmdheSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIEhvYURvbiBnZXRIb2FEb25CeU1hKFN0cmluZyBtYUhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PEhvYURvbj4gZ2V0SG9hRG9uc0J5RGF0ZVJhbmdlKExvY2FsRGF0ZSBzdGFydERhdGUsIExvY2FsRGF0ZSBlbmREYXRlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8SG9hRG9uPiBnZXRIb2FEb25zQnlEYXRlUmFuZ2VBbmRTaGlmdChMb2NhbERhdGUgc3RhcnREYXRlLCBMb2NhbERhdGUgZW5kRGF0ZSwgaW50IGNhKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9DaGlUaWV0SG9hRG9uREFPSW1wbC5qYXZhXG5wYWNrYWdlIGRhby5pbXBsO1xuXG5pbXBvcnQgZGFvLkNoaVRpZXRIb2FEb25EQU87XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlNYW5hZ2VyO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW50aXR5VHJhbnNhY3Rpb247XG5pbXBvcnQgbW9kZWwuQ2hpVGlldEhvYURvbjtcbmltcG9ydCBtb2RlbC5DaGlUaWV0SG9hRG9uSWQ7XG5pbXBvcnQgdXRpbC5KUEFVdGlsO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEucm1pLnNlcnZlci5VbmljYXN0UmVtb3RlT2JqZWN0O1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuXG5wdWJsaWMgY2xhc3MgQ2hpVGlldEhvYURvbkRBT0ltcGwgZXh0ZW5kcyBVbmljYXN0UmVtb3RlT2JqZWN0IGltcGxlbWVudHMgQ2hpVGlldEhvYURvbkRBTyB7XG5cbiAgICBwdWJsaWMgQ2hpVGlldEhvYURvbkRBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgLy8gQ29uc3RydWN0b3IgcGjhuqNpIGPDsyB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIGtoaSBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3RcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxDaGlUaWV0SG9hRG9uPiBnZXRBbGxMaXN0KCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICBMaXN0PENoaVRpZXRIb2FEb24+IGxpc3QgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcbiAgICAgICAgICAgIGxpc3QgPSBlbS5jcmVhdGVRdWVyeShcIlNFTEVDVCBjIEZST00gQ2hpVGlldEhvYURvbiBjXCIsIENoaVRpZXRIb2FEb24uY2xhc3MpLmdldFJlc3VsdExpc3QoKTtcbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIENoaVRpZXRIb2FEb25cIik7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gc2F2ZShDaGlUaWV0SG9hRG9uIGNoaVRpZXRIb2FEb24pIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHRyID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRyLmJlZ2luKCk7XG4gICAgICAgICAgICBlbS5wZXJzaXN0KGNoaVRpZXRIb2FEb24pO1xuICAgICAgICAgICAgdHIuY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0ci5yb2xsYmFjaygpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiB1cGRhdGUoQ2hpVGlldEhvYURvbiBjaGlUaWV0SG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0ciA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0ci5iZWdpbigpO1xuICAgICAgICAgICAgZW0ubWVyZ2UoY2hpVGlldEhvYURvbik7XG4gICAgICAgICAgICB0ci5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRyLnJvbGxiYWNrKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8Q2hpVGlldEhvYURvbj4gZ2V0QnlIb2FEb25JZChTdHJpbmcgaG9hRG9uSWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgTGlzdDxDaGlUaWV0SG9hRG9uPiBsaXN0ID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG4gICAgICAgICAgICBTdHJpbmcgcXVlcnkgPSBcIlNFTEVDVCBjIEZST00gQ2hpVGlldEhvYURvbiBjIFdIRVJFIGMuaWQubWFIRCA9IDpob2FEb25JZFwiO1xuICAgICAgICAgICAgbGlzdCA9IGVtLmNyZWF0ZVF1ZXJ5KHF1ZXJ5LCBDaGlUaWV0SG9hRG9uLmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwiaG9hRG9uSWRcIiwgaG9hRG9uSWQpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRSZXN1bHRMaXN0KCk7XG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggY2hpIHRp4bq/dCBow7NhIMSRxqFuIHRoZW8gbcOjIGjDs2EgxJHGoW46IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxDaGlUaWV0SG9hRG9uPiBnZXRCeVZlVGF1SWQoU3RyaW5nIHZlVGF1SWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgTGlzdDxDaGlUaWV0SG9hRG9uPiBsaXN0ID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG4gICAgICAgICAgICBTdHJpbmcgcXVlcnkgPSBcIlNFTEVDVCBjIEZST00gQ2hpVGlldEhvYURvbiBjIFdIRVJFIGMuaWQubWFWZSA9IDp2ZVRhdUlkXCI7XG4gICAgICAgICAgICBsaXN0ID0gZW0uY3JlYXRlUXVlcnkocXVlcnksIENoaVRpZXRIb2FEb24uY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ2ZVRhdUlkXCIsIHZlVGF1SWQpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRSZXN1bHRMaXN0KCk7XG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggY2hpIHRp4bq/dCBow7NhIMSRxqFuIHRoZW8gbcOjIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvSG9hRG9uREFPSW1wbC5qYXZhXG4uLi5cblxuICAgIEBPdmVycmlkZVxuICAgIC8vIENyZWF0ZTogVGjDqm0gaMOzYSDEkcahbiBt4bubaVxuICAgIHB1YmxpYyBib29sZWFuIHNhdmVIb2FEb24oSG9hRG9uIGhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHIgPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHIuYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB4ZW0gbcOjIGjDs2EgxJHGoW4gxJHDoyDEkcaw4bujYyB0aGnhur90IGzhuq1wIGNoxrBhXG4gICAgICAgICAgICBpZiAoaG9hRG9uLmdldE1hSEQoKSA9PSBudWxsIHx8IGhvYURvbi5nZXRNYUhEKCkuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgLy8gTuG6v3UgY2jGsGEgY8OzIG3DoyBow7NhIMSRxqFuLCB04buxIMSR4buZbmcgc2luaCBtw6NcbiAgICAgICAgICAgICAgICBTdHJpbmcgbWFIRCA9IGdlbmVyYXRlTWFIb2FEb24oXG4gICAgICAgICAgICAgICAgICAgICAgICBob2FEb24uZ2V0TmdheUxhcCgpICE9IG51bGwgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2FEb24uZ2V0TmdheUxhcCgpLnRvTG9jYWxEYXRlKCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2NhbERhdGUubm93KClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGhvYURvbi5zZXRNYUhEKG1hSEQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIGPDoWMgxJHhu5FpIHTGsOG7o25nIGxpw6puIHF1YW5cbiAgICAgICAgICAgIGlmIChob2FEb24uZ2V0TG9haUhvYURvbigpICE9IG51bGwgJiYgaG9hRG9uLmdldExvYWlIb2FEb24oKS5nZXRNYUxvYWlIb2FEb24oKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gTOG6pXkgbG/huqFpIGjDs2EgxJHGoW4gdOG7qyBkYXRhYmFzZSDEkeG7gyDEkeG6o20gYuG6o28gbGnDqm4ga+G6v3QgxJHDum5nXG4gICAgICAgICAgICAgICAgTG9haUhvYURvbiBsb2FpSEQgPSBnZXRMb2FpSG9hRG9uQnlJZChob2FEb24uZ2V0TG9haUhvYURvbigpLmdldE1hTG9haUhvYURvbigpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9haUhEICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9hRG9uLnNldExvYWlIb2FEb24obG9haUhEKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiS2jDtG5nIHTDrG0gdGjhuqV5IGxv4bqhaSBow7NhIMSRxqFuIHbhu5tpIG3DozogXCIgKyBob2FEb24uZ2V0TG9haUhvYURvbigpLmdldE1hTG9haUhvYURvbigpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEzGsHUgaMOzYSDEkcahbiB2w6BvIGRhdGFiYXNlXG4gICAgICAgICAgICBlbS5wZXJzaXN0KGhvYURvbik7XG4gICAgICAgICAgICB0ci5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZXgpIHtcbiAgICAgICAgICAgIGlmICh0ci5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHIucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4LnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBsxrB1IGjDs2EgxJHGoW46IFwiICsgZXguZ2V0TWVzc2FnZSgpLCBleCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4uLi5cblxuXG4gICAgLy8gUmV0cmlldmUgaW52b2ljZXMgYnkgY3VzdG9tZXIgSURcbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxIb2FEb24+IGdldEJ5Q3VzdG9tZXJJZChTdHJpbmcgY3VzdG9tZXJJZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgU3RyaW5nIHF1ZXJ5ID0gXCJTRUxFQ1QgaCBGUk9NIEhvYURvbiBoIFdIRVJFIGgua2hhY2hIYW5nLm1hS2hhY2hIYW5nID0gOmN1c3RvbWVySWRcIjtcbiAgICAgICAgcmV0dXJuIGVtLmNyZWF0ZVF1ZXJ5KHF1ZXJ5LCBIb2FEb24uY2xhc3MpXG4gICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcImN1c3RvbWVySWRcIiwgY3VzdG9tZXJJZClcbiAgICAgICAgICAgICAgICAuZ2V0UmVzdWx0TGlzdCgpO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBTdHJpbmcgZ2VuZXJhdGVNYUhvYURvbihMb2NhbERhdGUgbmdheSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHIgPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0ci5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyDEkOG7i25oIGThuqFuZyBwaOG6p24gbmfDoHkgdGjDoW5nIGPhu6dhIG3DoyBow7NhIMSRxqFuIGtow7RuZyBjw7MgZOG6pXUgXCIvXCJcbiAgICAgICAgICAgIERhdGVUaW1lRm9ybWF0dGVyIGZvcm1hdHRlciA9IERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybihcInl5eXlNTWRkXCIpO1xuICAgICAgICAgICAgU3RyaW5nIGRhdGVQcmVmaXggPSBcIkhEXCIgKyBmb3JtYXR0ZXIuZm9ybWF0KG5nYXkpO1xuXG4gICAgICAgICAgICAvLyBRdWVyeSDEkeG7gyB0w6xtIG3DoyBow7NhIMSRxqFuIGzhu5tuIG5o4bqldCB0cm9uZyBuZ8OgeVxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCBoLm1hSEQgRlJPTSBIb2FEb24gaCBXSEVSRSBoLm1hSEQgTElLRSA6cHJlZml4IE9SREVSIEJZIGgubWFIRCBERVNDXCI7XG4gICAgICAgICAgICBRdWVyeSBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJwcmVmaXhcIiwgZGF0ZVByZWZpeCArIFwiJVwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0TWF4UmVzdWx0cygxKTtcblxuICAgICAgICAgICAgTGlzdDw/PiByZXN1bHRzID0gcXVlcnkuZ2V0UmVzdWx0TGlzdCgpO1xuXG4gICAgICAgICAgICAvLyBYw6FjIMSR4buLbmggc+G7kSB0aOG7qSB04buxIHRp4bq/cCB0aGVvXG4gICAgICAgICAgICBpbnQgbmV4dE51bWJlciA9IDE7XG5cbiAgICAgICAgICAgIGlmICghcmVzdWx0cy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBTdHJpbmcgbGFzdENvZGUgPSAoU3RyaW5nKSByZXN1bHRzLmdldCgwKTtcbiAgICAgICAgICAgICAgICAvLyBUcsOtY2ggeHXhuqV0IHPhu5EgdGjhu6kgdOG7sSB04burIG3DoyBow7NhIMSRxqFuIGN14buRaSBjw7luZ1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvcm1hdDogSER5eXl5TU1kZFhYWFhcbiAgICAgICAgICAgICAgICAgICAgLy8gTOG6pXkgNCBrw70gdOG7sSBjdeG7kWkgY8O5bmcgY+G7p2EgbcOjIGjDs2EgxJHGoW5cbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIG51bWJlclN0ciA9IGxhc3RDb2RlLnN1YnN0cmluZyhsYXN0Q29kZS5sZW5ndGgoKSAtIDQpO1xuICAgICAgICAgICAgICAgICAgICBuZXh0TnVtYmVyID0gSW50ZWdlci5wYXJzZUludChudW1iZXJTdHIpICsgMTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBO4bq/dSBjw7MgbOG7l2kga2hpIHBhcnNlLCBt4bq3YyDEkeG7i25oIGzDoCAxXG4gICAgICAgICAgICAgICAgICAgIG5leHROdW1iZXIgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHIuY29tbWl0KCk7XG5cbiAgICAgICAgICAgIC8vIFThuqFvIG3DoyBow7NhIMSRxqFuIG3hu5tpIHbhu5tpIMSR4buLbmggZOG6oW5nIEhEeXl5eU1NZGRYWFhYXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZvcm1hdChcIiVzJTA0ZFwiLCBkYXRlUHJlZml4LCBuZXh0TnVtYmVyKTtcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIEhvYURvbiBnZXRIb2FEb25CeU1hKFN0cmluZyBtYUhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCBoIEZST00gSG9hRG9uIGggXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggaC5raGFjaEhhbmcgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggaC5udiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCBoLmxvYWlIb2FEb24gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBoLmNoaVRpZXRIb2FEb25zIGN0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggY3QudmVUYXUgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGgubWFIRCA9IDptYUhvYURvblwiO1xuXG4gICAgICAgICAgICByZXR1cm4gZW0uY3JlYXRlUXVlcnkoanBxbCwgSG9hRG9uLmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFIb2FEb25cIiwgbWFIb2FEb24pXG4gICAgICAgICAgICAgICAgICAgIC5nZXRTaW5nbGVSZXN1bHQoKTtcblxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgbOG6pXkgdGjDtG5nIHRpbiBow7NhIMSRxqFuOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS90ZXN0Q1JVRC9DaGlUaWV0SG9hRG9uREFPVGVzdC5qYXZhXG4uLi5cbi8vICAgICAgICBDaGlUaWV0SG9hRG9uSWQgaWQgPSBuZXcgQ2hpVGlldEhvYURvbklkKCk7IC8vIE3DoyBow7NhIMSRxqFuIHbDoCBtw6MgdsOpIGdp4bqjIMSR4buLbmhcbi8vICAgICAgICBpZC5zZXRNYUhEKFwiSEQwMDFcIik7XG4vLyAgICAgICAgaWQuc2V0TWFWZShcIlZUMDAxXCIpO1xuLy8gICAgICAgIENoaVRpZXRIb2FEb24gY2hpVGlldEhvYURvbiA9IG5ldyBDaGlUaWV0SG9hRG9uKCk7Ly8gU+G7kSBsxrDhu6NuZyB2w6AgxJHGoW4gZ2nDoSBnaeG6oyDEkeG7i25oXG4vL1xuLy8gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0SWQoaWQpO1xuLy8gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0U29MdW9uZyg1KTtcbi8vICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFZBVCgwLjEpOyAvLyAxMCUgVkFUXG4vLyAgICAgICAgY2hpVGlldEhvYURvbi5zZXRUaWVuVGh1ZShjaGlUaWV0SG9hRG9uLmdldFNvTHVvbmcoKSAqIDEwMDAwMCAqIDAuMSk7XG4vLyAgICAgICAgY2hpVGlldEhvYURvbi5zZXRUaGFuaFRpZW4oKGNoaVRpZXRIb2FEb24uZ2V0U29MdW9uZygpICogMTAwMDAwKSArIGNoaVRpZXRIb2FEb24uZ2V0VGllblRodWUoKSk7XG4vLyAgICAgICAgYm9vbGVhbiBpc1NhdmVkID0gY2hpVGlldEhvYURvbkRBT0ltcGwuc2F2ZUNoaVRpZXRIb2FEb24oY2hpVGlldEhvYURvbik7XG4vLyAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiVGjDqm0gY2hpIHRp4bq/dCBow7NhIMSRxqFuOiBcIiArIChpc1NhdmVkID8gXCJUaMOgbmggY8O0bmdcIiA6IFwiVGjhuqV0IGLhuqFpXCIpKTtcbi8vXG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0RvaVZlREFPLmphdmFcbi4uLlxuXG5wdWJsaWMgaW50ZXJmYWNlIERvaVZlREFPIGV4dGVuZHMgUmVtb3RlIHtcbiAgICBWZVRhdSBnZXRWZVRhdShTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBkb2lWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFZlVGF1PiBnZXRWZVRhdUJ5VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHRlc3RDb25uZWN0aW9uKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFRyYW5nVGhhaVZlVGF1PiBnZXRBbGxUcmFuZ1RoYWlWZSgpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBUaMOqbSBjaOG7qWMgbsSDbmcgbeG7m2lcbiAgICBib29sZWFuIGRhdFZlKFZlVGF1IHZlVGF1LCBTdHJpbmcgY2hvTmdvaUlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gaHV5VmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB0aGFuaFRvYW5WZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGNhcE5oYXRUcmFuZ1RoYWlWZShTdHJpbmcgbWFWZSwgVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIEtoYWNoSGFuZyBnZXRLaGFjaEhhbmdCeU1hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59Li4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL0NoaVRpZXRIb2FEb24uamF2YVxucGFja2FnZSBtb2RlbDtcblxuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuKjtcbmltcG9ydCBsb21ib2suRGF0YTtcbmltcG9ydCBsb21ib2suVG9TdHJpbmc7XG5cbmltcG9ydCBqYXZhLmlvLlNlcmlhbGl6YWJsZTtcblxuQERhdGFcbkBFbnRpdHlcbkBUYWJsZShuYW1lID0gXCJjaGl0aWV0X2hvYWRvblwiKVxucHVibGljIGNsYXNzIENoaVRpZXRIb2FEb24gaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuXG4gICAgQEVtYmVkZGVkSWRcbiAgICBwcml2YXRlIENoaVRpZXRIb2FEb25JZCBpZDtcblxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgQE1hbnlUb09uZShmZXRjaCA9IEZldGNoVHlwZS5MQVpZKVxuICAgIEBNYXBzSWQoXCJtYUhEXCIpICAvLyBNYXBzIG1hSEQgaW4gdGhlIGNvbXBvc2l0ZSBrZXlcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJtYV9oZFwiLCByZWZlcmVuY2VkQ29sdW1uTmFtZSA9IFwibWFfaGRcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIEhvYURvbiBob2FEb247XG5cbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIEBNYW55VG9PbmUoZmV0Y2ggPSBGZXRjaFR5cGUuTEFaWSlcbiAgICBATWFwc0lkKFwibWFWZVwiKSAgLy8gTWFwcyBtYVZlIGluIHRoZSBjb21wb3NpdGUga2V5XG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfdmVcIiwgcmVmZXJlbmNlZENvbHVtbk5hbWUgPSBcIm1hX3ZlXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBWZVRhdSB2ZVRhdTtcblxuICAgIEBDb2x1bW4obmFtZSA9IFwic29fbHVvbmdcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGludCBzb0x1b25nO1xuXG4gICAgQENvbHVtbihuYW1lID0gXCJWQVRcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGRvdWJsZSBWQVQ7XG5cbiAgICBAQ29sdW1uKG5hbWUgPSBcInRoYW5oX3RpZW5cIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGRvdWJsZSB0aGFuaFRpZW47XG5cbiAgICBAQ29sdW1uKG5hbWUgPSBcInRpZW5fdGh1ZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgZG91YmxlIHRpZW5UaHVlO1xuXG5cbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9Ib2FEb24uamF2YVxucGFja2FnZSBtb2RlbDtcblxuXG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS4qO1xuaW1wb3J0IGxvbWJvay5EYXRhO1xuaW1wb3J0IGxvbWJvay5FcXVhbHNBbmRIYXNoQ29kZTtcbmltcG9ydCBsb21ib2suVG9TdHJpbmc7XG5cbmltcG9ydCBqYXZhLmlvLlNlcmlhbGl6YWJsZTtcbmltcG9ydCBqYXZhLnRpbWUuTG9jYWxEYXRlO1xuaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGVUaW1lO1xuaW1wb3J0IGphdmEudXRpbC5PYmplY3RzO1xuaW1wb3J0IGphdmEudXRpbC5TZXQ7XG5cbkBEYXRhXG5ARW50aXR5XG5AVGFibGUobmFtZSA9IFwiaG9hZG9uXCIpXG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5wdWJsaWMgY2xhc3MgSG9hRG9uIGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBASWRcbiAgICBAQ29sdW1uKG5hbWUgPSBcIm1hX2hkXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcInZhcmNoYXIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlLCB1bmlxdWUgPSB0cnVlKVxuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5JbmNsdWRlXG4gICAgcHJpdmF0ZSBTdHJpbmcgbWFIRDtcblxuICAgIEBDb2x1bW4obmFtZSA9IFwibmdheV9sYXBcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiZGF0ZXRpbWVcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIExvY2FsRGF0ZVRpbWUgbmdheUxhcDtcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRpZW5fZ2lhbVwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJkb3VibGVcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGRvdWJsZSB0aWVuR2lhbTtcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRvbmdfdGllblwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJkb3VibGVcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIGRvdWJsZSB0b25nVGllbjtcblxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgQE1hbnlUb09uZShmZXRjaCA9IEZldGNoVHlwZS5MQVpZKVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX2toYWNoX2hhbmdcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIEtoYWNoSGFuZyBraGFjaEhhbmc7XG5cbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIEBNYW55VG9PbmUoZmV0Y2ggPSBGZXRjaFR5cGUuTEFaWSlcbiAgICBASm9pbkNvbHVtbihuYW1lID0gXCJtYV9uaGFuX3ZpZW5cIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIE5oYW5WaWVuIG52O1xuXG4gICAgQFRvU3RyaW5nLkV4Y2x1ZGVcbiAgICBATWFueVRvT25lKGZldGNoID0gRmV0Y2hUeXBlLkxBWlkpXG4gICAgQEpvaW5Db2x1bW4obmFtZSA9IFwibWFfbG9haV9oZFwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgTG9haUhvYURvbiBsb2FpSG9hRG9uO1xuXG4vLyAgICBATWFueVRvTWFueVxuLy8gICAgQEpvaW5UYWJsZShuYW1lID0gXCJjaGl0aWV0X2hvYWRvblwiLFxuLy8gICAgICAgICAgICBqb2luQ29sdW1ucyA9IEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX2hkXCIpLFxuLy8gICAgICAgICAgICBpbnZlcnNlSm9pbkNvbHVtbnMgPSBASm9pbkNvbHVtbihuYW1lID0gXCJtYV92ZVwiKSlcbi8vICAgIHByaXZhdGUgU2V0PFZlVGF1PiB2ZVRhdXM7XG5cbiAgICBAT25lVG9NYW55KG1hcHBlZEJ5ID0gXCJob2FEb25cIilcbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIHByaXZhdGUgU2V0PENoaVRpZXRIb2FEb24+IGNoaVRpZXRIb2FEb25zO1xufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL21vZGVsL0xvYWlIb2FEb24uamF2YVxucGFja2FnZSBtb2RlbDtcblxuXG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS4qO1xuaW1wb3J0IGxvbWJvay5EYXRhO1xuaW1wb3J0IGxvbWJvay5FcXVhbHNBbmRIYXNoQ29kZTtcbmltcG9ydCBsb21ib2suVG9TdHJpbmc7XG5cbmltcG9ydCBqYXZhLmlvLlNlcmlhbGl6YWJsZTtcbmltcG9ydCBqYXZhLnV0aWwuU2V0O1xuXG5ARGF0YVxuQEVxdWFsc0FuZEhhc2hDb2RlKG9ubHlFeHBsaWNpdGx5SW5jbHVkZWQgPSB0cnVlKVxuQEVudGl0eVxuQFRhYmxlKG5hbWUgPSBcImxvYWlob2Fkb25cIilcbkBUb1N0cmluZ1xucHVibGljIGNsYXNzIExvYWlIb2FEb24gaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuICAgIEBJZFxuICAgIEBDb2x1bW4obmFtZSA9IFwibWFfbG9haV9oZFwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJ2YXJjaGFyKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSwgdW5pcXVlID0gdHJ1ZSlcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuSW5jbHVkZVxuICAgIHByaXZhdGUgU3RyaW5nIG1hTG9haUhvYURvbjtcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRlbl9sb2FpX2hkXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIk5WQVJDSEFSKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIFN0cmluZyB0ZW5Mb2FpSG9hRG9uO1xuXG4gICAgQE9uZVRvTWFueShtYXBwZWRCeSA9IFwibG9haUhvYURvblwiKVxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgcHJpdmF0ZSBTZXQ8SG9hRG9uPiBob2FEb25zO1xuXG5cblxuXG59XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvbW9kZWwvQ2hpVGlldEhvYURvbklkLmphdmFcbnBhY2thZ2UgbW9kZWw7XG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVtYmVkZGFibGU7XG5pbXBvcnQgbG9tYm9rLkRhdGE7XG5pbXBvcnQgbG9tYm9rLkVxdWFsc0FuZEhhc2hDb2RlO1xuXG5pbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG5pbXBvcnQgamF2YS51dGlsLk9iamVjdHM7XG5ARGF0YVxuQEVtYmVkZGFibGVcbkBFcXVhbHNBbmRIYXNoQ29kZShvbmx5RXhwbGljaXRseUluY2x1ZGVkID0gdHJ1ZSlcbnB1YmxpYyBjbGFzcyBDaGlUaWV0SG9hRG9uSWQgaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuICAgIEBFcXVhbHNBbmRIYXNoQ29kZS5JbmNsdWRlXG4gICAgcHJpdmF0ZSBTdHJpbmcgbWFIRDtcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuSW5jbHVkZVxuICAgIHByaXZhdGUgU3RyaW5nIG1hVmU7XG5cbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9DaG9OZ29pLmphdmFcbnBhY2thZ2UgbW9kZWw7XG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLio7XG5pbXBvcnQgbG9tYm9rLkRhdGE7XG5pbXBvcnQgbG9tYm9rLkVxdWFsc0FuZEhhc2hDb2RlO1xuaW1wb3J0IGxvbWJvay5Ub1N0cmluZztcblxuaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuXG5ARW50aXR5XG5ARGF0YVxuQEVxdWFsc0FuZEhhc2hDb2RlKG9ubHlFeHBsaWNpdGx5SW5jbHVkZWQgPSB0cnVlKVxuQFRhYmxlKG5hbWUgPSBcImNob19uZ29pXCIpXG5wdWJsaWMgY2xhc3MgQ2hvTmdvaSBpbXBsZW1lbnRzIFNlcmlhbGl6YWJsZSB7XG4gICAgQElkXG4gICAgQEVxdWFsc0FuZEhhc2hDb2RlLkluY2x1ZGVcbiAgICBAQ29sdW1uKG5hbWUgPSBcIm1hX2Nob1wiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJWQVJDSEFSKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSwgdW5pcXVlID0gdHJ1ZSlcbiAgICBwcml2YXRlIFN0cmluZyBtYUNobztcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRlbl9jaG9cIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiTlZBUkNIQVIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgU3RyaW5nIHRlbkNobztcbiAgICBAQ29sdW1uKG5hbWUgPSBcInRpbmhfdHJhbmdcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiQklUXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBib29sZWFuIHRpbmhUcmFuZztcbiAgICBAQ29sdW1uKG5hbWUgPSBcImdpYV90aWVuXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcIkZMT0FUXCIsIG51bGxhYmxlID0gZmFsc2UpXG4gICAgcHJpdmF0ZSBkb3VibGUgZ2lhVGllbjtcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9LaGFjaEhhbmcuamF2YVxuLi4uXG4gICAgQENvbHVtbihuYW1lID0gXCJkaWVtX3RpY2hfbHV5XCIsIGNvbHVtbkRlZmluaXRpb24gPSBcImRvdWJsZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgZG91YmxlIGRpZW1UaWNoTHV5O1xuICAgIEBDb2x1bW4obmFtZSA9IFwibmdheV9zaW5oXCIsIGNvbHVtbkRlZmluaXRpb24gPSBcImRhdGVcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIExvY2FsRGF0ZSBuZ2F5U2luaDtcbiAgICBAQ29sdW1uKG5hbWUgPSBcIm5nYXlfdGhhbV9naWFcIiwgY29sdW1uRGVmaW5pdGlvbiA9IFwiZGF0ZVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIHByaXZhdGUgTG9jYWxEYXRlIG5nYXlUaGFtZ0dpYTtcbiAgICBAQ29sdW1uKG5hbWUgPSBcImhhbmdfdGhhbmhfdmllblwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJ2YXJjaGFyKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBwcml2YXRlIFN0cmluZyBoYW5nVGhhbmhWaWVuO1xuXG4gICAgQE1hbnlUb09uZVxuICAgIEBKb2luQ29sdW1uKG5hbWUgPSBcIm1hX2xvYWlfa2hhY2hfaGFuZ1wiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIEBUb1N0cmluZy5FeGNsdWRlXG4gICAgcHJpdmF0ZSBMb2FpS2hhY2hIYW5nIGxvYWlLaGFjaEhhbmc7XG5cbiAgICBAVG9TdHJpbmcuRXhjbHVkZVxuICAgIEBPbmVUb01hbnkobWFwcGVkQnkgPSBcImtoYWNoSGFuZ1wiKVxuICAgIHByaXZhdGUgU2V0PEhvYURvbj4gaG9hRG9ucztcbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9tb2RlbC9UYXUuamF2YVxuLi4uXG5cbkBEYXRhXG5ARW50aXR5XG5ARXF1YWxzQW5kSGFzaENvZGUob25seUV4cGxpY2l0bHlJbmNsdWRlZCA9IHRydWUpXG5AVGFibGUobmFtZSA9IFwidGF1XCIpXG5wdWJsaWMgY2xhc3MgVGF1IGltcGxlbWVudHMgU2VyaWFsaXphYmxlIHtcbiAgICBASWRcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuSW5jbHVkZVxuICAgIEBDb2x1bW4obmFtZSA9IFwibWFfdGF1XCIsIGNvbHVtbkRlZmluaXRpb24gPSBcInZhcmNoYXIoMjU1KVwiLCBudWxsYWJsZSA9IGZhbHNlLCB1bmlxdWUgPSB0cnVlKVxuICAgIHByaXZhdGUgU3RyaW5nIG1hVGF1OyAvLyBNw6MgdMOgdVxuICAgIEBDb2x1bW4obmFtZSA9IFwidGVuX3RhdVwiLCBjb2x1bW5EZWZpbml0aW9uID0gXCJ2YXJjaGFyKDI1NSlcIiwgbnVsbGFibGUgPSBmYWxzZSlcbiAgICBARXF1YWxzQW5kSGFzaENvZGUuRXhjbHVkZVxuICAgIHByaXZhdGUgU3RyaW5nIHRlblRhdTtcbiAgICBAQ29sdW1uKG5hbWUgPSBcInNvX3RvYVwiLCBudWxsYWJsZSA9IGZhbHNlKVxuICAgIEBFcS4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjhkYTQ3ZGEyLTRkYjItNDJmZi1iNWExLTNkMDJiNzVlOTYyMzt0b29sdV92cnR4XzAxOTEzckhDQUtzOWhIb25VZFFpOHRYQiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmFcbi4uLlxuXG4gICAgICAgICAgICBSZWdpc3RyeSByZWdpc3RyeSA9IExvY2F0ZVJlZ2lzdHJ5LmdldFJlZ2lzdHJ5KFJNSV9TRVJWRVJfSVAsIFJNSV9TRVJWRVJfUE9SVCk7XG4gICAgICAgICAgICBkb2lWZURBTyA9IChEb2lWZURBTykgcmVnaXN0cnkubG9va3VwKFwiZG9pVmVEQU9cIik7XG4gICAgICAgICAgICBsaWNoVHJpbmhUYXVEQU8gPSAoTGljaFRyaW5oVGF1REFPKSByZWdpc3RyeS5sb29rdXAoXCJsaWNoVHJpbmhUYXVEQU9cIik7XG4vLyAgICAgICAgICAgIGtodXllbk1haURBTyA9IChLaHV5ZW5NYWlEQU8pIHJlZ2lzdHJ5Lmxvb2t1cChcImtodXllbk1haURBT1wiKTtcbiAgICAgICAgICAgIHRvYVRhdURBTyA9IChUb2FUYXVEb2lWZURBTykgcmVnaXN0cnkubG9va3VwKFwidG9hVGF1RG9pVmVEQU9cIik7XG4gICAgICAgICAgICBjaG9OZ29pREFPID0gKENob05nb2lEb2lWZURBTykgcmVnaXN0cnkubG9va3VwKFwiY2hvTmdvaURvaVZlREFPXCIpO1xuICAgICAgICAgICAgbG9haUhvYURvbkRBTyA9IChMb2FpSG9hRG9uREFPKSByZWdpc3RyeS5sb29rdXAoXCJsb2FpSG9hRG9uREFPXCIpO1xuICAgICAgICAgICAgaG9hRG9uREFPID0gKEhvYURvbkRBTykgcmVnaXN0cnkubG9va3VwKFwiaG9hRG9uREFPXCIpO1xuICAgICAgICAgICAgY2hpVGlldEhvYURvbkRBTyA9IChDaGlUaWV0SG9hRG9uREFPKSByZWdpc3RyeS5sb29rdXAoXCJjaGlUaWV0SG9hRG9uREFPXCIpO1xuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSBr4bq/dCBu4buRaVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoZG9pVmVEQU8udGVzdENvbm5lY3Rpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICBTd2luZ1V0aWxpdGllcy5pbnZva2VMYXRlcigoKSAtPiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoUkVBRFlfVEVYVCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQcmVsb2FkaW5nRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbi4uLlxuXG4gICAgcHJpdmF0ZSBKUGFuZWwgY3JlYXRlQnV0dG9uUGFuZWwoKSB7XG4gICAgICAgIEpQYW5lbCBidXR0b25QYW5lbCA9IG5ldyBKUGFuZWwobmV3IEZsb3dMYXlvdXQoRmxvd0xheW91dC5DRU5URVIsIDIwLCAxMCkpO1xuICAgICAgICBidXR0b25QYW5lbC5zZXRCYWNrZ3JvdW5kKENvbG9yLldISVRFKTtcblxuICAgICAgICBidG5Eb2lWZSA9IG5ldyBKQnV0dG9uKFwixJDhu5VpIFbDqVwiKTtcbiAgICAgICAgc3R5bGVCdXR0b24oYnRuRG9pVmUsIHByaW1hcnlDb2xvciwgQ29sb3IuV0hJVEUsIGNyZWF0ZUV4Y2hhbmdlSWNvbigxNiwgMTYsIENvbG9yLldISVRFKSk7XG4gICAgICAgIGJ0bkRvaVZlLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4gZG9pVmUoKSk7XG5cbiAgICAgICAgYnRuTGFtTW9pID0gbmV3IEpCdXR0b24oXCJMw6BtIE3hu5tpXCIpO1xuICAgICAgICBzdHlsZUJ1dHRvbihidG5MYW1Nb2ksIGdyYXlDb2xvciwgQ29sb3IuV0hJVEUsIGNyZWF0ZVJlZnJlc2hJY29uKDE2LCAxNiwgQ29sb3IuV0hJVEUpKTtcbiAgICAgICAgYnRuTGFtTW9pLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4gbGFtTW9pKCkpO1xuLi4uXG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBwcm9ncmVzcyBiYXJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzc0JhciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc2V0VmlzaWJsZShpc0xvYWRpbmcpO1xuICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnNldEluZGV0ZXJtaW5hdGUoaXNMb2FkaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2b2lkIHRpbVZlKCkge1xuICAgICAgICBTdHJpbmcgbWFWZSA9IHR4dE1hVmUuZ2V0VGV4dCgpLnRyaW0oKTtcbiAgICAgICAgaWYgKG1hVmUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLCBcIlZ1aSBsw7JuZyBuaOG6rXAgbcOjIHbDqSFcIiwgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhMT0FESU5HX1RFWFQsIHRydWUpO1xuXG4gICAgICAgICAgICBTd2luZ1dvcmtlcjxWZVRhdSwgVm9pZD4gd29ya2VyID0gbmV3IFN3aW5nV29ya2VyPD4oKSB7XG4gICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIFZlVGF1IGRvSW5CYWNrZ3JvdW5kKCkgdGhyb3dzIEV4Y2VwdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2lWZURBTy5nZXRWZVRhdShtYVZlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdm9pZCBkb25lKCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVUYXVIaWVuVGFpID0gZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVUYXVIaWVuVGFpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhEb2lWZVBhbmVsLnRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIktow7RuZyB0w6xtIHRo4bqleSB2w6kgduG7m2kgbcOjOiBcIiArIG1hVmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFtTW9pKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdpYVZlQmFuRGF1ID0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGllblRoaVRob25nVGluVmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgeGVtIGPDsyB0aOG7gyDEkeG7lWkgdsOpIGtow7RuZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW4gY29UaGVEb2lWZSA9ICh2ZVRhdUhpZW5UYWkuZ2V0VHJhbmdUaGFpKCkgPT0gVHJhbmdUaGFpVmVUYXUuREFfVEhBTkhfVE9BTik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SW5wdXRGaWVsZHNFbmFibGVkKGNvVGhlRG9pVmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkRvaVZlLnNldEVuYWJsZWQoY29UaGVEb2lWZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQ2hvbkxpY2hUcmluaC5zZXRFbmFibGVkKGNvVGhlRG9pVmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkNob25DaG9OZ29pLnNldEVuYWJsZWQoY29UaGVEb2lWZSk7XG4uLi5cblxuICAgIHByaXZhdGUgdm9pZCBkb2lWZSgpIHtcbiAgICAgICAgaWYgKHZlVGF1SGllblRhaSA9PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgLy8gS2nhu4NtIHRyYSBk4buvIGxp4buHdSDEkeG6p3UgdsOgb1xuICAgICAgICBTdHJpbmcgdGVuS2hhY2hIYW5nID0gdHh0VGVuS2hhY2hIYW5nLmdldFRleHQoKS50cmltKCk7XG4gICAgICAgIGlmICh0ZW5LaGFjaEhhbmcuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLCBcIlZ1aSBsw7JuZyBuaOG6rXAgdMOqbiBraMOhY2ggaMOgbmchXCIsIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgIHR4dFRlbktoYWNoSGFuZy5yZXF1ZXN0Rm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIFN0cmluZyBnaWF5VG8gPSB0eHRHaWF5VG8uZ2V0VGV4dCgpLnRyaW0oKTtcbiAgICAgICAgaWYgKGdpYXlUby5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsIFwiVnVpIGzDsm5nIG5o4bqtcCBnaeG6pXkgdOG7nSFcIiwgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgdHh0R2lheVRvLnJlcXVlc3RGb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4uLi5cblxuICAgICAgICAgICAgLy8gxJDhu5VpIHRy4bqhbmcgdGjDoWkgdsOpIHRow6BuaCBDSE9fWEFDX05IQU5cbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKTtcblxuICAgICAgICAgICAgLy8gR+G7jWkgQVBJIMSR4buDIGPhuq1wIG5o4bqtdCB2w6lcbiAgICAgICAgICAgIGJvb2xlYW4gc3VjY2VzcyA9IGRvaVZlREFPLmRvaVZlKHZlVGF1SGllblRhaSk7XG5cbiAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlTGljaFN1QW5kU2hvd1N1Y2Nlc3ModHJhbmdUaGFpQ3UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCLEkOG7lWkgdsOpIGtow7RuZyB0aMOgbmggY8O0bmchXCIsIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgdXBkYXRlU3RhdHVzKEVSUk9SX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIMSR4buVaSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuLi4uXG5cbiAgICAgICAgLy8gTGlzdGVuZXIgY2hvIGNvbWJvYm94IMSR4buDIGNodXnhu4NuIHRhYlxuICAgICAgICBjbWJQYXltZW50VHlwZS5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgIENhcmRMYXlvdXQgY2wgPSAoQ2FyZExheW91dCkgcG5sUGF5bWVudFRhYnMuZ2V0TGF5b3V0KCk7XG4gICAgICAgICAgICBpbnQgc2VsZWN0ZWRJbmRleCA9IGNtYlBheW1lbnRUeXBlLmdldFNlbGVjdGVkSW5kZXgoKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEluZGV4ID09IDApIHtcbiAgICAgICAgICAgICAgICBjbC5zaG93KHBubFBheW1lbnRUYWJzLCBcIkJBTktfVFJBTlNGRVJcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsLnNob3cocG5sUGF5bWVudFRhYnMsIFwiVk5QQVlfUVJcIik7XG4gICAgICAgICAgICAgICAgLy8gVOG6oW8gUVIgY29kZSBraGkgY2jhu41uIHRhYiBWTlBheVxuICAgICAgICAgICAgICAgIGdlbmVyYXRlVm5wYXlRUkNvZGUobGJsUVJDb2RlLCB2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSwgbGJsUGF5bWVudFN0YXR1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBubFRyYW5zZmVySW5mby5zZXRCb3JkZXIoQm9yZGVyRmFjdG9yeS5jcmVhdGVFbXB0eUJvcmRlcigwLCAwLCAxMCwgMCkpO1xuICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuYWRkKHBubFRyYW5zZmVySW5mbywgQm9yZGVyTGF5b3V0Lk5PUlRIKTtcbiAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LmFkZChwbmxQYXltZW50VGFicywgQm9yZGVyTGF5b3V0LkNFTlRFUik7XG5cbiAgICAgICAgLy8gTsO6dCBsw6BtIG3hu5tpIHRy4bqhbmcgdGjDoWkgdGhhbmggdG/DoW5cbiAgICAgICAgYnRuUmVmcmVzaFN0YXR1cy5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgIGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKHZlVGF1SGllblRhaS5nZXRNYVZlKCksIGxibFBheW1lbnRTdGF0dXMsIGRpYWxvZyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEhp4buDbiB0aOG7iyBwYW5lbCBwaMawxqFuZyB0aOG7qWMgdGhhbmggdG/DoW4gYmFuIMSR4bqndSAobeG6t2MgxJHhu4tuaCBsw6AgdGnhu4FuIG3hurd0KVxuICAgICAgICBwbmxQYXltZW50LmFkZChwbmxDYXNoUGF5bWVudCk7XG4gICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgcG5sUGF5bWVudC5hZGQocG5sVHJhbnNmZXJQYXltZW50KTtcblxuICAgICAgICAvLyBUaMOqbSBsaXN0ZW5lciBjaG8gcmFkaW8gYnV0dG9uIMSR4buDIGNodXnhu4NuIMSR4buVaSBnaeG7r2EgY8OhYyBwaMawxqFuZyB0aOG7qWMgdGhhbmggdG/DoW5cbiAgICAgICAgcmFkQ2FzaC5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgIHBubENhc2hQYXltZW50LnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICBkaWFsb2cucmV2YWxpZGF0ZSgpO1xuICAgICAgICAgICAgZGlhbG9nLnJlcGFpbnQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmFkVHJhbnNmZXIuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBwbmxDYXNoUGF5bWVudC5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgZGlhbG9nLnJldmFsaWRhdGUoKTtcbiAgICAgICAgICAgIGRpYWxvZy5yZXBhaW50KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFkZCBkb2N1bWVudCBsaXN0ZW5lciBmb3IgYXV0b21hdGljIGNoYW5nZSBjYWxjdWxhdGlvblxuICAgICAgICB0eHRDdXN0b21lclBheW1lbnQuZ2V0RG9jdW1lbnQoKS5hZGREb2N1bWVudExpc3RlbmVyKG5ldyBEb2N1bWVudExpc3RlbmVyKCkge1xuICAgICAgICAgICAgcHJpdmF0ZSB2b2lkIHVwZGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgaW5wdXQgPSB0eHRDdXN0b21lclBheW1lbnQuZ2V0VGV4dCgpLnJlcGxhY2VBbGwoXCJbXlxcXFxkXVwiLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSBjdXN0b21lclBheW1lbnQgPSBEb3VibGUucGFyc2VEb3VibGUoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGNoYW5nZSA9IGN1c3RvbWVyUGF5bWVudCAtIHZlVGF1SGllblRhaS5nZXRHaWFWZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGJsQ2hhbmdlLnNldFRleHQoY3VycmVuY3lGb3JtYXR0ZXIuZm9ybWF0KE1hdGgubWF4KDAsIGNoYW5nZSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxibENoYW5nZS5zZXRUZXh0KFwiMCBWTsSQXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGJsQ2hhbmdlLnNldFRleHQoXCIwIFZOxJBcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICAgICAgYnRuVGhhbmhUb2FuLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAocmFkQ2FzaC5pc1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gWOG7rSBsw70gdGhhbmggdG/DoW4gdGnhu4FuIG3hurd0XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBpbnB1dCA9IHR4dEN1c3RvbWVyUGF5bWVudC5nZXRUZXh0KCkucmVwbGFjZUFsbChcIlteXFxcXGRdXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVnVpIGzDsm5nIG5o4bqtcCBz4buRIHRp4buBbiBraMOhY2ggxJHGsGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZG91YmxlIGN1c3RvbWVyUGF5bWVudCA9IERvdWJsZS5wYXJzZURvdWJsZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21lclBheW1lbnQgPCB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlPhu5EgdGnhu4FuIGtow6FjaCDEkcawYSBraMO0bmcgxJHhu6dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHh1THlUaGFuaFRvYW4oXCJUSUVOX01BVFwiLCBcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGNoYW5nZSA9IGN1c3RvbWVyUGF5bWVudCAtIHZlVGF1SGllblRhaS5nZXRHaWFWZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1BheW1lbnRTdWNjZXNzRGlhbG9nKGNoYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQWZ0ZXJTdWNjZXNzZnVsUGF5bWVudChkaWFsb2cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4uLi5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gVk5QYXkgUVJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFjDoWMgdGjhu7FjIGzhuqFpIHRy4bqhbmcgdGjDoWkgdGhhbmggdG/DoW4gbeG7mXQgbOG6p24gbuG7r2FcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW4gcGF5bWVudFN1Y2Nlc3MgPSBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBsYmxQYXltZW50U3RhdHVzLCBudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBheW1lbnRTdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1ZucGF5U3VjY2Vzc0RpYWxvZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2jGsGEgbmjhuq1uIMSRxrDhu6NjIHRow7RuZyB0aW4gdGhhbmggdG/DoW4uIFZ1aSBsw7JuZyB0aGFuaCB0b8OhbiBob+G6t2Mga2nhu4NtIHRyYSBs4bqhaS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2jGsGEgdGhhbmggdG/DoW5cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKE51bWJlckZvcm1hdEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU+G7kSB0aeG7gW4ga2jDtG5nIGjhu6NwIGzhu4dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZXgpIHtcbiAgICAgICAgICAgICAgICBleC5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpIGtoaSB0aGFuaCB0b8OhbjogXCIgKyBleC5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbi4uLlxuXG4gICAgcHJpdmF0ZSB2b2lkIGdlbmVyYXRlVm5wYXlRUkNvZGUoSkxhYmVsIGxibFFSQ29kZSwgU3RyaW5nIG1hVmUsIGRvdWJsZSBhbW91bnQsIEpMYWJlbCBsYmxTdGF0dXMpIHtcbiAgICAgICAgLy8gVOG6oW8gU3dpbmdXb3JrZXIgxJHhu4Mga2jDtG5nIGzDoG0gxJHGoSBnaWFvIGRp4buHblxuICAgICAgICBTd2luZ1dvcmtlcjxJbWFnZUljb24sIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgSW1hZ2VJY29uIGRvSW5CYWNrZ3JvdW5kKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFThuqFvIHRoYW0gc+G7kSBjaG8gQVBJIFZOUGF5XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfVHhuUmVmID0gbWFWZSArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOyAvLyBNw6MgdGhhbSBjaGnhur91IGdpYW8gZOG7i2NoXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfQW1vdW50ID0gU3RyaW5nLnZhbHVlT2YoKGxvbmcpKGFtb3VudCAqIDEwMCkpOyAvLyBT4buRIHRp4buBbiAqIDEwMCAoxJHGoW4gduG7iyB4dSlcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9PcmRlckluZm8gPSBcIlRoYW5oIHRvYW4gaG9hIGRvbiB2ZSB0YXUgXCIgKyBtYVZlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVSTCBBUEkgdOG6oW8gbcOjIFFSIGPhu6dhIFZOUGF5ICjEkcOieSBsw6AgVVJMIGdp4bqjIMSR4buLbmgsIGLhuqFuIGPhuqduIHRoYXkgdGjhur8gYuG6sW5nIFVSTCB0aOG7sWMpXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBhcGlVcmwgPSBcImh0dHBzOi8vc2FuZGJveC52bnBheW1lbnQudm4vcGF5bWVudHYyL2NyZWF0ZV9xcl9jb2RlLmh0bWxcIjtcbi4uLlxuXG4gICAgLy8gUGjGsMahbmcgdGjhu6ljIHjhu60gbMO9IHNhdSBraGkgdGhhbmggdG/DoW4gdGjDoG5oIGPDtG5nXG4gICAgcHJpdmF0ZSB2b2lkIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KEpEaWFsb2cgZGlhbG9nKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpIHRow6BuaCDEkMODX1RIQU5IX1RPQU5cbiAgICAgICAgdmVUYXVIaWVuVGFpLnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKTtcblxuICAgICAgICAvLyBH4buNaSBBUEkgxJHhu4MgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpXG4gICAgICAgIGJvb2xlYW4gc3VjY2VzcyA9IGRvaVZlREFPLmNhcE5oYXRUcmFuZ1RoYWlWZSh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKTtcbi4uLlxuICAgIHByaXZhdGUgYm9vbGVhbiB4dUx5VGhhbmhUb2FuKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyAxLiBUw6xtIGtow6FjaCBow6BuZyB04burIG3DoyB2w6lcbiAgICAgICAgICAgIEtoYWNoSGFuZyBraGFjaEhhbmcgPSBkb2lWZURBTy5nZXRLaGFjaEhhbmdCeU1hVmUodmVUYXVIaWVuVGFpLmdldE1hVmUoKSk7XG4gICAgICAgICAgICBpZiAoa2hhY2hIYW5nID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiS2jDtG5nIHTDrG0gdGjhuqV5IHRow7RuZyB0aW4ga2jDoWNoIGjDoG5nIVwiKTtcbiAgICAgICAgICAgIH1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vRG9pVmVEQU8uamF2YVxuLi4uXG5cbnB1YmxpYyBpbnRlcmZhY2UgRG9pVmVEQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIFZlVGF1IGdldFZlVGF1KFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGRvaVZlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8VmVUYXU+IGdldFZlVGF1QnlUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gdGVzdENvbm5lY3Rpb24oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8VHJhbmdUaGFpVmVUYXU+IGdldEFsbFRyYW5nVGhhaVZlKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIFRow6ptIGNo4bupYyBuxINuZyBt4bubaVxuICAgIGJvb2xlYW4gZGF0VmUoVmVUYXUgdmVUYXUsIFN0cmluZyBjaG9OZ29pSWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBodXlWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHRoYW5oVG9hblZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gY2FwTmhhdFRyYW5nVGhhaVZlKFN0cmluZyBtYVZlLCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgS2hhY2hIYW5nIGdldEtoYWNoSGFuZ0J5TWFWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvRG9pVmVEQU9JbXBsLmphdmFcbi4uLlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSB0w6xtIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSB0w6xtIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVUYXU7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gZG9pVmUoVmVUYXUgdmVUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKT0lOIEZFVENIIMSR4buDIHThuqNpIHRyxrDhu5tjIGThu68gbGnhu4d1IGxpw6puIHF1YW5cbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgdnQgRlJPTSBWZVRhdSB2dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmxpY2hUcmluaFRhdSBsdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5jaG9OZ29pIGNuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQua2h1eWVuTWFpIGttIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggbHR0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdC50dXllblRhdSB0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdnQudHJhbmdUaGFpID0gOnRyYW5nVGhhaVwiO1xuXG4gICAgICAgICAgICBsaXN0ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlcIiwgdHJhbmdUaGFpKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0UmVzdWx0TGlzdCgpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggdsOpIHRoZW8gdHLhuqFuZyB0aMOhaTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIHbDqSB0aGVvIHRy4bqhbmcgdGjDoWlcIiwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIGNo4buXIG5n4buTaSBjw7MgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICBDaG9OZ29pIGNob05nb2kgPSBlbS5maW5kKENob05nb2kuY2xhc3MsIGNob05nb2lJZCk7XG4gICAgICAgICAgICBpZiAoY2hvTmdvaSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgY2jhu5cgbmfhu5NpIGPDsyB0cuG7kW5nIGtow7RuZ1xuICAgICAgICAgICAgaWYgKGNob05nb2kuaXNUaW5oVHJhbmcoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIGzhu4tjaCB0csOsbmggY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgTGljaFRyaW5oVGF1IGxpY2hUcmluaFRhdSA9IGVtLmZpbmQoTGljaFRyaW5oVGF1LmNsYXNzLCB2ZVRhdS5nZXRMaWNoVHJpbmhUYXUoKS5nZXRNYUxpY2goKSk7XG4gICAgICAgICAgICBpZiAobGljaFRyaW5oVGF1ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVOG6oW8gbcOjIHbDqSBt4bubaSBu4bq/dSBjaMawYSBjw7NcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRNYVZlKCkgPT0gbnVsbCB8fCB2ZVRhdS5nZXRNYVZlKCkuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgU3RyaW5nIG1hVmUgPSBcIlZFXCIgKyBVVUlELnJhbmRvbVVVSUQoKS50b1N0cmluZygpLnN1YnN0cmluZygwLCA4KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHZlVGF1LnNldE1hVmUobWFWZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIHbDqVxuICAgICAgICAgICAgdmVUYXUuc2V0Q2hvTmdvaShjaG9OZ29pKTtcbiAgICAgICAgICAgIHZlVGF1LnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pO1xuXG4gICAgICAgICAgICAvLyBUw61uaCBnacOhIHbDqVxuICAgICAgICAgICAgZG91YmxlIGdpYVZlID0gY2hvTmdvaS5nZXRHaWFUaWVuKCk7XG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0S2h1eWVuTWFpKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIEtodXllbk1haSBraHV5ZW5NYWkgPSBlbS5maW5kKEtodXllbk1haS5jbGFzcywgdmVUYXUuZ2V0S2h1eWVuTWFpKCkuZ2V0TWFLTSgpKTtcbiAgICAgICAgICAgICAgICB2ZVRhdS5zZXRLaHV5ZW5NYWkoa2h1eWVuTWFpKTtcbiAgICAgICAgICAgICAgICBnaWFWZSAqPSAoMSAtIGtodXllbk1haS5nZXRDaGlldEtoYXUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2ZVRhdS5zZXRHaWFWZShnaWFWZSk7XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIGNo4buXIG5n4buTaVxuICAgICAgICAgICAgY2hvTmdvaS5zZXRUaW5oVHJhbmcodHJ1ZSk7XG4gICAgICAgICAgICBlbS5tZXJnZShjaG9OZ29pKTtcblxuICAgICAgICAgICAgLy8gTMawdSB2w6kgbeG7m2lcbiAgICAgICAgICAgIGVtLnBlcnNpc3QodmVUYXUpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdsOpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIFZlVGF1IHZlVGF1ID0gZW0uZmluZChWZVRhdS5jbGFzcywgbWFWZSk7XG4gICAgICAgICAgICBpZiAodmVUYXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgdsOpIChjaOG7iSBo4buneSDEkcaw4bujYyB2w6kg4bufIHRy4bqhbmcgdGjDoWkgQ0hPX1hBQ19OSEFOIGhv4bq3YyBEQV9USEFOSF9UT0FOKVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTiAmJlxuICAgICAgICAgICAgICAgICAgICB2ZVRhdS5nZXRUcmFuZ1RoYWkoKSAhPSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdp4bqjaSBwaMOzbmcgY2jhu5cgbmfhu5NpXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0Q2hvTmdvaSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBDaG9OZ29pIGNob05nb2kgPSB2ZVRhdS5nZXRDaG9OZ29pKCk7XG4gICAgICAgICAgICAgICAgY2hvTmdvaS5zZXRUaW5oVHJhbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGVtLm1lcmdlKGNob05nb2kpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIERBX1RSQVxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkRBX1RSQSk7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4uLi5cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBib29sZWFuIHRoYW5oVG9hblZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdsOpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIFZlVGF1IHZlVGF1ID0gZW0uZmluZChWZVRhdS5jbGFzcywgbWFWZSk7XG4gICAgICAgICAgICBpZiAodmVUYXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgdsOpIChjaOG7iSB0aGFuaCB0b8OhbiDEkcaw4bujYyB2w6kg4bufIHRy4bqhbmcgdGjDoWkgQ0hPX1hBQ19OSEFOKVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTikge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIERBX1RIQU5IX1RPQU5cbiAgICAgICAgICAgIHZlVGF1LnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKHZlVGF1KTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gY2FwTmhhdFRyYW5nVGhhaVZlKFN0cmluZyBtYVZlLCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB2w6kgY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgVmVUYXUgdmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCBtYVZlKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqVxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKHRyYW5nVGhhaSk7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuLi4uXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI5MmFmYTFlZi1hZGM5LTQ5ZmYtOTg4MC05NzA0ZThjODMxMzQ7dG9vbHVfdnJ0eF8wMTNiTGM5SmdNTHhBRjNTeTJHTHE3c3oiOnsicGhhc2UiOjYsInJlc3VsdCI6eyJ0ZXh0IjoiUmFuIGludG8gVW5rbm93biBlcnJvciB3aGlsZSB0cnlpbmcgdG8gcmVhZCBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmEiLCJpc0Vycm9yIjp0cnVlLCJyZXF1ZXN0SWQiOiIifX0sIjQ1YjkzOGU3LWFiMjktNDg3OS05NGIwLWQxODUxMzlmZGQwOTt0b29sdV92cnR4XzAxUmNxRVY1QjlUREE0V1RBaWpxQkU4dCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmFcbi4uLlxuXG4gICAgICAgIGxibENob05nb2kgPSBuZXcgSkxhYmVsKFwiQ2jGsGEgY2jhu41uXCIpO1xuICAgICAgICBsYmxDaG9OZ29pLnNldEZvbnQoZmllbGRGb250KTtcbiAgICAgICAgcG5sQ2hvTmdvaS5hZGQobGJsQ2hvTmdvaSwgQm9yZGVyTGF5b3V0LkNFTlRFUik7XG5cbiAgICAgICAgLy8gVOG6oW8gSkJ1dHRvbiB0w7l5IGNo4buJbmggY2hvIGNo4buXIG5n4buTaVxuICAgICAgICBidG5DaG9uQ2hvTmdvaSA9IG5ldyBKQnV0dG9uKFwiQ2jhu41uXCIpIHtcbiAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgcHJvdGVjdGVkIHZvaWQgcGFpbnRDb21wb25lbnQoR3JhcGhpY3MgZykge1xuICAgICAgICAgICAgICAgIEdyYXBoaWNzMkQgZzIgPSAoR3JhcGhpY3MyRCkgZy5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICBnMi5zZXRSZW5kZXJpbmdIaW50KFJlbmRlcmluZ0hpbnRzLktFWV9BTlRJQUxJQVNJTkcsIFJlbmRlcmluZ0hpbnRzLlZBTFVFX0FOVElBTElBU19PTik7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldE1vZGVsKCkuaXNQcmVzc2VkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGcyLnNldENvbG9yKHByaW1hcnlDb2xvci5kYXJrZXIoKS5kYXJrZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2V0TW9kZWwoKS5pc1JvbGxvdmVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGcyLnNldENvbG9yKHByaW1hcnlDb2xvci5kYXJrZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnMi5zZXRDb2xvcihwcmltYXJ5Q29sb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZzIuc2V0Q29sb3IobmV3IENvbG9yKDIwMCwgMjAwLCAyMDApKTsgLy8gTcOgdSBraGkgbsO6dCBi4buLIHbDtCBoaeG7h3UgaMOzYVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGcyLmZpbGxSZWN0KDAsIDAsIGdldFdpZHRoKCksIGdldEhlaWdodCgpKTtcbiAgICAgICAgICAgICAgICBnMi5kaXNwb3NlKCk7XG5cbiAgICAgICAgICAgICAgICBzdXBlci5wYWludENvbXBvbmVudChnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbi4uLlxuXG4gICAgcHJpdmF0ZSBKUGFuZWwgY3JlYXRlQnV0dG9uUGFuZWwoKSB7XG4gICAgICAgIEpQYW5lbCBidXR0b25QYW5lbCA9IG5ldyBKUGFuZWwobmV3IEZsb3dMYXlvdXQoRmxvd0xheW91dC5DRU5URVIsIDIwLCAxMCkpO1xuICAgICAgICBidXR0b25QYW5lbC5zZXRCYWNrZ3JvdW5kKENvbG9yLldISVRFKTtcblxuICAgICAgICBidG5Eb2lWZSA9IG5ldyBKQnV0dG9uKFwixJDhu5VpIFbDqVwiKTtcbiAgICAgICAgc3R5bGVCdXR0b24oYnRuRG9pVmUsIHByaW1hcnlDb2xvciwgQ29sb3IuV0hJVEUsIGNyZWF0ZUV4Y2hhbmdlSWNvbigxNiwgMTYsIENvbG9yLldISVRFKSk7XG4gICAgICAgIGJ0bkRvaVZlLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4gZG9pVmUoKSk7XG5cbiAgICAgICAgYnRuTGFtTW9pID0gbmV3IEpCdXR0b24oXCJMw6BtIE3hu5tpXCIpO1xuICAgICAgICBzdHlsZUJ1dHRvbihidG5MYW1Nb2ksIGdyYXlDb2xvciwgQ29sb3IuV0hJVEUsIGNyZWF0ZVJlZnJlc2hJY29uKDE2LCAxNiwgQ29sb3IuV0hJVEUpKTtcbiAgICAgICAgYnRuTGFtTW9pLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4gbGFtTW9pKCkpO1xuLi4uXG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkgPSAoVHJhbmdUaGFpVmVUYXUpIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRyYW5nVGhhaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEQV9USEFOSF9UT0FOOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoc3VjY2Vzc0NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZVBheW1lbnRJY29uKDE0LCAxNCwgc3VjY2Vzc0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENIT19YQUNfTkhBTjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRGb3JlZ3JvdW5kKHdhcm5pbmdDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVQZW5kaW5nSWNvbigxNCwgMTQsIHdhcm5pbmdDb2xvcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRGb3JlZ3JvdW5kKGRhcmtUZXh0Q29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24obnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRIb3Jpem9udGFsQWxpZ25tZW50KEpMYWJlbC5DRU5URVIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4uLi5cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSA9IChUcmFuZ1RoYWlWZVRhdSkgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJhbmdUaGFpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIERBX1RIQU5IX1RPQU46XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChzdWNjZXNzQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24oY3JlYXRlUGF5bWVudEljb24oMTQsIDE0LCBzdWNjZXNzQ29sb3IpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQ0hPX1hBQ19OSEFOOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQod2FybmluZ0NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZVBlbmRpbmdJY29uKDE0LCAxNCwgd2FybmluZ0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoZGFya1RleHRDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEhvcml6b250YWxBbGlnbm1lbnQoSkxhYmVsLkNFTlRFUik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbi4uLlxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgcHJvZ3Jlc3MgYmFyXG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3NCYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnNldFZpc2libGUoaXNMb2FkaW5nKTtcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zZXRJbmRldGVybWluYXRlKGlzTG9hZGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgdm9pZCB0aW1WZSgpIHtcbiAgICAgICAgU3RyaW5nIG1hVmUgPSB0eHRNYVZlLmdldFRleHQoKS50cmltKCk7XG4gICAgICAgIGlmIChtYVZlLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcywgXCJWdWkgbMOybmcgbmjhuq1wIG3DoyB2w6khXCIsIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoTE9BRElOR19URVhULCB0cnVlKTtcblxuICAgICAgICAgICAgU3dpbmdXb3JrZXI8VmVUYXUsIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCBWZVRhdSBkb0luQmFja2dyb3VuZCgpIHRocm93cyBFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9pVmVEQU8uZ2V0VmVUYXUobWFWZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZvaWQgZG9uZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlVGF1SGllblRhaSA9IGdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlVGF1SGllblRhaSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coRG9pVmVQYW5lbC50aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJLaMO0bmcgdMOsbSB0aOG6pXkgdsOpIHbhu5tpIG3DozogXCIgKyBtYVZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbU1vaSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaWFWZUJhbkRhdSA9IHZlVGF1SGllblRhaS5nZXRHaWFWZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZW5UaGlUaG9uZ1RpblZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLaeG7g20gdHJhIHhlbSBjw7MgdGjhu4MgxJHhu5VpIHbDqSBraMO0bmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sZWFuIGNvVGhlRG9pVmUgPSAodmVUYXVIaWVuVGFpLmdldFRyYW5nVGhhaSgpID09IFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldElucHV0RmllbGRzRW5hYmxlZChjb1RoZURvaVZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5Eb2lWZS5zZXRFbmFibGVkKGNvVGhlRG9pVmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkNob25MaWNoVHJpbmguc2V0RW5hYmxlZChjb1RoZURvaVZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5DaG9uQ2hvTmdvaS5zZXRFbmFibGVkKGNvVGhlRG9pVmUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb1RoZURvaVZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKERvaVZlUGFuZWwudGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlbDqSBuw6B5IGPDsyB0cuG6oW5nIHRow6FpICdcIiArIHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIicuIENo4buJIHbDqSDhu58gdHLhuqFuZyB0aMOhaSAnxJDDgyBUSEFOSCBUT8OBTicgbeG7m2kgY8OzIHRo4buDIMSR4buVaS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIktow7RuZyB0aOG7gyDEkeG7lWkgdsOpXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3RhdHVzKFJFQURZX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhEb2lWZVBhbmVsLnRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRydXkgduG6pW4gZOG7ryBsaeG7h3U6IFwiICsgZS5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgd29ya2VyLmV4ZWN1dGUoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLCBcIkzhu5dpIGtoaSB0cnV5IHbhuqVuIGThu68gbGnhu4d1OiBcIiArIGUuZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdm9pZCBoaWVuVGhpVGhvbmdUaW5WZSgpIHtcbiAgICAgICAgaWYgKHZlVGF1SGllblRhaSA9PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgdHh0VGVuS2hhY2hIYW5nLnNldFRleHQodmVUYXVIaWVuVGFpLmdldFRlbktoYWNoSGFuZygpKTtcbiAgICAgICAgdHh0R2lheVRvLnNldFRleHQodmVUYXVIaWVuVGFpLmdldEdpYXlUbygpKTtcbiAgICAgICAgdHh0TmdheURpLnNldFRleHQodmVUYXVIaWVuVGFpLmdldE5nYXlEaSgpLmZvcm1hdChmb3JtYXR0ZXIpKTtcblxuICAgICAgICAvLyDEkOG6t3QgxJHhu5FpIHTGsOG7o25nXG4gICAgICAgIFN0cmluZyBkb2lUdW9uZyA9IHZlVGF1SGllblRhaS5nZXREb2lUdW9uZygpO1xuICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGNib0RvaVR1b25nLmdldEl0ZW1Db3VudCgpOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjYm9Eb2lUdW9uZy5nZXRJdGVtQXQoaSkuZXF1YWxzKGRvaVR1b25nKSkge1xuICAgICAgICAgICAgICAgIGNib0RvaVR1b25nLnNldFNlbGVjdGVkSW5kZXgoaSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbi4uLlxuXG4gICAgICAgIC8vIEhp4buDbiB0aOG7iyB0cuG6oW5nIHRow6FpIHbDoCBnacOhIHbDqSB24bubaSBtw6B1IHPhuq9jIGtow6FjIG5oYXVcbiAgICAgICAgbGJsVHJhbmdUaGFpLnNldFRleHQodmVUYXVIaWVuVGFpLmdldFRyYW5nVGhhaSgpLnRvU3RyaW5nKCkpO1xuICAgICAgICBzZXRUcmFuZ1RoYWlDb2xvcihsYmxUcmFuZ1RoYWksIHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKSk7XG5cbiAgICAgICAgbGJsR2lhVmUuc2V0VGV4dChjdXJyZW5jeUZvcm1hdHRlci5mb3JtYXQodmVUYXVIaWVuVGFpLmdldEdpYVZlKCkpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHZvaWQgc2V0VHJhbmdUaGFpQ29sb3IoSkxhYmVsIGxhYmVsLCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHtcbiAgICAgICAgc3dpdGNoICh0cmFuZ1RoYWkpIHtcbiAgICAgICAgICAgIGNhc2UgQ0hPX1hBQ19OSEFOOlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQod2FybmluZ0NvbG9yKTsgLy8gQ2FtXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVQZW5kaW5nSWNvbigxNCwgMTQsIHdhcm5pbmdDb2xvcikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEQV9USEFOSF9UT0FOOlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoc3VjY2Vzc0NvbG9yKTsgLy8gWGFuaCBsw6FcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZUNoZWNrSWNvbigxNCwgMTQsIHN1Y2Nlc3NDb2xvcikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEQV9UUkE6XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChkYW5nZXJDb2xvcik7IC8vIMSQ4buPXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVDYW5jZWxJY29uKDE0LCAxNCwgZGFuZ2VyQ29sb3IpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgREFfRE9JOlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoZ3JheUNvbG9yKTsgLy8gWMOhbVxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24oY3JlYXRlRXhjaGFuZ2VJY29uKDE0LCAxNCwgZ3JheUNvbG9yKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEZvcmVncm91bmQoZGFya1RleHRDb2xvcik7XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdm9pZCBkb2lWZSgpIHtcbiAgICAgICAgaWYgKHZlVGF1SGllblRhaSA9PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgLy8gS2nhu4NtIHRyYSBk4buvIGxp4buHdSDEkeG6p3UgdsOgb1xuICAgICAgICBTdHJpbmcgdGVuS2hhY2hIYW5nID0gdHh0VGVuS2hhY2hIYW5nLmdldFRleHQoKS50cmltKCk7XG4gICAgICAgIGlmICh0ZW5LaGFjaEhhbmcuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLCBcIlZ1aSBsw7JuZyBuaOG6rXAgdMOqbiBraMOhY2ggaMOgbmchXCIsIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgIHR4dFRlbktoYWNoSGFuZy5yZXF1ZXN0Rm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIFN0cmluZyBnaWF5VG8gPSB0eHRHaWF5VG8uZ2V0VGV4dCgpLnRyaW0oKTtcbiAgICAgICAgaWYgKGdpYXlUby5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsIFwiVnVpIGzDsm5nIG5o4bqtcCBnaeG6pXkgdOG7nSFcIiwgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgdHh0R2lheVRvLnJlcXVlc3RGb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4uLi5cblxuICAgICAgICAgICAgLy8gxJDhu5VpIHRy4bqhbmcgdGjDoWkgdsOpIHRow6BuaCBDSE9fWEFDX05IQU5cbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKTtcblxuICAgICAgICAgICAgLy8gR+G7jWkgQVBJIMSR4buDIGPhuq1wIG5o4bqtdCB2w6lcbiAgICAgICAgICAgIGJvb2xlYW4gc3VjY2VzcyA9IGRvaVZlREFPLmRvaVZlKHZlVGF1SGllblRhaSk7XG5cbiAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlTGljaFN1QW5kU2hvd1N1Y2Nlc3ModHJhbmdUaGFpQ3UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCLEkOG7lWkgdsOpIGtow7RuZyB0aMOgbmggY8O0bmchXCIsIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgdXBkYXRlU3RhdHVzKEVSUk9SX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpIGtoaSB0aOG7sWMgaGnhu4duIMSR4buVaSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuLi4uXG5cbiAgICBwcml2YXRlIHZvaWQgaGllblRoaURpYWxvZ0Nob25DaG9OZ29pKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGxpY2hUcmluaERhQ2hvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVnVpIGzDsm5nIGNo4buNbiBs4buLY2ggdHLDrG5oIHRyxrDhu5tjIGtoaSBjaOG7jW4gY2jhu5cgbmfhu5NpIVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSGnhu4NuIHRo4buLIGRpYWxvZyBjaOG7jW4gY2jhu5cgbmfhu5NpXG4gICAgICAgICAgICBDaG9OZ29pU2VsZWN0b3JEaWFsb2cgZGlhbG9nID0gbmV3IENob05nb2lTZWxlY3RvckRpYWxvZyhcbiAgICAgICAgICAgICAgICAgICAgKEZyYW1lKSBTd2luZ1V0aWxpdGllcy5nZXRXaW5kb3dBbmNlc3Rvcih0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgbGljaFRyaW5oRGFDaG9uLFxuICAgICAgICAgICAgICAgICAgICBjaG9OZ29pREFPLFxuICAgICAgICAgICAgICAgICAgICB0b2FUYXVEQU8sXG4gICAgICAgICAgICAgICAgICAgIHRoaXM6Onh1THlDaG9OZ29pRGFDaG9uXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZGlhbG9nLnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgXCJLaMO0bmcgdGjhu4MgaGnhu4NuIHRo4buLIGdpYW8gZGnhu4duIGNo4buNbiBjaOG7lyBuZ+G7k2k6IFwiICsgZS5nZXRNZXNzYWdlKCksXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHZvaWQgeHVMeUNob05nb2lEYUNob24oQ2hvTmdvaSBjaG9OZ29pKSB7XG4gICAgICAgIGlmIChjaG9OZ29pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNob05nb2lEYUNob24gPSBjaG9OZ29pO1xuICAgICAgICAgICAgbGJsQ2hvTmdvaS5zZXRUZXh0KGNob05nb2kuZ2V0VGVuQ2hvKCkgKyBcIiAtIFwiICtcbiAgICAgICAgICAgICAgICAgICAgKGNob05nb2kuZ2V0TG9haUNobygpICE9IG51bGwgPyBjaG9OZ29pLmdldExvYWlDaG8oKS5nZXRUZW5Mb2FpKCkgOiBcIlwiKSk7XG5cbiAgICAgICAgICAgIGNhcE5oYXRHaWFWZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2b2lkIGNhcE5oYXRHaWFWZSgpIHtcbiAgICAgICAgaWYgKGNob05nb2lEYUNob24gIT0gbnVsbCkge1xuICAgICAgICAgICAgU3RyaW5nIGRvaVR1b25nID0gT2JqZWN0cy5yZXF1aXJlTm9uTnVsbChjYm9Eb2lUdW9uZy5nZXRTZWxlY3RlZEl0ZW0oKSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGRvdWJsZSBnaWFWZSA9IHRpbmhHaWFWZShjaG9OZ29pRGFDaG9uLCBraHV5ZW5NYWlEYUNob24sIGRvaVR1b25nKTtcbiAgICAgICAgICAgIGxibEdpYVZlLnNldFRleHQoY3VycmVuY3lGb3JtYXR0ZXIuZm9ybWF0KGdpYVZlKSk7XG4gICAgICAgIH1cbiAgICB9XG4uLi5cblxuICAgICAgICAvLyBMaXN0ZW5lciBjaG8gY29tYm9ib3ggxJHhu4MgY2h1eeG7g24gdGFiXG4gICAgICAgIGNtYlBheW1lbnRUeXBlLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgQ2FyZExheW91dCBjbCA9IChDYXJkTGF5b3V0KSBwbmxQYXltZW50VGFicy5nZXRMYXlvdXQoKTtcbiAgICAgICAgICAgIGludCBzZWxlY3RlZEluZGV4ID0gY21iUGF5bWVudFR5cGUuZ2V0U2VsZWN0ZWRJbmRleCgpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPT0gMCkge1xuICAgICAgICAgICAgICAgIGNsLnNob3cocG5sUGF5bWVudFRhYnMsIFwiQkFOS19UUkFOU0ZFUlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2wuc2hvdyhwbmxQYXltZW50VGFicywgXCJWTlBBWV9RUlwiKTtcbiAgICAgICAgICAgICAgICAvLyBU4bqhbyBRUiBjb2RlIGtoaSBjaOG7jW4gdGFiIFZOUGF5XG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVWbnBheVFSQ29kZShsYmxRUkNvZGUsIHZlVGF1SGllblRhaS5nZXRNYVZlKCksIHZlVGF1SGllblRhaS5nZXRHaWFWZSgpLCBsYmxQYXltZW50U3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcG5sVHJhbnNmZXJJbmZvLnNldEJvcmRlcihCb3JkZXJGYWN0b3J5LmNyZWF0ZUVtcHR5Qm9yZGVyKDAsIDAsIDEwLCAwKSk7XG4gICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5hZGQocG5sVHJhbnNmZXJJbmZvLCBCb3JkZXJMYXlvdXQuTk9SVEgpO1xuICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuYWRkKHBubFBheW1lbnRUYWJzLCBCb3JkZXJMYXlvdXQuQ0VOVEVSKTtcblxuICAgICAgICAvLyBOw7p0IGzDoG0gbeG7m2kgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhblxuICAgICAgICBidG5SZWZyZXNoU3RhdHVzLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgY2hlY2tWbnBheVBheW1lbnRTdGF0dXModmVUYXVIaWVuVGFpLmdldE1hVmUoKSwgbGJsUGF5bWVudFN0YXR1cywgZGlhbG9nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSGnhu4NuIHRo4buLIHBhbmVsIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhbiBiYW4gxJHhuqd1ICht4bq3YyDEkeG7i25oIGzDoCB0aeG7gW4gbeG6t3QpXG4gICAgICAgIHBubFBheW1lbnQuYWRkKHBubENhc2hQYXltZW50KTtcbiAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICBwbmxQYXltZW50LmFkZChwbmxUcmFuc2ZlclBheW1lbnQpO1xuXG4gICAgICAgIC8vIFRow6ptIGxpc3RlbmVyIGNobyByYWRpbyBidXR0b24gxJHhu4MgY2h1eeG7g24gxJHhu5VpIGdp4buvYSBjw6FjIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhblxuICAgICAgICByYWRDYXNoLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgcG5sQ2FzaFBheW1lbnQuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIGRpYWxvZy5yZXZhbGlkYXRlKCk7XG4gICAgICAgICAgICBkaWFsb2cucmVwYWludCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICByYWRUcmFuc2Zlci5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgIHBubENhc2hQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICBkaWFsb2cucmV2YWxpZGF0ZSgpO1xuICAgICAgICAgICAgZGlhbG9nLnJlcGFpbnQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRkIGRvY3VtZW50IGxpc3RlbmVyIGZvciBhdXRvbWF0aWMgY2hhbmdlIGNhbGN1bGF0aW9uXG4gICAgICAgIHR4dEN1c3RvbWVyUGF5bWVudC5nZXREb2N1bWVudCgpLmFkZERvY3VtZW50TGlzdGVuZXIobmV3IERvY3VtZW50TGlzdGVuZXIoKSB7XG4gICAgICAgICAgICBwcml2YXRlIHZvaWQgdXBkYXRlQ2hhbmdlKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBpbnB1dCA9IHR4dEN1c3RvbWVyUGF5bWVudC5nZXRUZXh0KCkucmVwbGFjZUFsbChcIlteXFxcXGRdXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGN1c3RvbWVyUGF5bWVudCA9IERvdWJsZS5wYXJzZURvdWJsZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgY2hhbmdlID0gY3VzdG9tZXJQYXltZW50IC0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYmxDaGFuZ2Uuc2V0VGV4dChjdXJyZW5jeUZvcm1hdHRlci5mb3JtYXQoTWF0aC5tYXgoMCwgY2hhbmdlKSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGJsQ2hhbmdlLnNldFRleHQoXCIwIFZOxJBcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgICAgICBsYmxDaGFuZ2Uuc2V0VGV4dChcIjAgVk7EkFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4uLi5cblxuICAgICAgICBidG5UaGFuaFRvYW4uYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChyYWRDYXNoLmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBY4butIGzDvSB0aGFuaCB0b8OhbiB0aeG7gW4gbeG6t3RcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGlucHV0ID0gdHh0Q3VzdG9tZXJQYXltZW50LmdldFRleHQoKS5yZXBsYWNlQWxsKFwiW15cXFxcZF1cIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWdWkgbMOybmcgbmjhuq1wIHPhu5EgdGnhu4FuIGtow6FjaCDEkcawYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkb3VibGUgY3VzdG9tZXJQYXltZW50ID0gRG91YmxlLnBhcnNlRG91YmxlKGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1c3RvbWVyUGF5bWVudCA8IHZlVGF1SGllblRhaS5nZXRHaWFWZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiU+G7kSB0aeG7gW4ga2jDoWNoIMSRxrBhIGtow7RuZyDEkeG7p1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoeHVMeVRoYW5oVG9hbihcIlRJRU5fTUFUXCIsIFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb3VibGUgY2hhbmdlID0gY3VzdG9tZXJQYXltZW50IC0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93UGF5bWVudFN1Y2Nlc3NEaWFsb2coY2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbi4uLlxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBWTlBheSBRUlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gWMOhYyB0aOG7sWMgbOG6oWkgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBt4buZdCBs4bqnbiBu4buvYVxuICAgICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbiBwYXltZW50U3VjY2VzcyA9IGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKHZlVGF1SGllblRhaS5nZXRNYVZlKCksIGxibFBheW1lbnRTdGF0dXMsIG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF5bWVudFN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Vm5wYXlTdWNjZXNzRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0FmdGVyU3VjY2Vzc2Z1bFBheW1lbnQoZGlhbG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDaMawYSBuaOG6rW4gxJHGsOG7o2MgdGjDtG5nIHRpbiB0aGFuaCB0b8Ohbi4gVnVpIGzDsm5nIHRoYW5oIHRvw6FuIGhv4bq3YyBraeG7g20gdHJhIGzhuqFpLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDaMawYSB0aGFuaCB0b8OhblwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGV4KSB7XG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJT4buRIHRp4buBbiBraMO0bmcgaOG7o3AgbOG7h1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgIGV4LnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRoYW5oIHRvw6FuOiBcIiArIGV4LmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuLi4uXG5cbiAgICAvLyBQaMawxqFuZyB0aOG7qWMga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHRoYW5oIHRvw6FuIFZOUGF5XG4gICAgcHJpdmF0ZSBib29sZWFuIGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKFN0cmluZyBtYVZlLCBKTGFiZWwgbGJsU3RhdHVzLCBKRGlhbG9nIHBhcmVudERpYWxvZykge1xuICAgICAgICAvLyBU4bqhbyBTd2luZ1dvcmtlciDEkeG7gyBraMO0bmcgbMOgbSDEkcahIGdpYW8gZGnhu4duXG4gICAgICAgIFN3aW5nV29ya2VyPEJvb2xlYW4sIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgQm9vbGVhbiBkb0luQmFja2dyb3VuZCgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcm9uZyBtw7RpIHRyxrDhu51uZyB0aOG7sWMgdOG6vywgYuG6oW4gc+G6vSBn4buNaSBBUEkgVk5QYXkgxJHhu4Mga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIGdpYW8gZOG7i2NoXG4gICAgICAgICAgICAgICAgICAgIC8vIOG7niDEkcOieSBjaMO6bmcgdGEgc+G6vSBtw7QgcGjhu49uZyB2aeG7h2Mga2nhu4NtIHRyYSwgdHLhuqMgduG7gSBuZ+G6q3Ugbmhpw6puIMSR4buDIGRlbW9cbiAgICAgICAgICAgICAgICAgICAgLy8gVHJvbmcgdGjhu7FjIHThur8sIHPhur0ga2nhu4NtIHRyYSBk4buxYSB0csOqbiBtw6MgZ2lhbyBk4buLY2ggxJHDoyBsxrB1XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTcO0IHBo4buPbmcgZ+G7jWkgQVBJIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSAoNTAlIGPGoSBo4buZaSB0aMOgbmggY8O0bmcpXG4gICAgICAgICAgICAgICAgICAgIFRocmVhZC5zbGVlcCgxNTAwKTsgLy8gTcO0IHBo4buPbmcgdGjhu51pIGdpYW4gZ+G7jWkgQVBJXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZG9tKCkubmV4dEJvb2xlYW4oKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICBwcml2YXRlIHZvaWQgZ2VuZXJhdGVWbnBheVFSQ29kZShKTGFiZWwgbGJsUVJDb2RlLCBTdHJpbmcgbWFWZSwgZG91YmxlIGFtb3VudCwgSkxhYmVsIGxibFN0YXR1cykge1xuICAgICAgICAvLyBU4bqhbyBTd2luZ1dvcmtlciDEkeG7gyBraMO0bmcgbMOgbSDEkcahIGdpYW8gZGnhu4duXG4gICAgICAgIFN3aW5nV29ya2VyPEltYWdlSWNvbiwgVm9pZD4gd29ya2VyID0gbmV3IFN3aW5nV29ya2VyPD4oKSB7XG4gICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICAgICAgICAgIHByb3RlY3RlZCBJbWFnZUljb24gZG9JbkJhY2tncm91bmQoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVOG6oW8gdGhhbSBz4buRIGNobyBBUEkgVk5QYXlcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9UeG5SZWYgPSBtYVZlICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCk7IC8vIE3DoyB0aGFtIGNoaeG6v3UgZ2lhbyBk4buLY2hcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9BbW91bnQgPSBTdHJpbmcudmFsdWVPZigobG9uZykoYW1vdW50ICogMTAwKSk7IC8vIFPhu5EgdGnhu4FuICogMTAwICjEkcahbiB24buLIHh1KVxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgdm5wX09yZGVySW5mbyA9IFwiVGhhbmggdG9hbiBob2EgZG9uIHZlIHRhdSBcIiArIG1hVmU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVVJMIEFQSSB04bqhbyBtw6MgUVIgY+G7p2EgVk5QYXkgKMSRw6J5IGzDoCBVUkwgZ2nhuqMgxJHhu4tuaCwgYuG6oW4gY+G6p24gdGhheSB0aOG6vyBi4bqxbmcgVVJMIHRo4buxYylcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGFwaVVybCA9IFwiaHR0cHM6Ly9zYW5kYm94LnZucGF5bWVudC52bi9wYXltZW50djIvY3JlYXRlX3FyX2NvZGUuaHRtbFwiO1xuLi4uXG5cbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGRpYWxvZy5kaXNwb3NlKCk7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoU1VDQ0VTU19URVhULCBmYWxzZSk7XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBs4bqhaSB0cuG6oW5nIHRow6FpIHRyw6puIGdpYW8gZGnhu4duXG4gICAgICAgICAgICBsYmxUcmFuZ1RoYWkuc2V0VGV4dCh2ZVRhdUhpZW5UYWkuZ2V0VHJhbmdUaGFpKCkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBzZXRUcmFuZ1RoYWlDb2xvcihsYmxUcmFuZ1RoYWksIHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKSk7XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBs4bqhaSBi4bqjbmcgbOG7i2NoIHPhu61cbiAgICAgICAgICAgIERlZmF1bHRUYWJsZU1vZGVsIG1vZGVsID0gKERlZmF1bHRUYWJsZU1vZGVsKSB0YmxMaWNoU3UuZ2V0TW9kZWwoKTtcbiAgICAgICAgICAgIGludCByb3dDb3VudCA9IG1vZGVsLmdldFJvd0NvdW50KCk7XG4gICAgICAgICAgICBpZiAocm93Q291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IGTDsm5nIGN14buRaSBjw7luZyAoduG7q2EgdGjDqm0pXG4gICAgICAgICAgICAgICAgbW9kZWwuc2V0VmFsdWVBdChUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOLCByb3dDb3VudCAtIDEsIDMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYW1Nb2koKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgXCJLaMO0bmcgdGjhu4MgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgIH1cbiAgICB9XG4uLi5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjg0NDFiZmNmLTUxYzQtNGY5My1iMmM5LTc2YjQ1ZjlhZTk4ODt0b29sdV92cnR4XzAxVHUyWjk1M3ZqMUR1TGNobnVQd0p6ZiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmFcbi4uLlxuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpID0gKFRyYW5nVGhhaVZlVGF1KSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0cmFuZ1RoYWkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgREFfVEhBTkhfVE9BTjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRGb3JlZ3JvdW5kKHN1Y2Nlc3NDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVQYXltZW50SWNvbigxNCwgMTQsIHN1Y2Nlc3NDb2xvcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDSE9fWEFDX05IQU46XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZCh3YXJuaW5nQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24oY3JlYXRlUGVuZGluZ0ljb24oMTQsIDE0LCB3YXJuaW5nQ29sb3IpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChkYXJrVGV4dENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SG9yaXpvbnRhbEFsaWdubWVudChKTGFiZWwuQ0VOVEVSKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuLi4uXG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBwcm9ncmVzcyBiYXJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzc0JhciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc2V0VmlzaWJsZShpc0xvYWRpbmcpO1xuICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnNldEluZGV0ZXJtaW5hdGUoaXNMb2FkaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2b2lkIHRpbVZlKCkge1xuICAgICAgICBTdHJpbmcgbWFWZSA9IHR4dE1hVmUuZ2V0VGV4dCgpLnRyaW0oKTtcbiAgICAgICAgaWYgKG1hVmUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyh0aGlzLCBcIlZ1aSBsw7JuZyBuaOG6rXAgbcOjIHbDqSFcIiwgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhMT0FESU5HX1RFWFQsIHRydWUpO1xuXG4gICAgICAgICAgICBTd2luZ1dvcmtlcjxWZVRhdSwgVm9pZD4gd29ya2VyID0gbmV3IFN3aW5nV29ya2VyPD4oKSB7XG4gICAgICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkIFZlVGF1IGRvSW5CYWNrZ3JvdW5kKCkgdGhyb3dzIEV4Y2VwdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2lWZURBTy5nZXRWZVRhdShtYVZlKTtcbiAgICAgICAgICAgICAgICB9XG4uLi5cblxuICAgIHByaXZhdGUgdm9pZCBzZXRUcmFuZ1RoYWlDb2xvcihKTGFiZWwgbGFiZWwsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkge1xuICAgICAgICBzd2l0Y2ggKHRyYW5nVGhhaSkge1xuICAgICAgICAgICAgY2FzZSBDSE9fWEFDX05IQU46XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZCh3YXJuaW5nQ29sb3IpOyAvLyBDYW1cbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZVBlbmRpbmdJY29uKDE0LCAxNCwgd2FybmluZ0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERBX1RIQU5IX1RPQU46XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChzdWNjZXNzQ29sb3IpOyAvLyBYYW5oIGzDoVxuICAgICAgICAgICAgICAgIGxhYmVsLnNldEljb24oY3JlYXRlQ2hlY2tJY29uKDE0LCAxNCwgc3VjY2Vzc0NvbG9yKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERBX1RSQTpcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRGb3JlZ3JvdW5kKGRhbmdlckNvbG9yKTsgLy8gxJDhu49cbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKGNyZWF0ZUNhbmNlbEljb24oMTQsIDE0LCBkYW5nZXJDb2xvcikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEQV9ET0k6XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChncmF5Q29sb3IpOyAvLyBYw6FtXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0SWNvbihjcmVhdGVFeGNoYW5nZUljb24oMTQsIDE0LCBncmF5Q29sb3IpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0Rm9yZWdyb3VuZChkYXJrVGV4dENvbG9yKTtcbiAgICAgICAgICAgICAgICBsYWJlbC5zZXRJY29uKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhMT0FESU5HX1RFWFQsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBMxrB1IHRy4buvIHRy4bqhbmcgdGjDoWkgY8WpIMSR4buDIGhp4buDbiB0aOG7iyB0cm9uZyBs4buLY2ggc+G7rVxuICAgICAgICAgICAgZmluYWwgVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpQ3UgPSB2ZVRhdUhpZW5UYWkuZ2V0VHJhbmdUaGFpKCk7XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0aMO0bmcgdGluIHbDqVxuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldFRlbktoYWNoSGFuZyh0ZW5LaGFjaEhhbmcpO1xuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldEdpYXlUbyhnaWF5VG8pO1xuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldE5nYXlEaShuZ2F5RGkpO1xuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldERvaVR1b25nKE9iamVjdHMucmVxdWlyZU5vbk51bGwoY2JvRG9pVHVvbmcuZ2V0U2VsZWN0ZWRJdGVtKCkpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldExpY2hUcmluaFRhdShsaWNoVHJpbmhEYUNob24pO1xuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldENob05nb2koY2hvTmdvaURhQ2hvbik7XG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0S2h1eWVuTWFpKGtodXllbk1haURhQ2hvbik7XG5cbiAgICAgICAgICAgIC8vIFTDrW5oIGzhuqFpIGdpw6EgdsOpXG4gICAgICAgICAgICBkb3VibGUgZ2lhVmUgPSB0aW5oR2lhVmUoY2hvTmdvaURhQ2hvbiwga2h1eWVuTWFpRGFDaG9uLCBPYmplY3RzLnJlcXVpcmVOb25OdWxsKGNib0RvaVR1b25nLmdldFNlbGVjdGVkSXRlbSgpKS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRHaWFWZShnaWFWZSk7XG5cbiAgICAgICAgICAgIC8vIMSQ4buVaSB0cuG6oW5nIHRow6FpIHbDqSB0aMOgbmggQ0hPX1hBQ19OSEFOXG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTik7XG5cbiAgICAgICAgICAgIC8vIEfhu41pIEFQSSDEkeG7gyBj4bqtcCBuaOG6rXQgdsOpXG4gICAgICAgICAgICBib29sZWFuIHN1Y2Nlc3MgPSBkb2lWZURBTy5kb2lWZSh2ZVRhdUhpZW5UYWkpO1xuXG4gICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUxpY2hTdUFuZFNob3dTdWNjZXNzKHRyYW5nVGhhaUN1KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwixJDhu5VpIHbDqSBraMO0bmcgdGjDoG5oIGPDtG5nIVwiLCBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcyxcbiAgICAgICAgICAgICAgICAgICAgXCJM4buXaSBraGkgdGjhu7FjIGhp4buHbiDEkeG7lWkgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKEVSUk9SX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbi4uLlxuXG4gICAgICAgIEJ1dHRvbkdyb3VwIHBheW1lbnRNZXRob2RHcm91cCA9IG5ldyBCdXR0b25Hcm91cCgpO1xuICAgICAgICBwYXltZW50TWV0aG9kR3JvdXAuYWRkKHJhZENhc2gpO1xuICAgICAgICBwYXltZW50TWV0aG9kR3JvdXAuYWRkKHJhZFRyYW5zZmVyKTtcblxuICAgICAgICAvLyBUaMOqbSBjw6FjIHJhZGlvIGJ1dHRvbiB2w6BvIHBhbmVsXG4gICAgICAgIHBubFBheW1lbnRNZXRob2QuYWRkKHJhZENhc2gpO1xuICAgICAgICBwbmxQYXltZW50TWV0aG9kLmFkZChyYWRUcmFuc2Zlcik7XG4gICAgICAgIHBubFBheW1lbnQuYWRkKHBubFBheW1lbnRNZXRob2QpO1xuXG4gICAgICAgIC8vIFBhbmVsIGNobyB0aGFuaCB0b8OhbiB0aeG7gW4gbeG6t3RcbiAgICAgICAgSlBhbmVsIHBubENhc2hQYXltZW50ID0gbmV3IEpQYW5lbChuZXcgR3JpZEJhZ0xheW91dCgpKTtcbiAgICAgICAgR3JpZEJhZ0NvbnN0cmFpbnRzIGdiYyA9IG5ldyBHcmlkQmFnQ29uc3RyYWludHMoKTtcbiAgICAgICAgZ2JjLmluc2V0cyA9IG5ldyBJbnNldHMoNSwgNSwgNSwgNSk7XG4gICAgICAgIGdiYy5maWxsID0gR3JpZEJhZ0NvbnN0cmFpbnRzLkhPUklaT05UQUw7XG5cbiAgICAgICAgLy8gVG90YWwgYW1vdW50XG4gICAgICAgIGdiYy5ncmlkeCA9IDA7IGdiYy5ncmlkeSA9IDA7XG4gICAgICAgIHBubENhc2hQYXltZW50LmFkZChuZXcgSkxhYmVsKFwiVOG7lW5nIHRp4buBbjpcIiksIGdiYyk7XG4uLi5cblxuICAgICAgICAvLyBQaMawxqFuZyB0aOG7qWMgdGhhbmggdG/DoW5cbiAgICAgICAgZ2JjVHJhbnNmZXIuZ3JpZHggPSAwOyBnYmNUcmFuc2Zlci5ncmlkeSA9IDE7XG4gICAgICAgIHBubFRyYW5zZmVySW5mby5hZGQobmV3IEpMYWJlbChcIkNo4buNbiBwaMawxqFuZyB0aOG7qWM6XCIpLCBnYmNUcmFuc2Zlcik7XG5cbiAgICAgICAgZ2JjVHJhbnNmZXIuZ3JpZHggPSAxO1xuICAgICAgICBTdHJpbmdbXSBwYXltZW50T3B0aW9ucyA9IHtcIkNodXnhu4NuIGtob+G6o24gbmfDom4gaMOgbmdcIiwgXCJWTlBheSBRUlwifTtcbiAgICAgICAgSkNvbWJvQm94PFN0cmluZz4gY21iUGF5bWVudFR5cGUgPSBuZXcgSkNvbWJvQm94PD4ocGF5bWVudE9wdGlvbnMpO1xuICAgICAgICBwbmxUcmFuc2ZlckluZm8uYWRkKGNtYlBheW1lbnRUeXBlLCBnYmNUcmFuc2Zlcik7XG5cbiAgICAgICAgLy8gVGFiIHBhbmVsIGNobyBjw6FjIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhblxuICAgICAgICBKUGFuZWwgcG5sUGF5bWVudFRhYnMgPSBuZXcgSlBhbmVsKG5ldyBDYXJkTGF5b3V0KCkpO1xuXG4gICAgICAgIC8vIFRhYiAxOiBDaHV54buDbiBraG/huqNuIG5nw6JuIGjDoG5nIHRydXnhu4FuIHRo4buRbmdcbiAgICAgICAgSlBhbmVsIHBubEJhbmtUcmFuc2ZlciA9IG5ldyBKUGFuZWwoKTtcbiAgICAgICAgcG5sQmFua1RyYW5zZmVyLnNldExheW91dChuZXcgQm94TGF5b3V0KHBubEJhbmtUcmFuc2ZlciwgQm94TGF5b3V0LllfQVhJUykpO1xuLi4uXG5cbiAgICAgICAgLy8gTGlzdGVuZXIgY2hvIGNvbWJvYm94IMSR4buDIGNodXnhu4NuIHRhYlxuICAgICAgICBjbWJQYXltZW50VHlwZS5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgIENhcmRMYXlvdXQgY2wgPSAoQ2FyZExheW91dCkgcG5sUGF5bWVudFRhYnMuZ2V0TGF5b3V0KCk7XG4gICAgICAgICAgICBpbnQgc2VsZWN0ZWRJbmRleCA9IGNtYlBheW1lbnRUeXBlLmdldFNlbGVjdGVkSW5kZXgoKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEluZGV4ID09IDApIHtcbiAgICAgICAgICAgICAgICBjbC5zaG93KHBubFBheW1lbnRUYWJzLCBcIkJBTktfVFJBTlNGRVJcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsLnNob3cocG5sUGF5bWVudFRhYnMsIFwiVk5QQVlfUVJcIik7XG4gICAgICAgICAgICAgICAgLy8gVOG6oW8gUVIgY29kZSBraGkgY2jhu41uIHRhYiBWTlBheVxuICAgICAgICAgICAgICAgIGdlbmVyYXRlVm5wYXlRUkNvZGUobGJsUVJDb2RlLCB2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSwgbGJsUGF5bWVudFN0YXR1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBubFRyYW5zZmVySW5mby5zZXRCb3JkZXIoQm9yZGVyRmFjdG9yeS5jcmVhdGVFbXB0eUJvcmRlcigwLCAwLCAxMCwgMCkpO1xuICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuYWRkKHBubFRyYW5zZmVySW5mbywgQm9yZGVyTGF5b3V0Lk5PUlRIKTtcbiAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LmFkZChwbmxQYXltZW50VGFicywgQm9yZGVyTGF5b3V0LkNFTlRFUik7XG5cbiAgICAgICAgLy8gTsO6dCBsw6BtIG3hu5tpIHRy4bqhbmcgdGjDoWkgdGhhbmggdG/DoW5cbiAgICAgICAgYnRuUmVmcmVzaFN0YXR1cy5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgIGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKHZlVGF1SGllblRhaS5nZXRNYVZlKCksIGxibFBheW1lbnRTdGF0dXMsIGRpYWxvZyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEhp4buDbiB0aOG7iyBwYW5lbCBwaMawxqFuZyB0aOG7qWMgdGhhbmggdG/DoW4gYmFuIMSR4bqndSAobeG6t2MgxJHhu4tuaCBsw6AgdGnhu4FuIG3hurd0KVxuICAgICAgICBwbmxQYXltZW50LmFkZChwbmxDYXNoUGF5bWVudCk7XG4gICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgcG5sUGF5bWVudC5hZGQocG5sVHJhbnNmZXJQYXltZW50KTtcblxuICAgICAgICAvLyBUaMOqbSBsaXN0ZW5lciBjaG8gcmFkaW8gYnV0dG9uIMSR4buDIGNodXnhu4NuIMSR4buVaSBnaeG7r2EgY8OhYyBwaMawxqFuZyB0aOG7qWMgdGhhbmggdG/DoW5cbiAgICAgICAgcmFkQ2FzaC5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgIHBubENhc2hQYXltZW50LnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICBkaWFsb2cucmV2YWxpZGF0ZSgpO1xuICAgICAgICAgICAgZGlhbG9nLnJlcGFpbnQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmFkVHJhbnNmZXIuYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICBwbmxDYXNoUGF5bWVudC5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5zZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICAgICAgZGlhbG9nLnJldmFsaWRhdGUoKTtcbiAgICAgICAgICAgIGRpYWxvZy5yZXBhaW50KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFkZCBkb2N1bWVudCBsaXN0ZW5lciBmb3IgYXV0b21hdGljIGNoYW5nZSBjYWxjdWxhdGlvblxuICAgICAgICB0eHRDdXN0b21lclBheW1lbnQuZ2V0RG9jdW1lbnQoKS5hZGREb2N1bWVudExpc3RlbmVyKG5ldyBEb2N1bWVudExpc3RlbmVyKCkge1xuICAgICAgICAgICAgcHJpdmF0ZSB2b2lkIHVwZGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgaW5wdXQgPSB0eHRDdXN0b21lclBheW1lbnQuZ2V0VGV4dCgpLnJlcGxhY2VBbGwoXCJbXlxcXFxkXVwiLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSBjdXN0b21lclBheW1lbnQgPSBEb3VibGUucGFyc2VEb3VibGUoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGNoYW5nZSA9IGN1c3RvbWVyUGF5bWVudCAtIHZlVGF1SGllblRhaS5nZXRHaWFWZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGJsQ2hhbmdlLnNldFRleHQoY3VycmVuY3lGb3JtYXR0ZXIuZm9ybWF0KE1hdGgubWF4KDAsIGNoYW5nZSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxibENoYW5nZS5zZXRUZXh0KFwiMCBWTsSQXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGJsQ2hhbmdlLnNldFRleHQoXCIwIFZOxJBcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICAgICAgYnRuVGhhbmhUb2FuLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAocmFkQ2FzaC5pc1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gWOG7rSBsw70gdGhhbmggdG/DoW4gdGnhu4FuIG3hurd0XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBpbnB1dCA9IHR4dEN1c3RvbWVyUGF5bWVudC5nZXRUZXh0KCkucmVwbGFjZUFsbChcIlteXFxcXGRdXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVnVpIGzDsm5nIG5o4bqtcCBz4buRIHRp4buBbiBraMOhY2ggxJHGsGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZG91YmxlIGN1c3RvbWVyUGF5bWVudCA9IERvdWJsZS5wYXJzZURvdWJsZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21lclBheW1lbnQgPCB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlPhu5EgdGnhu4FuIGtow6FjaCDEkcawYSBraMO0bmcgxJHhu6dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHh1THlUaGFuaFRvYW4oXCJUSUVOX01BVFwiLCBcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGNoYW5nZSA9IGN1c3RvbWVyUGF5bWVudCAtIHZlVGF1SGllblRhaS5nZXRHaWFWZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1BheW1lbnRTdWNjZXNzRGlhbG9nKGNoYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQWZ0ZXJTdWNjZXNzZnVsUGF5bWVudChkaWFsb2cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyYWRUcmFuc2Zlci5pc1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gWOG7rSBsw70gdGhhbmggdG/DoW4gY2h1eeG7g24ga2hv4bqjblxuICAgICAgICAgICAgICAgICAgICBpbnQgc2VsZWN0ZWRQYXltZW50VHlwZSA9IGNtYlBheW1lbnRUeXBlLmdldFNlbGVjdGVkSW5kZXgoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRQYXltZW50VHlwZSA9PSAwKSB7IC8vIENodXnhu4NuIGtob+G6o24gbmfDom4gaMOgbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyB0cmFuc2FjdGlvbklkID0gdHh0VHJhbnNhY3Rpb25JZC5nZXRUZXh0KCkudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zYWN0aW9uSWQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWdWkgbMOybmcgbmjhuq1wIG3DoyBnaWFvIGThu4tjaFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHh1THlUaGFuaFRvYW4oXCJDSFVZRU5fS0hPQU5fTkdBTl9IQU5HXCIsIHRyYW5zYWN0aW9uSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1RyYW5zZmVyU3VjY2Vzc0RpYWxvZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiS2jDtG5nIHRo4buDIHjDoWMgdGjhu7FjIGdpYW8gZOG7i2NoLiBWdWkgbMOybmcga2nhu4NtIHRyYSBtw6MgZ2lhbyBk4buLY2guXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBWTlBheSBRUlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gWMOhYyB0aOG7sWMgbOG6oWkgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBt4buZdCBs4bqnbiBu4buvYVxuICAgICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbiBwYXltZW50U3VjY2VzcyA9IGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKHZlVGF1SGllblRhaS5nZXRNYVZlKCksIGxibFBheW1lbnRTdGF0dXMsIG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF5bWVudFN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Vm5wYXlTdWNjZXNzRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0FmdGVyU3VjY2Vzc2Z1bFBheW1lbnQoZGlhbG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDaMawYSBuaOG6rW4gxJHGsOG7o2MgdGjDtG5nIHRpbiB0aGFuaCB0b8Ohbi4gVnVpIGzDsm5nIHRoYW5oIHRvw6FuIGhv4bq3YyBraeG7g20gdHJhIGzhuqFpLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDaMawYSB0aGFuaCB0b8OhblwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGV4KSB7XG4gICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJT4buRIHRp4buBbiBraMO0bmcgaOG7o3AgbOG7h1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgIGV4LnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKGRpYWxvZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRoYW5oIHRvw6FuOiBcIiArIGV4LmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2lcIiwgSk9wdGlvblBhbmUuRVJST1JfTUVTU0FHRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuLi4uXG5cbiAgICAvLyBQaMawxqFuZyB0aOG7qWMga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHRoYW5oIHRvw6FuIFZOUGF5XG4gICAgcHJpdmF0ZSBib29sZWFuIGNoZWNrVm5wYXlQYXltZW50U3RhdHVzKFN0cmluZyBtYVZlLCBKTGFiZWwgbGJsU3RhdHVzLCBKRGlhbG9nIHBhcmVudERpYWxvZykge1xuICAgICAgICAvLyBU4bqhbyBTd2luZ1dvcmtlciDEkeG7gyBraMO0bmcgbMOgbSDEkcahIGdpYW8gZGnhu4duXG4gICAgICAgIFN3aW5nV29ya2VyPEJvb2xlYW4sIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgQm9vbGVhbiBkb0luQmFja2dyb3VuZCgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcm9uZyBtw7RpIHRyxrDhu51uZyB0aOG7sWMgdOG6vywgYuG6oW4gc+G6vSBn4buNaSBBUEkgVk5QYXkgxJHhu4Mga2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIGdpYW8gZOG7i2NoXG4gICAgICAgICAgICAgICAgICAgIC8vIOG7niDEkcOieSBjaMO6bmcgdGEgc+G6vSBtw7QgcGjhu49uZyB2aeG7h2Mga2nhu4NtIHRyYSwgdHLhuqMgduG7gSBuZ+G6q3Ugbmhpw6puIMSR4buDIGRlbW9cbiAgICAgICAgICAgICAgICAgICAgLy8gVHJvbmcgdGjhu7FjIHThur8sIHPhur0ga2nhu4NtIHRyYSBk4buxYSB0csOqbiBtw6MgZ2lhbyBk4buLY2ggxJHDoyBsxrB1XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTcO0IHBo4buPbmcgZ+G7jWkgQVBJIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSAoNTAlIGPGoSBo4buZaSB0aMOgbmggY8O0bmcpXG4gICAgICAgICAgICAgICAgICAgIFRocmVhZC5zbGVlcCgxNTAwKTsgLy8gTcO0IHBo4buPbmcgdGjhu51pIGdpYW4gZ+G7jWkgQVBJXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZG9tKCkubmV4dEJvb2xlYW4oKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICBwcml2YXRlIHZvaWQgZ2VuZXJhdGVWbnBheVFSQ29kZShKTGFiZWwgbGJsUVJDb2RlLCBTdHJpbmcgbWFWZSwgZG91YmxlIGFtb3VudCwgSkxhYmVsIGxibFN0YXR1cykge1xuICAgICAgICAvLyBU4bqhbyBTd2luZ1dvcmtlciDEkeG7gyBraMO0bmcgbMOgbSDEkcahIGdpYW8gZGnhu4duXG4gICAgICAgIFN3aW5nV29ya2VyPEltYWdlSWNvbiwgVm9pZD4gd29ya2VyID0gbmV3IFN3aW5nV29ya2VyPD4oKSB7XG4gICAgICAgICAgICBAT3ZlcnJpZGVcbiAgICAgICAgICAgIHByb3RlY3RlZCBJbWFnZUljb24gZG9JbkJhY2tncm91bmQoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVOG6oW8gdGhhbSBz4buRIGNobyBBUEkgVk5QYXlcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9UeG5SZWYgPSBtYVZlICsgU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCk7IC8vIE3DoyB0aGFtIGNoaeG6v3UgZ2lhbyBk4buLY2hcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9BbW91bnQgPSBTdHJpbmcudmFsdWVPZigobG9uZykoYW1vdW50ICogMTAwKSk7IC8vIFPhu5EgdGnhu4FuICogMTAwICjEkcahbiB24buLIHh1KVxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgdm5wX09yZGVySW5mbyA9IFwiVGhhbmggdG9hbiBob2EgZG9uIHZlIHRhdSBcIiArIG1hVmU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVVJMIEFQSSB04bqhbyBtw6MgUVIgY+G7p2EgVk5QYXkgKMSRw6J5IGzDoCBVUkwgZ2nhuqMgxJHhu4tuaCwgYuG6oW4gY+G6p24gdGhheSB0aOG6vyBi4bqxbmcgVVJMIHRo4buxYylcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIGFwaVVybCA9IFwiaHR0cHM6Ly9zYW5kYm94LnZucGF5bWVudC52bi9wYXltZW50djIvY3JlYXRlX3FyX2NvZGUuaHRtbFwiO1xuLi4uXG5cbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9TZWN1cmVIYXNoID0gaG1hY1NIQTUxMihcIllPVVJfU0VDUkVUX0tFWVwiLCBoYXNoRGF0YS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkuYXBwZW5kKFwiJnZucF9TZWN1cmVIYXNoPVwiKS5hcHBlbmQodm5wX1NlY3VyZUhhc2gpO1xuXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBwYXltZW50VXJsID0gYXBpVXJsICsgXCI/XCIgKyBxdWVyeS50b1N0cmluZygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyb25nIG3DtGkgdHLGsOG7nW5nIHRo4buxYyB04bq/LCBi4bqhbiBz4bq9IGfhu41pIEFQSSBWTlBheSDEkeG7gyBs4bqleSBVUkwgaG/hurdjIGThu68gbGnhu4d1IFFSXG4gICAgICAgICAgICAgICAgICAgIC8vIOG7niDEkcOieSwgY2jDum5nIHRhIHPhur0gdOG6oW8gbcOjIFFSIHThu6sgVVJMIHRoYW5oIHRvw6FuXG4gICAgICAgICAgICAgICAgICAgIC8vIEzGsHUgdGjDtG5nIHRpbiBuw6B5IMSR4buDIHRyYSBj4bupdSB0cuG6oW5nIHRow6FpIHRoYW5oIHRvw6FuIHNhdSBuw6B5XG4gICAgICAgICAgICAgICAgICAgIHNhdmVWbnBheVRyYW5zYWN0aW9uKHZucF9UeG5SZWYsIG1hVmUsIGFtb3VudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVOG6oW8gUVIgY29kZSB04burIFVSTCB0aGFuaCB0b8OhblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVRUkNvZGVJbWFnZShwYXltZW50VXJsLCAyMDAsIDIwMCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICAvLyBQaMawxqFuZyB0aOG7qWMgeOG7rSBsw70gc2F1IGtoaSB0aGFuaCB0b8OhbiB0aMOgbmggY8O0bmdcbiAgICBwcml2YXRlIHZvaWQgcHJvY2Vzc0FmdGVyU3VjY2Vzc2Z1bFBheW1lbnQoSkRpYWxvZyBkaWFsb2cpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIMSQw4NfVEhBTkhfVE9BTlxuICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pO1xuXG4gICAgICAgIC8vIEfhu41pIEFQSSDEkeG7gyBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6lcbiAgICAgICAgYm9vbGVhbiBzdWNjZXNzID0gZG9pVmVEQU8uY2FwTmhhdFRyYW5nVGhhaVZlKHZlVGF1SGllblRhaS5nZXRNYVZlKCksIFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pO1xuXG4gICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICBkaWFsb2cuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKFNVQ0NFU1NfVEVYVCwgZmFsc2UpO1xuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgbOG6oWkgdHLhuqFuZyB0aMOhaSB0csOqbiBnaWFvIGRp4buHblxuICAgICAgICAgICAgbGJsVHJhbmdUaGFpLnNldFRleHQodmVUYXVIaWVuVGFpLmdldFRyYW5nVGhhaSgpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgc2V0VHJhbmdUaGFpQ29sb3IobGJsVHJhbmdUaGFpLCB2ZVRhdUhpZW5UYWkuZ2V0VHJhbmdUaGFpKCkpO1xuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgbOG6oWkgYuG6o25nIGzhu4tjaCBz4butXG4gICAgICAgICAgICBEZWZhdWx0VGFibGVNb2RlbCBtb2RlbCA9IChEZWZhdWx0VGFibGVNb2RlbCkgdGJsTGljaFN1LmdldE1vZGVsKCk7XG4gICAgICAgICAgICBpbnQgcm93Q291bnQgPSBtb2RlbC5nZXRSb3dDb3VudCgpO1xuICAgICAgICAgICAgaWYgKHJvd0NvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBkw7JuZyBjdeG7kWkgY8O5bmcgKHbhu6thIHRow6ptKVxuICAgICAgICAgICAgICAgIG1vZGVsLnNldFZhbHVlQXQoVHJhbmdUaGFpVmVUYXUuREFfVEhBTkhfVE9BTiwgcm93Q291bnQgLSAxLCAzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGFtTW9pKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgIFwiS2jDtG5nIHRo4buDIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqVwiLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICB9XG4gICAgfVxuLi4uXG5cbiAgICAvLyBQaMawxqFuZyB0aOG7qWMgeOG7rSBsw70gdGhhbmggdG/DoW4gduG7m2kgdGjDtG5nIHRpbiB24buBIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhbiB2w6AgbcOjIGdpYW8gZOG7i2NoIChu4bq/dSBjw7MpXG4gICAgcHJpdmF0ZSBib29sZWFuIHh1THlUaGFuaFRvYW4oU3RyaW5nIHBodW9uZ1RodWNUaGFuaFRvYW4sIFN0cmluZyBtYUdpYW9EaWNoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBDb2RlIHjhu60gbMO9IHRoYW5oIHRvw6FuIOG7nyDEkcOieVxuICAgICAgICAgICAgLy8gTMawdSB0aMO0bmcgdGluIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhbiB2w6AgbcOjIGdpYW8gZOG7i2NoIHbDoG8gY8ahIHPhu58gZOG7ryBsaeG7h3VcblxuICAgICAgICAgICAgLy8gR2nhuqMgc+G7rSBwaMawxqFuZyB0aOG7qWMgbsOgeSBsdcO0biB0cuG6oyB24buBIHRydWUgbuG6v3Uga2jDtG5nIGPDsyBuZ2/huqFpIGzhu4dcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIljhu60gbMO9IHRoYW5oIHRvw6FuOiBcIiArIHBodW9uZ1RodWNUaGFuaFRvYW4gKyBcIiwgTcOjIGdpYW8gZOG7i2NoOiBcIiArXG4gICAgICAgICAgICAgICAgICAgIChtYUdpYW9EaWNoLmlzRW1wdHkoKSA/IFwiS2jDtG5nIGPDs1wiIDogbWFHaWFvRGljaCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGV4KSB7XG4gICAgICAgICAgICBleC5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbi4uLlxuICAgIHByaXZhdGUgYm9vbGVhbiB4dUx5VGhhbmhUb2FuKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyAxLiBUw6xtIGtow6FjaCBow6BuZyB04burIG3DoyB2w6lcbiAgICAgICAgICAgIEtoYWNoSGFuZyBraGFjaEhhbmcgPSBkb2lWZURBTy5nZXRLaGFjaEhhbmdCeU1hVmUodmVUYXVIaWVuVGFpLmdldE1hVmUoKSk7XG4gICAgICAgICAgICBpZiAoa2hhY2hIYW5nID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiS2jDtG5nIHTDrG0gdGjhuqV5IHRow7RuZyB0aW4ga2jDoWNoIGjDoG5nIVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIsSQw6MgdMOsbSB0aOG6pXkgS2hhY2hIYW5nOiBcIiArIGtoYWNoSGFuZy5nZXRNYUtoYWNoSGFuZygpKTtcblxuICAgICAgICAgICAgLy8gMi4gVOG6oW8gaMOzYSDEkcahbiBt4bubaVxuICAgICAgICAgICAgSG9hRG9uIGhvYURvbiA9IG5ldyBIb2FEb24oKTtcbiAgICAgICAgICAgIFN0cmluZyBtYUhEID0gZ2VuZXJhdGVNYUhEKCk7XG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJHZW5lcmF0ZWQgTWFIRDogXCIgKyBtYUhEKTtcbiAgICAgICAgICAgIGhvYURvbi5zZXRNYUhEKG1hSEQpO1xuICAgICAgICAgICAgaG9hRG9uLnNldE5nYXlMYXAoTG9jYWxEYXRlVGltZS5ub3coKSk7XG4gICAgICAgICAgICBob2FEb24uc2V0VGllbkdpYW0oZ2lhVmVCYW5EYXUgLSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSk7XG4gICAgICAgICAgICBob2FEb24uc2V0VG9uZ1RpZW4odmVUYXVIaWVuVGFpLmdldEdpYVZlKCkpO1xuICAgICAgICAgICAgaG9hRG9uLnNldEtoYWNoSGFuZyhraGFjaEhhbmcpO1xuXG4gICAgICAgICAgICAvLyBEZWJ1Z2dpbmcgdGhlIE5oYW5WaWVuIHJlZmVyZW5jZVxuICAgICAgICAgICAgaWYgKG5oYW5WaWVuUGFuZWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkVSUk9SOiBuaGFuVmllblBhbmVsIGlzIG51bGxcIik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIlRoaeG6v3UgdGjDtG5nIHRpbiBuaMOibiB2acOqbiFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJOaGFuVmllbiBpbmZvOiBcIiArIG5oYW5WaWVuUGFuZWwuZ2V0Q2xhc3MoKS5nZXROYW1lKCkpO1xuICAgICAgICAgICAgaG9hRG9uLnNldE52KG5oYW5WaWVuUGFuZWwpO1xuXG4gICAgICAgICAgICAvLyBHZXQgTG9haUhvYURvbiBhbmQgdmVyaWZ5IGl0IGV4aXN0c1xuICAgICAgICAgICAgTG9haUhvYURvbiBsb2FpSG9hRG9uID0gbG9haUhvYURvbkRBTy5maW5kQnlJZChcIkxIRDAwMVwiKTtcbiAgICAgICAgICAgIGlmIChsb2FpSG9hRG9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJFUlJPUjogS2jDtG5nIHTDrG0gdGjhuqV5IGxv4bqhaSBow7NhIMSRxqFuIExIRDAwMVwiKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiS2jDtG5nIHTDrG0gdGjhuqV5IGxv4bqhaSBow7NhIMSRxqFuIVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIkZvdW5kIExvYWlIb2FEb246IFwiICsgbG9haUhvYURvbi5nZXRNYUxvYWlIb2FEb24oKSk7XG4gICAgICAgICAgICBob2FEb24uc2V0TG9haUhvYURvbihsb2FpSG9hRG9uKTtcblxuICAgICAgICAgICAgLy8gMy4gTMawdSBow7NhIMSRxqFuXG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJBdHRlbXB0aW5nIHRvIHNhdmUgSG9hRG9uLi4uXCIpO1xuICAgICAgICAgICAgYm9vbGVhbiBzYXZlZEhvYURvbiA9IGhvYURvbkRBTy5zYXZlSG9hRG9uKGhvYURvbik7XG4gICAgICAgICAgICBpZiAoIXNhdmVkSG9hRG9uKSB7XG4gICAgICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiRmFpbGVkIHRvIHNhdmUgSG9hRG9uIVwiKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiS2jDtG5nIHRo4buDIGzGsHUgaMOzYSDEkcahbiFcIik7XG4gICAgICAgICAgICB9XG4uLi5cblxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiRXJyb3IgaW4geHVMeVRoYW5oVG9hbjogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSB44butIGzDvSB0aGFuaCB0b8OhbjogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIFN0cmluZyBnZW5lcmF0ZU1hSEQoKSB7XG4gICAgICAgIC8vIEZvcm1hdDogSEQgKyB5eXl5TU1kZCArIDQgc+G7kSByYW5kb21cbiAgICAgICAgU2ltcGxlRGF0ZUZvcm1hdCBzZGYgPSBuZXcgU2ltcGxlRGF0ZUZvcm1hdChcInl5eXlNTWRkXCIpO1xuICAgICAgICBTdHJpbmcgZGF0ZVBhcnQgPSBzZGYuZm9ybWF0KG5ldyBEYXRlKCkpO1xuICAgICAgICBTdHJpbmcgcmFuZG9tUGFydCA9IFN0cmluZy5mb3JtYXQoXCIlMDRkXCIsIG5ldyBSYW5kb20oKS5uZXh0SW50KDEwMDAwKSk7XG4gICAgICAgIHJldHVybiBcIkhEXCIgKyBkYXRlUGFydCArIHJhbmRvbVBhcnQ7XG4gICAgfVxufS4uLlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiOTVlNGZlOGEtMzZlOS00NjQ0LWJlN2UtMDEwYjA5NTFiZDI2O3Rvb2x1X3ZydHhfMDExMWM4QkpLZVVIaHVFanlvZUdjZk1qIjp7InBoYXNlIjo2LCJyZXN1bHQiOnsidGV4dCI6IlJhbiBpbnRvIFVua25vd24gZXJyb3Igd2hpbGUgdHJ5aW5nIHRvIHJlYWQgUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhIiwiaXNFcnJvciI6dHJ1ZSwicmVxdWVzdElkIjoiIn19LCI4ZjRiZTQ4Yy1lZTUxLTQzZDctYWJhNC0wYjIzYTE3NmVlOGQ7dG9vbHVfdnJ0eF8wMVcxRlVFN3RTb2gzQmlhdjduYjFxYUEiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9Eb2lWZURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGRhby5Eb2lWZURBTztcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eU1hbmFnZXI7XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlUcmFuc2FjdGlvbjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLk5vUmVzdWx0RXhjZXB0aW9uO1xuaW1wb3J0IG1vZGVsLio7XG5pbXBvcnQgdXRpbC5KUEFVdGlsO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEucm1pLnNlcnZlci5VbmljYXN0UmVtb3RlT2JqZWN0O1xuaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGU7XG5pbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuVVVJRDtcblxucHVibGljIGNsYXNzIERvaVZlREFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBEb2lWZURBTyB7XG5cbiAgICBwdWJsaWMgRG9pVmVEQU9JbXBsKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIC8vIEtow7RuZyBraOG7n2kgdOG6oW8gRW50aXR5TWFuYWdlciB0cm9uZyBjb25zdHJ1Y3RvclxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBWZVRhdSBnZXRWZVRhdShTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgVmVUYXUgdmVUYXUgPSBudWxsO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKT0lOIEZFVENIIMSR4buDIHThuqNpIHRyxrDhu5tjIGThu68gbGnhu4d1IGxpw6puIHF1YW4gxJHhu4MgdHLDoW5oIGzhu5dpIExhenlJbml0aWFsaXphdGlvbkV4Y2VwdGlvblxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCB2dCBGUk9NIFZlVGF1IHZ0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQubGljaFRyaW5oVGF1IGx0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmNob05nb2kgY24gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5raHV5ZW5NYWkga20gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBsdHQudGF1IHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB0LnR1eWVuVGF1IHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2dC5tYVZlID0gOmlkXCI7XG5cbiAgICAgICAgICAgIHZlVGF1ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJpZFwiLCBpZClcbiAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuLi4uXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIHTDrG0gdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIHTDrG0gdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2ZVRhdTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBkb2lWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxWZVRhdT4gZ2V0VmVUYXVCeVRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgTGlzdDxWZVRhdT4gbGlzdCA9IG5ldyBBcnJheUxpc3Q8PigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKT0lOIEZFVENIIMSR4buDIHThuqNpIHRyxrDhu5tjIGThu68gbGnhu4d1IGxpw6puIHF1YW5cbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgdnQgRlJPTSBWZVRhdSB2dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmxpY2hUcmluaFRhdSBsdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5jaG9OZ29pIGNuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQua2h1eWVuTWFpIGttIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggbHR0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdC50dXllblRhdSB0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdnQudHJhbmdUaGFpID0gOnRyYW5nVGhhaVwiO1xuXG4gICAgICAgICAgICBsaXN0ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlcIiwgdHJhbmdUaGFpKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0UmVzdWx0TGlzdCgpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggdsOpIHRoZW8gdHLhuqFuZyB0aMOhaTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIHbDqSB0aGVvIHRy4bqhbmcgdGjDoWlcIiwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiB0ZXN0Q29ubmVjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlbS5jcmVhdGVRdWVyeShcIlNFTEVDVCAxXCIpLmdldFJlc3VsdExpc3QoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2nhu4NtIHRyYSBr4bq/dCBu4buRaTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VHJhbmdUaGFpVmVUYXU+IGdldEFsbFRyYW5nVGhhaVZlKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIExpc3Q8VHJhbmdUaGFpVmVUYXU+IHRyYW5nVGhhaUxpc3QgPSBuZXcgQXJyYXlMaXN0PD4oKTtcblxuICAgICAgICAvLyBUaMOqbSB04bqldCBj4bqjIGPDoWMgZ2nDoSB0cuG7iyBlbnVtIFRyYW5nVGhhaVZlVGF1XG4gICAgICAgIGZvciAoVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpIDogVHJhbmdUaGFpVmVUYXUudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHRyYW5nVGhhaUxpc3QuYWRkKHRyYW5nVGhhaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbmdUaGFpTGlzdDtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBkYXRWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuLi4uXG5cbiAgICAgICAgICAgIC8vIDUuIENoZWNrIGlmIHRoZSBzZWF0IGlzIGF2YWlsYWJsZVxuICAgICAgICAgICAgaWYgKGNob05nb2kuaXNUaW5oVHJhbmcoKSkge1xuICAgICAgICAgICAgICAgIC8vIFVzaW5nIEpQUUwgdG8gY2hlY2sgaWYgdGhpcyBzZWF0IGlzIGFscmVhZHkgb2NjdXBpZWQgaW4gdGhpcyBzY2hlZHVsZVxuICAgICAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgQ09VTlQodikgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdi5jaG9OZ29pLm1hQ2hvID0gOm1hQ2hvIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQU5EIHYubGljaFRyaW5oVGF1Lm1hTGljaCA9IDptYUxpY2ggXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJBTkQgdi50cmFuZ1RoYWkgIT0gOnRyYW5nVGhhaUh1eVwiO1xuXG4gICAgICAgICAgICAgICAgTG9uZyBjb3VudCA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIExvbmcuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFDaG9cIiwgbWFDaG9OZ29pKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hTGljaFwiLCBtYUxpY2hUcmluaClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlIdXlcIiwgVHJhbmdUaGFpVmVUYXUuREFfVFJBKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gNi4gQ2hlY2sgaWYgdGhlIHNlYXQgYmVsb25ncyB0byB0aGUgdHJhaW4gaW4gdGhpcyBzY2hlZHVsZVxuICAgICAgICAgICAgVGF1IHRhdSA9IGxpY2hUcmluaFRhdS5nZXRUYXUoKTtcbiAgICAgICAgICAgIGlmICh0YXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJM4buLY2ggdHLDrG5oIGtow7RuZyBjw7MgdGjDtG5nIHRpbiB0w6B1XCIpO1xuICAgICAgICAgICAgfVxuLi4uXG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBjaGkgdGnhur90IGtoaSDEkeG6t3QgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIMSR4bq3dCB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gaHV5VmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB2w6kgY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgVmVUYXUgdmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCBtYVZlKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSB2w6kgKGNo4buJIGjhu6d5IMSRxrDhu6NjIHbDqSDhu58gdHLhuqFuZyB0aMOhaSBDSE9fWEFDX05IQU4gaG/hurdjIERBX1RIQU5IX1RPQU4pXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0VHJhbmdUaGFpKCkgIT0gVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOICYmXG4gICAgICAgICAgICAgICAgICAgIHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2nhuqNpIHBow7NuZyBjaOG7lyBuZ+G7k2lcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRDaG9OZ29pKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIENob05nb2kgY2hvTmdvaSA9IHZlVGF1LmdldENob05nb2koKTtcbiAgICAgICAgICAgICAgICBjaG9OZ29pLnNldFRpbmhUcmFuZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgZW0ubWVyZ2UoY2hvTmdvaSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqSB0aMOgbmggREFfVFJBXG4gICAgICAgICAgICB2ZVRhdS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuREFfVFJBKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKHZlVGF1KTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gdGhhbmhUb2FuVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB2w6kgY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgVmVUYXUgdmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCBtYVZlKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSB2w6kgKGNo4buJIHRoYW5oIHRvw6FuIMSRxrDhu6NjIHbDqSDhu58gdHLhuqFuZyB0aMOhaSBDSE9fWEFDX05IQU4pXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0VHJhbmdUaGFpKCkgIT0gVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqSB0aMOgbmggREFfVEhBTkhfVE9BTlxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pO1xuICAgICAgICAgICAgZW0ubWVyZ2UodmVUYXUpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBjYXBOaGF0VHJhbmdUaGFpVmUoU3RyaW5nIG1hVmUsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHbDqSBjw7MgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICBWZVRhdSB2ZVRhdSA9IGVtLmZpbmQoVmVUYXUuY2xhc3MsIG1hVmUpO1xuICAgICAgICAgICAgaWYgKHZlVGF1ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpXG4gICAgICAgICAgICB2ZVRhdS5zZXRUcmFuZ1RoYWkodHJhbmdUaGFpKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKHZlVGF1KTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gRm9yIG5hdGl2ZSBxdWVyaWVzIHdpdGggbmFtZWQgcGFyYW1ldGVycywgdXNlIDpuYW1lIG5vdGF0aW9uXG4gICAgICAgICAgICBTdHJpbmcgbmF0aXZlUXVlcnkgPVxuICAgICAgICAgICAgICAgICAgICBcIlNFTEVDVCBraC4qIEZST00ga2hhY2hoYW5nIGtoIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkpPSU4gaG9hZG9uIGhkIE9OIGhkLm1hX2toYWNoX2hhbmcgPSBraC5tYV9raGFjaF9oYW5nIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkpPSU4gY2hpdGlldF9ob2Fkb24gY3RoZCBPTiBjdGhkLm1hX2hkID0gaGQubWFfaGQgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgY3RoZC5tYV92ZSA9ID9cIjtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBraGFjaEhhbmcgPSAoS2hhY2hIYW5nKSBlbS5jcmVhdGVOYXRpdmVRdWVyeShuYXRpdmVRdWVyeSwgS2hhY2hIYW5nLmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcigxLCBtYVZlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIHJlbGF0ZWQgZGF0YSBpcyBsb2FkZWQgaWYgbmVlZGVkXG4gICAgICAgICAgICAgICAgaWYgKGtoYWNoSGFuZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGtoYWNoSGFuZy5nZXRNYUtoYWNoSGFuZygpOyAvLyBUcmlnZ2VyIGxvYWRpbmdcblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB5b3UgbmVlZCB0byBsb2FkIHRoZSBsb2FpS2hhY2hIYW5nIHJlbGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChraGFjaEhhbmcuZ2V0TG9haUtoYWNoSGFuZygpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtoYWNoSGFuZy5nZXRMb2FpS2hhY2hIYW5nKCkuZ2V0TWFMb2FpS2hhY2hIYW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKE5vUmVzdWx0RXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAvLyBObyBjdXN0b21lciBmb3VuZCBmb3IgdGhpcyB0aWNrZXRcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9DaG9OZ29pRG9pVmVEQU9JbXBsLmphdmFcbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKT0lOIEZFVENIIMSR4buDIHThuqNpIHRyxrDhu5tjIGThu68gbGnhu4d1IGxpw6puIHF1YW5cbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgRElTVElOQ1QgYyBGUk9NIENob05nb2kgYyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGMubG9haUNobyBsYyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgYy50b2FUYXUubWFUb2EgPSA6bWFUb2FUYXVcIjtcblxuICAgICAgICAgICAgZHNDaG9OZ29pID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgQ2hvTmdvaS5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hVG9hVGF1XCIsIG1hVG9hVGF1KVxuICAgICAgICAgICAgICAgICAgICAuZ2V0UmVzdWx0TGlzdCgpO1xuXG4gICAgICAgICAgICAvLyDEkOG6o20gYuG6o28gY8OhYyB0aHXhu5ljIHTDrW5oIGxhenkgxJHGsOG7o2MgdOG6o2lcbiAgICAgICAgICAgIGZvciAoQ2hvTmdvaSBjaG9OZ29pIDogZHNDaG9OZ29pKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNob05nb2kuZ2V0TG9haUNobygpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hvTmdvaS5nZXRMb2FpQ2hvKCkuZ2V0VGVuTG9haSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCBjaOG7lyBuZ+G7k2k6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRzQ2hvTmdvaTtcbiAgICB9XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCBDT1VOVCh2KSBGUk9NIFZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYuY2hvTmdvaS5tYUNobyA9IDptYUNobyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYudHJhbmdUaGFpIE5PVCBJTiAoOnRyYW5nVGhhaURhVHJhLCA6dHJhbmdUaGFpRGFEb2kpXCI7XG5cbiAgICAgICAgICAgIC8vIE7hur91IGPDsyBtw6MgdsOpIGPhuqduIGxv4bqhaSB0cuG7qywgdGjDqm0gxJFp4buBdSBraeG7h25cbiAgICAgICAgICAgIGlmIChtYVZlTG9haVRydSAhPSBudWxsICYmICFtYVZlTG9haVRydS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBqcHFsICs9IFwiIEFORCB2Lm1hVmUgIT0gOm1hVmVMb2FpVHJ1XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFF1ZXJ5IHF1ZXJ5ID0gZW0uY3JlYXRlUXVlcnkoanBxbCk7XG4gICAgICAgICAgICBxdWVyeS5zZXRQYXJhbWV0ZXIoXCJtYUNob1wiLCBtYUNobylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcInRyYW5nVGhhaURhVHJhXCIsIFRyYW5nVGhhaVZlVGF1LkRBX1RSQSlcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcInRyYW5nVGhhaURhRG9pXCIsIFRyYW5nVGhhaVZlVGF1LkRBX0RPSSk7XG5cbiAgICAgICAgICAgIGlmIChtYVZlTG9haVRydSAhPSBudWxsICYmICFtYVZlTG9haVRydS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBxdWVyeS5zZXRQYXJhbWV0ZXIoXCJtYVZlTG9haVRydVwiLCBtYVZlTG9haVRydSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIExvbmcgY291bnQgPSAoTG9uZykgcXVlcnkuZ2V0U2luZ2xlUmVzdWx0KCk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGNvdW50ID4gMDtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBraeG7g20gdHJhIGNo4buXIG5n4buTaSDEkcOjIMSR4bq3dCB0csOqbiBo4buHIHRo4buRbmc6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8U3RyaW5nPiBsYXlEYW5oU2FjaExpY2hUcmluaERhRGF0Q2hvKFN0cmluZyBtYUNobykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL1RyYUN1dVZlREFPSW1wbC5qYXZhXG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSlBRTCB24bubaSBKT0lOIEZFVENIIMSR4buDIHThuqNpIHThuqV0IGPhuqMgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dCB0cm9uZyBt4buZdCBjw6J1IHF1ZXJ5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHYgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYubGljaFRyaW5oVGF1IGx0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5jaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBjLnRvYVRhdSB0b2EgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB0b2EubG9haVRvYSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdi5tYVZlID0gOm1hVmVcIjtcblxuICAgICAgICAgICAgVHlwZWRRdWVyeTxWZVRhdT4gcXVlcnkgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBWZVRhdS5jbGFzcyk7XG4gICAgICAgICAgICBxdWVyeS5zZXRQYXJhbWV0ZXIoXCJtYVZlXCIsIG1hVmUpO1xuXG4gICAgICAgICAgICAvLyBnZXRTaW5nbGVSZXN1bHQoKSBjw7MgdGjhu4MgbsOpbSBOb1Jlc3VsdEV4Y2VwdGlvbiBu4bq/dSBraMO0bmcgdMOsbSB0aOG6pXkga+G6v3QgcXXhuqNcbiAgICAgICAgICAgIC8vIG7Dqm4gY2jDum5nIHRhIGPhuqduIGLhuq90IG5nb+G6oWkgbOG7hyBuw6B5IHbDoCB44butIGzDvVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2ZVRhdSA9IHF1ZXJ5LmdldFNpbmdsZVJlc3VsdCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoamFrYXJ0YS5wZXJzaXN0ZW5jZS5Ob1Jlc3VsdEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICAgICAgLy8gS2jDtG5nIHTDrG0gdGjhuqV5IHbDqSwgdHLhuqMgduG7gSBudWxsXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4uLi5cblxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIHTDrG0gZGFuaCBzw6FjaCB2w6kgdMOgdSB0aGVvIG3DozogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSB0w6xtIGRhbmggc8OhY2ggdsOpIHTDoHUgdGhlbyBtw6NcIiwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGFuaFNhY2hWZVRhdTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgQ2hpVGlldEhvYURvbiB0aW1DaGlUaWV0SG9hRG9uVGhlb01hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIENoaVRpZXRIb2FEb24gY2hpVGlldEhvYURvbiA9IG51bGw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpQUUwgxJHhu4MgbOG6pXkgY2hpIHRp4bq/dCBow7NhIMSRxqFuIG3hu5tpIG5o4bqldCB0aGVvIG5nw6B5IGzhuq1wXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIGMgRlJPTSBDaGlUaWV0SG9hRG9uIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggYy5ob2FEb24gaCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCBjLnZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGMuaWQubWFWZSA9IDptYVZlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJPUkRFUiBCWSBoLm5nYXlMYXAgREVTQ1wiOyAgLy8gU+G6r3AgeOG6v3AgdGhlbyBuZ8OgeSBs4bqtcCBow7NhIMSRxqFuIG3hu5tpIG5o4bqldFxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL1RyYVZlREFPSW1wbC5qYXZhXG5wYWNrYWdlIGRhby5pbXBsO1xuXG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlNYW5hZ2VyO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuTm9SZXN1bHRFeGNlcHRpb247XG5pbXBvcnQgdXRpbC5KUEFVdGlsO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEucm1pLnNlcnZlci5VbmljYXN0UmVtb3RlT2JqZWN0O1xuXG5wdWJsaWMgY2xhc3MgVHJhVmVEQU9JbXBsIGV4dGVuZHMgVW5pY2FzdFJlbW90ZU9iamVjdCBpbXBsZW1lbnRzIGRhby5UcmFWZURBTyB7XG4gICAgcHJpdmF0ZSBFbnRpdHlNYW5hZ2VyIGVtO1xuXG4gICAgcHVibGljIFRyYVZlREFPSW1wbCgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICB0aGlzLmVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFN0cmluZyBnZXRUZW5UdXllbkJ5TWFWZShTdHJpbmcgbWFWZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlwiXCJcbiAgICAgICAgICAgIFNFTEVDVCB0dC50ZW5UdXllblxuICAgICAgICAgICAgRlJPTSBWZVRhdSB2dFxuICAgICAgICAgICAgSk9JTiB2dC5saWNoVHJpbmhUYXUgbHR0XG4gICAgICAgICAgICBKT0lOIGx0dC50YXUgdFxuICAgICAgICAgICAgSk9JTiB0LnR1eWVuVGF1IHR0XG4gICAgICAgICAgICBXSEVSRSB2dC5tYVZlID0gOm1hVmVcbiAgICAgICAgXCJcIlwiO1xuXG4gICAgICAgICAgICByZXR1cm4gZW0uY3JlYXRlUXVlcnkoanBxbCwgU3RyaW5nLmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFWZVwiLCBtYVZlKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0U2luZ2xlUmVzdWx0KCk7XG4gICAgICAgIH0gY2F0Y2ggKE5vUmVzdWx0RXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBLaMO0bmcgdMOsbSB0aOG6pXlcbiAgICAgICAgfVxuICAgIH1cblxufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL1RvYVRhdURvaVZlREFPSW1wbC5qYXZhXG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gVOG7kWkgxrB1IHF1ZXJ5IMSR4buDIGNo4buJIGzhuqV5IGThu68gbGnhu4d1IGPhuqduIHRoaeG6v3RcbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgRElTVElOQ1QgdCBGUk9NIFRvYVRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdC5sb2FpVG9hIGxjIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdC50YXUgdGEgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHQudGF1Lm1hVGF1ID0gOm1hVGF1XCI7XG5cbiAgICAgICAgICAgIExpc3Q8VG9hVGF1PiBkc1RvYVRhdSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFRvYVRhdS5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hVGF1XCIsIG1hVGF1KVxuICAgICAgICAgICAgICAgICAgICAuZ2V0UmVzdWx0TGlzdCgpO1xuXG4gICAgICAgICAgICAvLyBDaOG7iSB04bqjaSBuaOG7r25nIHRodeG7mWMgdMOtbmggdGjhu7FjIHPhu7EgY+G6p24gdGhp4bq/dFxuICAgICAgICAgICAgZm9yIChUb2FUYXUgdG9hVGF1IDogZHNUb2FUYXUpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9hVGF1LmdldExvYWlUb2EoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYVRhdS5nZXRMb2FpVG9hKCkuZ2V0VGVuTG9haSgpO1xuICAgICAgICAgICAgICAgICAgICB0b2FUYXUuZ2V0TG9haVRvYSgpLmdldE1hTG9haSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodG9hVGF1LmdldFRhdSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hVGF1LmdldFRhdSgpLmdldE1hVGF1KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcblxuICAgICAgICAgICAgLy8gTMawdSBr4bq/dCBxdeG6oyB2w6BvIGNhY2hlXG4gICAgICAgICAgICB1cGRhdGVDYWNoZShtYVRhdSwgZHNUb2FUYXUpO1xuXG4gICAgICAgICAgICByZXR1cm4gZHNUb2FUYXU7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9MaWNoVHJpbmhUYXVEQU9JbXBsLmphdmFcbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0ci5iZWdpbigpO1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSk9JTiBGRVRDSCDEkeG7gyB0csOhbmggbOG7l2kgTGF6eUluaXRpYWxpemF0aW9uRXhjZXB0aW9uXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIGx0dCBGUk9NIExpY2hUcmluaFRhdSBsdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggbHR0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGx0dC5uZ2F5RGkgPSA6ZGF0ZVwiO1xuXG4gICAgICAgICAgICBsaXN0ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgTGljaFRyaW5oVGF1LmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwiZGF0ZVwiLCBkYXRlKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0UmVzdWx0TGlzdCgpO1xuXG4gICAgICAgICAgICB0ci5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0ciAhPSBudWxsICYmIHRyLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0ci5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggTGljaFRyaW5oVGF1IHRoZW8gbmfDoHk6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCBMaWNoVHJpbmhUYXUgdGhlbyBuZ8OgeVwiLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvVmVUYXVEQU9JbXBsLmphdmFcbi4uLlxuXG5wdWJsaWMgY2xhc3MgVmVUYXVEQU9JbXBsIGV4dGVuZHMgVW5pY2FzdFJlbW90ZU9iamVjdCBpbXBsZW1lbnRzIFZlVGF1REFPIHtcbiAgICBwdWJsaWMgVmVUYXVEQU9JbXBsKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG5cbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxWZVRhdT4gZ2V0QWxsTGlzdCgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgTGlzdDxWZVRhdT4gbGlzdCA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuICAgICAgICAgICAgbGlzdCA9IGVtLmNyZWF0ZVF1ZXJ5KFwiU0VMRUNUIHZ0IEZST00gVmVUYXUgdnRcIiwgVmVUYXUuY2xhc3MpLmdldFJlc3VsdExpc3QoKTtcbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIFZlVGF1XCIpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgVmVUYXUgZ2V0QnlJZChTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIHJldHVybiBlbS5maW5kKFZlVGF1LmNsYXNzLCBpZCk7XG4gICAgfVxuLi4uXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJhMzg2MzQyZS0yM2NiLTRmNmUtOGY3MC1iZmQ1MzI5N2NkYTA7dG9vbHVfdnJ0eF8wMUVIckNjc1ZSZnBGQUJ0b2RyRkVUNVAiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9Eb2lWZURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGRhby5Eb2lWZURBTztcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eU1hbmFnZXI7XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlUcmFuc2FjdGlvbjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLk5vUmVzdWx0RXhjZXB0aW9uO1xuaW1wb3J0IG1vZGVsLio7XG5pbXBvcnQgdXRpbC5KUEFVdGlsO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEucm1pLnNlcnZlci5VbmljYXN0UmVtb3RlT2JqZWN0O1xuaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGU7XG5pbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuVVVJRDtcblxucHVibGljIGNsYXNzIERvaVZlREFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBEb2lWZURBTyB7XG5cbiAgICBwdWJsaWMgRG9pVmVEQU9JbXBsKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIC8vIEtow7RuZyBraOG7n2kgdOG6oW8gRW50aXR5TWFuYWdlciB0cm9uZyBjb25zdHJ1Y3RvclxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBWZVRhdSBnZXRWZVRhdShTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgVmVUYXUgdmVUYXUgPSBudWxsO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKT0lOIEZFVENIIMSR4buDIHThuqNpIHRyxrDhu5tjIGThu68gbGnhu4d1IGxpw6puIHF1YW4gxJHhu4MgdHLDoW5oIGzhu5dpIExhenlJbml0aWFsaXphdGlvbkV4Y2VwdGlvblxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCB2dCBGUk9NIFZlVGF1IHZ0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQubGljaFRyaW5oVGF1IGx0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmNob05nb2kgY24gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5raHV5ZW5NYWkga20gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBsdHQudGF1IHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB0LnR1eWVuVGF1IHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2dC5tYVZlID0gOmlkXCI7XG5cbiAgICAgICAgICAgIHZlVGF1ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJpZFwiLCBpZClcbiAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuXG4gICAgICAgICAgICAvLyDEkOG6o20gYuG6o28gZOG7ryBsaeG7h3UgxJHDoyDEkcaw4bujYyB04bqjaSDEkeG6p3kgxJHhu6dcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRMaWNoVHJpbmhUYXUoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmVUYXUuZ2V0TGljaFRyaW5oVGF1KCkuZ2V0TWFMaWNoKCk7XG4gICAgICAgICAgICAgICAgaWYgKHZlVGF1LmdldExpY2hUcmluaFRhdSgpLmdldFRhdSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmVUYXUuZ2V0TGljaFRyaW5oVGF1KCkuZ2V0VGF1KCkuZ2V0TWFUYXUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlVGF1LmdldExpY2hUcmluaFRhdSgpLmdldFRhdSgpLmdldFR1eWVuVGF1KCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVUYXUuZ2V0TGljaFRyaW5oVGF1KCkuZ2V0VGF1KCkuZ2V0VHV5ZW5UYXUoKS5nZXRHYURpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZVRhdS5nZXRMaWNoVHJpbmhUYXUoKS5nZXRUYXUoKS5nZXRUdXllblRhdSgpLmdldEdhRGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRDaG9OZ29pKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZlVGF1LmdldENob05nb2koKS5nZXRNYUNobygpO1xuICAgICAgICAgICAgICAgIHZlVGF1LmdldENob05nb2koKS5nZXRHaWFUaWVuKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRLaHV5ZW5NYWkoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmVUYXUuZ2V0S2h1eWVuTWFpKCkuZ2V0TWFLTSgpO1xuICAgICAgICAgICAgICAgIHZlVGF1LmdldEtodXllbk1haSgpLmdldENoaWV0S2hhdSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoTm9SZXN1bHRFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgLy8gS2jDtG5nIHTDrG0gdGjhuqV5IHbDqVxuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIHTDrG0gdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIHTDrG0gdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2ZVRhdTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBkb2lWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHbDqSBjw7MgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICBWZVRhdSBleGlzdGluZ1ZlID0gZW0uZmluZChWZVRhdS5jbGFzcywgdmVUYXUuZ2V0TWFWZSgpKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZ1ZlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHbDqSAoY2jhu4kgxJHhu5VpIMSRxrDhu6NjIHbDqSBEQV9USEFOSF9UT0FOKVxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nVmUuZ2V0VHJhbmdUaGFpKCkgIT0gVHJhbmdUaGFpVmVUYXUuREFfVEhBTkhfVE9BTikge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMxrB1IHRow7RuZyB0aW4gY2jhu5cgbmfhu5NpIHbDoCBs4buLY2ggdHLDrG5oIGPFqVxuICAgICAgICAgICAgQ2hvTmdvaSBjaG9OZ29pQ3UgPSBleGlzdGluZ1ZlLmdldENob05nb2koKTtcbiAgICAgICAgICAgIExpY2hUcmluaFRhdSBsaWNoVHJpbmhDdSA9IGV4aXN0aW5nVmUuZ2V0TGljaFRyaW5oVGF1KCk7XG4uLi5cblxuICAgICAgICAgICAgICAgIGlmICghZ2l1Tmd1eWVuQ2hvVmFMaWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgY2jhu5cgbmfhu5NpIG3hu5tpIGPDsyBraOG6oyBk4bulbmcga2jDtG5nXG4gICAgICAgICAgICAgICAgICAgIENob05nb2kgY2hvTmdvaSA9IGVtLmZpbmQoQ2hvTmdvaS5jbGFzcywgbWFDaG9OZ29pKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNob05nb2kgPT0gbnVsbCB8fCAhY2hvTmdvaS5pc1RpbmhUcmFuZygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkNo4buXIG5n4buTaSBraMO0bmcga2jhuqMgZOG7pW5nIGhv4bq3YyDEkWFuZyBz4butYSBjaOG7r2EuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSBjaOG7lyBuZ+G7k2kgbeG7m2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgdHJvbmcgbOG7i2NoIHRyw6xuaCBt4bubaSBjaMawYVxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIENPVU5UKHYpIEZST00gVmVUYXUgdiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2LmNob05nb2kubWFDaG8gPSA6bWFDaG8gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQU5EIHYubGljaFRyaW5oVGF1Lm1hTGljaCA9IDptYUxpY2hUcmluaCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJBTkQgdi5tYVZlICE9IDptYVZlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFORCB2LnRyYW5nVGhhaSBOT1QgSU4gKDp0cmFuZ1RoYWlEYVRyYSlcIjtcblxuICAgICAgICAgICAgICAgICAgICBMb25nIGNvdW50ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgTG9uZy5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFDaG9cIiwgbWFDaG9OZ29pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYUxpY2hUcmluaFwiLCBtYUxpY2hUcmluaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFWZVwiLCB2ZVRhdS5nZXRNYVZlKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcInRyYW5nVGhhaURhVHJhXCIsIFRyYW5nVGhhaVZlVGF1LkRBX1RSQSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0U2luZ2xlUmVzdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmguXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdGjDtG5nIHRpbiBjxqEgYuG6o25cbiAgICAgICAgICAgIGV4aXN0aW5nVmUuc2V0VGVuS2hhY2hIYW5nKHZlVGF1LmdldFRlbktoYWNoSGFuZygpKTtcbiAgICAgICAgICAgIGV4aXN0aW5nVmUuc2V0R2lheVRvKHZlVGF1LmdldEdpYXlUbygpKTtcbiAgICAgICAgICAgIGV4aXN0aW5nVmUuc2V0TmdheURpKHZlVGF1LmdldE5nYXlEaSgpKTtcbiAgICAgICAgICAgIGV4aXN0aW5nVmUuc2V0RG9pVHVvbmcodmVUYXUuZ2V0RG9pVHVvbmcoKSk7XG4gICAgICAgICAgICBleGlzdGluZ1ZlLnNldFRyYW5nVGhhaSh2ZVRhdS5nZXRUcmFuZ1RoYWkoKSk7XG4gICAgICAgICAgICBleGlzdGluZ1ZlLnNldEdpYVZlKHZlVGF1LmdldEdpYVZlKCkpO1xuXG4gICAgICAgICAgICAvLyBYw7NhIGLhu48gbGnDqm4ga+G6v3QgduG7m2kgY2jhu5cgbmfhu5NpIGhp4buHbiB04bqhaVxuICAgICAgICAgICAgZXhpc3RpbmdWZS5zZXRDaG9OZ29pKG51bGwpO1xuICAgICAgICAgICAgZW0uZmx1c2goKTsgLy8gxJDhuql5IHRoYXkgxJHhu5VpIHh14buRbmcgREJcblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IGzhu4tjaCB0csOsbmggdsOgIGtodXnhur9uIG3Do2lcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRMaWNoVHJpbmhUYXUoKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgTGljaFRyaW5oVGF1IGxpY2hUcmluaFRhdSA9IGVtLmZpbmQoTGljaFRyaW5oVGF1LmNsYXNzLCB2ZVRhdS5nZXRMaWNoVHJpbmhUYXUoKS5nZXRNYUxpY2goKSk7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdWZS5zZXRMaWNoVHJpbmhUYXUobGljaFRyaW5oVGF1KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldEtodXllbk1haSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBLaHV5ZW5NYWkga2h1eWVuTWFpID0gZW0uZmluZChLaHV5ZW5NYWkuY2xhc3MsIHZlVGF1LmdldEtodXllbk1haSgpLmdldE1hS00oKSk7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdWZS5zZXRLaHV5ZW5NYWkoa2h1eWVuTWFpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdWZS5zZXRLaHV5ZW5NYWkobnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBjaOG7lyBuZ+G7k2kgbeG7m2lcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRDaG9OZ29pKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIENob05nb2kgY2hvTmdvaSA9IGVtLmZpbmQoQ2hvTmdvaS5jbGFzcywgdmVUYXUuZ2V0Q2hvTmdvaSgpLmdldE1hQ2hvKCkpO1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nVmUuc2V0Q2hvTmdvaShjaG9OZ29pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZW0ubWVyZ2UoZXhpc3RpbmdWZSk7XG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSDEkeG7lWkgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIMSR4buVaSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VmVUYXU+IGdldFZlVGF1QnlUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIExpc3Q8VmVUYXU+IGxpc3QgPSBuZXcgQXJyYXlMaXN0PD4oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB0csaw4bubYyBk4buvIGxp4buHdSBsacOqbiBxdWFuXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHZ0IEZST00gVmVUYXUgdnQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5saWNoVHJpbmhUYXUgbHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQuY2hvTmdvaSBjbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmtodXllbk1haSBrbSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGx0dC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHZ0LnRyYW5nVGhhaSA9IDp0cmFuZ1RoYWlcIjtcblxuICAgICAgICAgICAgbGlzdCA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpXCIsIHRyYW5nVGhhaSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIHbDqSB0aGVvIHRy4bqhbmcgdGjDoWk6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB2w6kgdGhlbyB0cuG6oW5nIHRow6FpXCIsIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gdGVzdENvbm5lY3Rpb24oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZW0uY3JlYXRlUXVlcnkoXCJTRUxFQ1QgMVwiKS5nZXRSZXN1bHRMaXN0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtp4buDbSB0cmEga+G6v3QgbuG7kWk6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBMaXN0PFRyYW5nVGhhaVZlVGF1PiBnZXRBbGxUcmFuZ1RoYWlWZSgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBMaXN0PFRyYW5nVGhhaVZlVGF1PiB0cmFuZ1RoYWlMaXN0ID0gbmV3IEFycmF5TGlzdDw+KCk7XG5cbiAgICAgICAgLy8gVGjDqm0gdOG6pXQgY+G6oyBjw6FjIGdpw6EgdHLhu4sgZW51bSBUcmFuZ1RoYWlWZVRhdVxuICAgICAgICBmb3IgKFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSA6IFRyYW5nVGhhaVZlVGF1LnZhbHVlcygpKSB7XG4gICAgICAgICAgICB0cmFuZ1RoYWlMaXN0LmFkZCh0cmFuZ1RoYWkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYW5nVGhhaUxpc3Q7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gZGF0VmUoVmVUYXUgdmVUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbi4uLlxuXG4gICAgICAgICAgICAvLyA1LiBDaGVjayBpZiB0aGUgc2VhdCBpcyBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmIChjaG9OZ29pLmlzVGluaFRyYW5nKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBVc2luZyBKUFFMIHRvIGNoZWNrIGlmIHRoaXMgc2VhdCBpcyBhbHJlYWR5IG9jY3VwaWVkIGluIHRoaXMgc2NoZWR1bGVcbiAgICAgICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIENPVU5UKHYpIEZST00gVmVUYXUgdiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYuY2hvTmdvaS5tYUNobyA9IDptYUNobyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkFORCB2LmxpY2hUcmluaFRhdS5tYUxpY2ggPSA6bWFMaWNoIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQU5EIHYudHJhbmdUaGFpICE9IDp0cmFuZ1RoYWlIdXlcIjtcblxuICAgICAgICAgICAgICAgIExvbmcgY291bnQgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBMb25nLmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hQ2hvXCIsIG1hQ2hvTmdvaSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYUxpY2hcIiwgbWFMaWNoVHJpbmgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpSHV5XCIsIFRyYW5nVGhhaVZlVGF1LkRBX1RSQSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRTaW5nbGVSZXN1bHQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIkNo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIDYuIENoZWNrIGlmIHRoZSBzZWF0IGJlbG9uZ3MgdG8gdGhlIHRyYWluIGluIHRoaXMgc2NoZWR1bGVcbiAgICAgICAgICAgIFRhdSB0YXUgPSBsaWNoVHJpbmhUYXUuZ2V0VGF1KCk7XG4gICAgICAgICAgICBpZiAodGF1ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiTOG7i2NoIHRyw6xuaCBraMO0bmcgY8OzIHRow7RuZyB0aW4gdMOgdVwiKTtcbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgICAgICAgICAvLyA3LiBHZW5lcmF0ZSB0aWNrZXQgSUQgaWYgbm90IHByb3ZpZGVkXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0TWFWZSgpID09IG51bGwgfHwgdmVUYXUuZ2V0TWFWZSgpLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIFN0cmluZyBtYVZlID0gXCJWRVwiICsgVVVJRC5yYW5kb21VVUlEKCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgOCkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB2ZVRhdS5zZXRNYVZlKG1hVmUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgdGlja2V0IElEIGFscmVhZHkgZXhpc3RzXG4gICAgICAgICAgICAgICAgVmVUYXUgZXhpc3RpbmdWZVRhdSA9IGVtLmZpbmQoVmVUYXUuY2xhc3MsIHZlVGF1LmdldE1hVmUoKSk7XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nVmVUYXUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiTcOjIHbDqSDEkcOjIHThu5NuIHThuqFpIHRyb25nIGjhu4cgdGjhu5FuZ1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIDguIFNldCB1cCB0aWNrZXQgZGF0YSB3aXRoIHZhbGlkIGVudGl0aWVzXG4gICAgICAgICAgICB2ZVRhdS5zZXRDaG9OZ29pKGNob05nb2kpO1xuICAgICAgICAgICAgdmVUYXUuc2V0TGljaFRyaW5oVGF1KGxpY2hUcmluaFRhdSk7XG5cbiAgICAgICAgICAgIC8vIFNldCBkZWZhdWx0IHN0YXR1cyBpZiBub3QgcHJvdmlkZWRcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRUcmFuZ1RoYWkoKSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTik7XG4gICAgICAgICAgICB9XG4uLi5cblxuICAgICAgICAgICAgdmVUYXUuc2V0R2lhVmUoZ2lhVmUpO1xuXG4gICAgICAgICAgICAvLyAxMC4gTWFyayBzZWF0IGFzIG9jY3VwaWVkXG4gICAgICAgICAgICBjaG9OZ29pLnNldFRpbmhUcmFuZyh0cnVlKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKGNob05nb2kpO1xuXG4gICAgICAgICAgICAvLyAxMS4gU2F2ZSB0aGUgdGlja2V0IHdpdGggSlBBXG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJMxrB1IHbDqSBt4bubaSB24bubaSBtw6M6IFwiICsgdmVUYXUuZ2V0TWFWZSgpKTtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIkNo4buXIG5n4buTaTogXCIgKyBjaG9OZ29pLmdldE1hQ2hvKCkgKyBcIiAtIFwiICsgY2hvTmdvaS5nZXRUZW5DaG8oKSk7XG4gICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJM4buLY2ggdHLDrG5oOiBcIiArIGxpY2hUcmluaFRhdS5nZXRNYUxpY2goKSArIFwiIC0gVMOgdTogXCIgKyB0YXUuZ2V0TWFUYXUoKSk7XG5cbiAgICAgICAgICAgIC8vIFBlcnNpc3QgdGhlIHRpY2tldFxuICAgICAgICAgICAgZW0ucGVyc2lzdCh2ZVRhdSk7XG5cbiAgICAgICAgICAgIC8vIEZsdXNoIHRvIGRldGVjdCBhbnkgaXNzdWVzXG4gICAgICAgICAgICBlbS5mbHVzaCgpO1xuICAgICAgICAgICAgdHguY29tbWl0KCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB2w6kgY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgVmVUYXUgdmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCBtYVZlKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSB2w6kgKGNo4buJIGjhu6d5IMSRxrDhu6NjIHbDqSDhu58gdHLhuqFuZyB0aMOhaSBDSE9fWEFDX05IQU4gaG/hurdjIERBX1RIQU5IX1RPQU4pXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0VHJhbmdUaGFpKCkgIT0gVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOICYmXG4gICAgICAgICAgICAgICAgICAgIHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2nhuqNpIHBow7NuZyBjaOG7lyBuZ+G7k2lcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRDaG9OZ29pKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIENob05nb2kgY2hvTmdvaSA9IHZlVGF1LmdldENob05nb2koKTtcbiAgICAgICAgICAgICAgICBjaG9OZ29pLnNldFRpbmhUcmFuZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgZW0ubWVyZ2UoY2hvTmdvaSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqSB0aMOgbmggREFfVFJBXG4gICAgICAgICAgICB2ZVRhdS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuREFfVFJBKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKHZlVGF1KTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gdGhhbmhUb2FuVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB2w6kgY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgVmVUYXUgdmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCBtYVZlKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSB2w6kgKGNo4buJIHRoYW5oIHRvw6FuIMSRxrDhu6NjIHbDqSDhu58gdHLhuqFuZyB0aMOhaSBDSE9fWEFDX05IQU4pXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0VHJhbmdUaGFpKCkgIT0gVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqSB0aMOgbmggREFfVEhBTkhfVE9BTlxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkRBX1RIQU5IX1RPQU4pO1xuICAgICAgICAgICAgZW0ubWVyZ2UodmVUYXUpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBjYXBOaGF0VHJhbmdUaGFpVmUoU3RyaW5nIG1hVmUsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHbDqSBjw7MgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICBWZVRhdSB2ZVRhdSA9IGVtLmZpbmQoVmVUYXUuY2xhc3MsIG1hVmUpO1xuICAgICAgICAgICAgaWYgKHZlVGF1ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpXG4gICAgICAgICAgICB2ZVRhdS5zZXRUcmFuZ1RoYWkodHJhbmdUaGFpKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKHZlVGF1KTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgY+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gRm9yIG5hdGl2ZSBxdWVyaWVzIHdpdGggbmFtZWQgcGFyYW1ldGVycywgdXNlIDpuYW1lIG5vdGF0aW9uXG4gICAgICAgICAgICBTdHJpbmcgbmF0aXZlUXVlcnkgPVxuICAgICAgICAgICAgICAgICAgICBcIlNFTEVDVCBraC4qIEZST00ga2hhY2hoYW5nIGtoIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkpPSU4gaG9hZG9uIGhkIE9OIGhkLm1hX2toYWNoX2hhbmcgPSBraC5tYV9raGFjaF9oYW5nIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkpPSU4gY2hpdGlldF9ob2Fkb24gY3RoZCBPTiBjdGhkLm1hX2hkID0gaGQubWFfaGQgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgY3RoZC5tYV92ZSA9ID9cIjtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBraGFjaEhhbmcgPSAoS2hhY2hIYW5nKSBlbS5jcmVhdGVOYXRpdmVRdWVyeShuYXRpdmVRdWVyeSwgS2hhY2hIYW5nLmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcigxLCBtYVZlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIHJlbGF0ZWQgZGF0YSBpcyBsb2FkZWQgaWYgbmVlZGVkXG4gICAgICAgICAgICAgICAgaWYgKGtoYWNoSGFuZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGtoYWNoSGFuZy5nZXRNYUtoYWNoSGFuZygpOyAvLyBUcmlnZ2VyIGxvYWRpbmdcblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB5b3UgbmVlZCB0byBsb2FkIHRoZSBsb2FpS2hhY2hIYW5nIHJlbGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChraGFjaEhhbmcuZ2V0TG9haUtoYWNoSGFuZygpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtoYWNoSGFuZy5nZXRMb2FpS2hhY2hIYW5nKCkuZ2V0TWFMb2FpS2hhY2hIYW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKE5vUmVzdWx0RXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAvLyBObyBjdXN0b21lciBmb3VuZCBmb3IgdGhpcyB0aWNrZXRcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9UcmFDdXVWZURBT0ltcGwuamF2YVxuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpQUUwgduG7m2kgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB04bqldCBj4bqjIGThu68gbGnhu4d1IGPhuqduIHRoaeG6v3QgdHJvbmcgbeG7mXQgY8OidSBxdWVyeVxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCB2IEZST00gVmVUYXUgdiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB2LmxpY2hUcmluaFRhdSBsdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCBsdC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB0LnR1eWVuVGF1IHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYuY2hvTmdvaSBjIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggYy50b2FUYXUgdG9hIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdG9hLmxvYWlUb2EgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYubWFWZSA9IDptYVZlXCI7XG5cbiAgICAgICAgICAgIFR5cGVkUXVlcnk8VmVUYXU+IHF1ZXJ5ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibWFWZVwiLCBtYVZlKTtcblxuICAgICAgICAgICAgLy8gZ2V0U2luZ2xlUmVzdWx0KCkgY8OzIHRo4buDIG7DqW0gTm9SZXN1bHRFeGNlcHRpb24gbuG6v3Uga2jDtG5nIHTDrG0gdGjhuqV5IGvhur90IHF14bqjXG4gICAgICAgICAgICAvLyBuw6puIGNow7puZyB0YSBj4bqnbiBi4bqvdCBuZ2/huqFpIGzhu4cgbsOgeSB2w6AgeOG7rSBsw71cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmVUYXUgPSBxdWVyeS5nZXRTaW5nbGVSZXN1bHQoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGpha2FydGEucGVyc2lzdGVuY2UuTm9SZXN1bHRFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgICAgIC8vIEtow7RuZyB0w6xtIHRo4bqleSB2w6ksIHRy4bqjIHbhu4EgbnVsbFxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL0Nob05nb2lEb2lWZURBT0ltcGwuamF2YVxuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpPSU4gRkVUQ0ggxJHhu4MgdOG6o2kgdHLGsOG7m2MgZOG7ryBsaeG7h3UgbGnDqm4gcXVhblxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCBESVNUSU5DVCBjIEZST00gQ2hvTmdvaSBjIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggYy5sb2FpQ2hvIGxjIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSBjLnRvYVRhdS5tYVRvYSA9IDptYVRvYVRhdVwiO1xuXG4gICAgICAgICAgICBkc0Nob05nb2kgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBDaG9OZ29pLmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFUb2FUYXVcIiwgbWFUb2FUYXUpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRSZXN1bHRMaXN0KCk7XG5cbiAgICAgICAgICAgIC8vIMSQ4bqjbSBi4bqjbyBjw6FjIHRodeG7mWMgdMOtbmggbGF6eSDEkcaw4bujYyB04bqjaVxuICAgICAgICAgICAgZm9yIChDaG9OZ29pIGNob05nb2kgOiBkc0Nob05nb2kpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hvTmdvaS5nZXRMb2FpQ2hvKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjaG9OZ29pLmdldExvYWlDaG8oKS5nZXRUZW5Mb2FpKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIGNo4buXIG5n4buTaTogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZHNDaG9OZ29pO1xuICAgIH1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9UcmFWZURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW50aXR5TWFuYWdlcjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLk5vUmVzdWx0RXhjZXB0aW9uO1xuaW1wb3J0IHV0aWwuSlBBVXRpbDtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlbW90ZU9iamVjdDtcblxucHVibGljIGNsYXNzIFRyYVZlREFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBkYW8uVHJhVmVEQU8ge1xuICAgIHByaXZhdGUgRW50aXR5TWFuYWdlciBlbTtcblxuICAgIHB1YmxpYyBUcmFWZURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgdGhpcy5lbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBTdHJpbmcgZ2V0VGVuVHV5ZW5CeU1hVmUoU3RyaW5nIG1hVmUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJcIlwiXG4gICAgICAgICAgICBTRUxFQ1QgdHQudGVuVHV5ZW5cbiAgICAgICAgICAgIEZST00gVmVUYXUgdnRcbiAgICAgICAgICAgIEpPSU4gdnQubGljaFRyaW5oVGF1IGx0dFxuICAgICAgICAgICAgSk9JTiBsdHQudGF1IHRcbiAgICAgICAgICAgIEpPSU4gdC50dXllblRhdSB0dFxuICAgICAgICAgICAgV0hFUkUgdnQubWFWZSA9IDptYVZlXG4gICAgICAgIFwiXCJcIjtcblxuICAgICAgICAgICAgcmV0dXJuIGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFN0cmluZy5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hVmVcIiwgbWFWZSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuICAgICAgICB9IGNhdGNoIChOb1Jlc3VsdEUuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJhYmQ1YjY1Mi05MzBiLTQ3NmEtODE0Ny01OGU3MWIyYWJlOWI7dG9vbHVfdnJ0eF8wMVRQdHAzVXNxTjlnaGg5dmJVRWlpcHkiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhXG4uLi5cblxuICAgICAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgICAgIHByb3RlY3RlZCB2b2lkIGRvbmUoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZVRhdUhpZW5UYWkgPSBnZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZVRhdUhpZW5UYWkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKERvaVZlUGFuZWwudGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiS2jDtG5nIHTDrG0gdGjhuqV5IHbDqSB24bubaSBtw6M6IFwiICsgbWFWZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW1Nb2koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2lhVmVCYW5EYXUgPSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWVuVGhpVGhvbmdUaW5WZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB4ZW0gY8OzIHRo4buDIMSR4buVaSB2w6kga2jDtG5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbiBjb1RoZURvaVZlID0gKHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKSA9PSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJbnB1dEZpZWxkc0VuYWJsZWQoY29UaGVEb2lWZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuRG9pVmUuc2V0RW5hYmxlZChjb1RoZURvaVZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG5DaG9uTGljaFRyaW5oLnNldEVuYWJsZWQoY29UaGVEb2lWZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuQ2hvbkNob05nb2kuc2V0RW5hYmxlZChjb1RoZURvaVZlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29UaGVEb2lWZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhEb2lWZVBhbmVsLnRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWw6kgbsOgeSBjw7MgdHLhuqFuZyB0aMOhaSAnXCIgKyB2ZVRhdUhpZW5UYWkuZ2V0VHJhbmdUaGFpKCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCInLiBDaOG7iSB2w6kg4bufIHRy4bqhbmcgdGjDoWkgJ8SQw4MgVEhBTkggVE/DgU4nIG3hu5tpIGPDsyB0aOG7gyDEkeG7lWkuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJLaMO0bmcgdGjhu4MgxJHhu5VpIHbDqVwiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhSRUFEWV9URVhULCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coRG9pVmVQYW5lbC50aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpIGtoaSB0cnV5IHbhuqVuIGThu68gbGnhu4d1OiBcIiArIGUuZ2V0TWVzc2FnZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3RhdHVzKEVSUk9SX1RFWFQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHdvcmtlci5leGVjdXRlKCk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xuICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2codGhpcywgXCJM4buXaSBraGkgdHJ1eSB24bqlbiBk4buvIGxp4buHdTogXCIgKyBlLmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKExPQURJTkdfVEVYVCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIEzGsHUgdHLhu68gdHLhuqFuZyB0aMOhaSBjxakgxJHhu4MgaGnhu4NuIHRo4buLIHRyb25nIGzhu4tjaCBz4butXG4gICAgICAgICAgICBmaW5hbCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWlDdSA9IHZlVGF1SGllblRhaS5nZXRUcmFuZ1RoYWkoKTtcblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gdsOpXG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0VGVuS2hhY2hIYW5nKHRlbktoYWNoSGFuZyk7XG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0R2lheVRvKGdpYXlUbyk7XG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0TmdheURpKG5nYXlEaSk7XG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0RG9pVHVvbmcoT2JqZWN0cy5yZXF1aXJlTm9uTnVsbChjYm9Eb2lUdW9uZy5nZXRTZWxlY3RlZEl0ZW0oKSkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0TGljaFRyaW5oVGF1KGxpY2hUcmluaERhQ2hvbik7XG4gICAgICAgICAgICB2ZVRhdUhpZW5UYWkuc2V0Q2hvTmdvaShjaG9OZ29pRGFDaG9uKTtcbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRLaHV5ZW5NYWkoa2h1eWVuTWFpRGFDaG9uKTtcblxuICAgICAgICAgICAgLy8gVMOtbmggbOG6oWkgZ2nDoSB2w6lcbiAgICAgICAgICAgIGRvdWJsZSBnaWFWZSA9IHRpbmhHaWFWZShjaG9OZ29pRGFDaG9uLCBraHV5ZW5NYWlEYUNob24sIE9iamVjdHMucmVxdWlyZU5vbk51bGwoY2JvRG9pVHVvbmcuZ2V0U2VsZWN0ZWRJdGVtKCkpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgdmVUYXVIaWVuVGFpLnNldEdpYVZlKGdpYVZlKTtcblxuICAgICAgICAgICAgLy8gxJDhu5VpIHRy4bqhbmcgdGjDoWkgdsOpIHRow6BuaCBDSE9fWEFDX05IQU5cbiAgICAgICAgICAgIHZlVGF1SGllblRhaS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKTtcblxuICAgICAgICAgICAgLy8gR+G7jWkgQVBJIMSR4buDIGPhuq1wIG5o4bqtdCB2w6lcbiAgICAgICAgICAgIGJvb2xlYW4gc3VjY2VzcyA9IGRvaVZlREFPLmRvaVZlKHZlVGF1SGllblRhaSk7XG4gICAgICAgICAgICBib29sZWFuIHh1THlUaGFuaFRvYW5TdWNjZXNzID0geHVMeVRoYW5oVG9hbigpO1xuICAgICAgICAgICAgaWYgKHN1Y2Nlc3MgJiYgeHVMeVRoYW5oVG9hblN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVMaWNoU3VBbmRTaG93U3VjY2Vzcyh0cmFuZ1RoYWlDdSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIsSQ4buVaSB2w6kga2jDtG5nIHRow6BuaCBjw7RuZyFcIiwgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVTdGF0dXMoRVJST1JfVEVYVCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIEpPcHRpb25QYW5lLnNob3dNZXNzYWdlRGlhbG9nKHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRo4buxYyBoaeG7h24gxJHhu5VpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyhFUlJPUl9URVhULCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4uLi5cblxuICAgICAgICAvLyBUw61uaCBjaMOqbmggbOG7h2NoIGdpw6EgdsOpIGdp4buvYSB2w6kgbeG7m2kgdsOgIHbDqSBjxalcbiAgICAgICAgZmluYWwgZG91YmxlIGdpYVZlTW9pID0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCk7XG4gICAgICAgIGZpbmFsIGRvdWJsZSBjaGVuaExlY2ggPSBnaWFWZU1vaSAtIGdpYVZlQmFuRGF1O1xuICAgICAgICBmaW5hbCBib29sZWFuIGNhblRyYVRoZW0gPSBjaGVuaExlY2ggPiAwO1xuICAgICAgICBmaW5hbCBib29sZWFuIGR1b2NIb2FuTGFpID0gY2hlbmhMZWNoIDwgMDtcbiAgICAgICAgZmluYWwgZG91YmxlIHNvVGllbkNoZW5oTGVjaCA9IE1hdGguYWJzKGNoZW5oTGVjaCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHBheW1lbnQgZGlhbG9nXG4gICAgICAgIFN0cmluZyBkaWFsb2dUaXRsZSA9IGNhblRyYVRoZW0gPyBcIlRoYW5oIHRvw6FuIMSR4buVaSB2w6kgLSBD4bqnbiB0aHUgdGjDqm1cIiA6XG4gICAgICAgICAgICAgICAgZHVvY0hvYW5MYWkgPyBcIlRoYW5oIHRvw6FuIMSR4buVaSB2w6kgLSBIb8OgbiB0aeG7gW4gdGjhu6thXCIgOlxuICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGFuaCB0b8OhbiDEkeG7lWkgdsOpXCI7XG4gICAgICAgIGZpbmFsIEpEaWFsb2cgZGlhbG9nID0gbmV3IEpEaWFsb2coKEZyYW1lKSBTd2luZ1V0aWxpdGllcy5nZXRXaW5kb3dBbmNlc3Rvcih0aGlzKSwgZGlhbG9nVGl0bGUsIHRydWUpO1xuICAgICAgICBkaWFsb2cuc2V0TGF5b3V0KG5ldyBCb3JkZXJMYXlvdXQoMTAsIDEwKSk7XG4gICAgICAgIGRpYWxvZy5zZXRTaXplKDUwMCwgNjUwKTsgLy8gVMSDbmcga8OtY2ggdGjGsOG7m2MgY2hp4buBdSBjYW8gxJHhu4MgY2jhu6lhIHRow6ptIGPDoWMgdGjDoG5oIHBo4bqnbiBt4bubaVxuICAgICAgICBkaWFsb2cuc2V0TG9jYXRpb25SZWxhdGl2ZVRvKHRoaXMpO1xuLi4uXG5cbiAgICAgICAgICAgIC8vIExpc3RlbmVyIGNobyBjb21ib2JveCDEkeG7gyBjaHV54buDbiB0YWJcbiAgICAgICAgICAgIGNtYlBheW1lbnRUeXBlLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgICAgIENhcmRMYXlvdXQgY2wgPSAoQ2FyZExheW91dCkgcG5sUGF5bWVudFRhYnMuZ2V0TGF5b3V0KCk7XG4gICAgICAgICAgICAgICAgaW50IHNlbGVjdGVkSW5kZXggPSBjbWJQYXltZW50VHlwZS5nZXRTZWxlY3RlZEluZGV4KCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjbC5zaG93KHBubFBheW1lbnRUYWJzLCBcIkJBTktfVFJBTlNGRVJcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2wuc2hvdyhwbmxQYXltZW50VGFicywgXCJWTlBBWV9RUlwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVOG6oW8gUVIgY29kZSBraGkgY2jhu41uIHRhYiBWTlBheVxuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVZucGF5UVJDb2RlKGxibFFSQ29kZSwgdmVUYXVIaWVuVGFpLmdldE1hVmUoKSwgc29UaWVuQ2hlbmhMZWNoLCBsYmxQYXltZW50U3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcG5sVHJhbnNmZXJJbmZvLnNldEJvcmRlcihCb3JkZXJGYWN0b3J5LmNyZWF0ZUVtcHR5Qm9yZGVyKDAsIDAsIDEwLCAwKSk7XG4gICAgICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuYWRkKHBubFRyYW5zZmVySW5mbywgQm9yZGVyTGF5b3V0Lk5PUlRIKTtcbiAgICAgICAgICAgIHBubFRyYW5zZmVyUGF5bWVudC5hZGQocG5sUGF5bWVudFRhYnMsIEJvcmRlckxheW91dC5DRU5URVIpO1xuXG4gICAgICAgICAgICAvLyBOw7p0IGzDoG0gbeG7m2kgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhblxuICAgICAgICAgICAgYnRuUmVmcmVzaFN0YXR1cy5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgICAgICBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpLCBsYmxQYXltZW50U3RhdHVzLCBkaWFsb2cpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEhp4buDbiB0aOG7iyBwYW5lbCBwaMawxqFuZyB0aOG7qWMgdGhhbmggdG/DoW4gYmFuIMSR4bqndSAobeG6t2MgxJHhu4tuaCBsw6AgdGnhu4FuIG3hurd0KVxuICAgICAgICAgICAgcG5sUGF5bWVudC5hZGQocG5sQ2FzaFBheW1lbnQpO1xuICAgICAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgcG5sUGF5bWVudC5hZGQocG5sVHJhbnNmZXJQYXltZW50KTtcblxuICAgICAgICAgICAgLy8gVGjDqm0gbGlzdGVuZXIgY2hvIHJhZGlvIGJ1dHRvbiDEkeG7gyBjaHV54buDbiDEkeG7lWkgZ2nhu69hIGPDoWMgcGjGsMahbmcgdGjhu6ljIHRoYW5oIHRvw6FuXG4gICAgICAgICAgICByYWRDYXNoLmFkZEFjdGlvbkxpc3RlbmVyKGUgLT4ge1xuICAgICAgICAgICAgICAgIHBubENhc2hQYXltZW50LnNldFZpc2libGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgcG5sVHJhbnNmZXJQYXltZW50LnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGRpYWxvZy5yZXZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgZGlhbG9nLnJlcGFpbnQoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByYWRUcmFuc2Zlci5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgICAgICBwbmxDYXNoUGF5bWVudC5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBwbmxUcmFuc2ZlclBheW1lbnQuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBkaWFsb2cucmV2YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICAgIGRpYWxvZy5yZXBhaW50KCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQWRkIGRvY3VtZW50IGxpc3RlbmVyIGZvciBhdXRvbWF0aWMgY2hhbmdlIGNhbGN1bGF0aW9uXG4gICAgICAgICAgICB0eHRDdXN0b21lclBheW1lbnQuZ2V0RG9jdW1lbnQoKS5hZGREb2N1bWVudExpc3RlbmVyKG5ldyBEb2N1bWVudExpc3RlbmVyKCkge1xuICAgICAgICAgICAgICAgIHByaXZhdGUgdm9pZCB1cGRhdGVDaGFuZ2UoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcgaW5wdXQgPSBjb250YWluZXIudHh0Q3VzdG9tZXJQYXltZW50LmdldFRleHQoKS5yZXBsYWNlQWxsKFwiW15cXFxcZF1cIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSBjdXN0b21lclBheW1lbnQgPSBEb3VibGUucGFyc2VEb3VibGUoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdWJsZSBjaGFuZ2UgPSBjdXN0b21lclBheW1lbnQgLSBzb1RpZW5DaGVuaExlY2g7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmxibENoYW5nZS5zZXRUZXh0KGN1cnJlbmN5Rm9ybWF0dGVyLmZvcm1hdChNYXRoLm1heCgwLCBjaGFuZ2UpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5sYmxDaGFuZ2Uuc2V0VGV4dChcIjAgVk7EkFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoTnVtYmVyRm9ybWF0RXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5sYmxDaGFuZ2Uuc2V0VGV4dChcIjAgVk7EkFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgICAgIGlmIChjYW5UcmFUaGVtKSB7XG4gICAgICAgICAgICBidG5BY3Rpb24uYWRkQWN0aW9uTGlzdGVuZXIoZSAtPiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5yYWRDYXNoLmlzU2VsZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gWOG7rSBsw70gdGhhbmggdG/DoW4gdGnhu4FuIG3hurd0XG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcgaW5wdXQgPSBjb250YWluZXIudHh0Q3VzdG9tZXJQYXltZW50LmdldFRleHQoKS5yZXBsYWNlQWxsKFwiW15cXFxcZF1cIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWdWkgbMOybmcgbmjhuq1wIHPhu5EgdGnhu4FuIGtow6FjaCDEkcawYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaMO0bmcgYsOhb1wiLCBKT3B0aW9uUGFuZS5XQVJOSU5HX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGN1c3RvbWVyUGF5bWVudCA9IERvdWJsZS5wYXJzZURvdWJsZShpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tZXJQYXltZW50IDwgc29UaWVuQ2hlbmhMZWNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJT4buRIHRp4buBbiBraMOhY2ggxJHGsGEga2jDtG5nIMSR4bunXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRow7RuZyBiw6FvXCIsIEpPcHRpb25QYW5lLldBUk5JTkdfTUVTU0FHRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeHVMeVRoYW5oVG9hbihcIlRJRU5fTUFUXCIsIFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91YmxlIGNoYW5nZSA9IGN1c3RvbWVyUGF5bWVudCAtIHNvVGllbkNoZW5oTGVjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93UGF5bWVudFN1Y2Nlc3NEaWFsb2coY2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQWZ0ZXJTdWNjZXNzZnVsUGF5bWVudChkaWFsb2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRhaW5lci5yYWRUcmFuc2Zlci5pc1NlbGVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFjhu60gbMO9IHRoYW5oIHRvw6FuIGNodXnhu4NuIGtob+G6o25cbiAgICAgICAgICAgICAgICAgICAgICAgIGludCBzZWxlY3RlZFBheW1lbnRUeXBlID0gY29udGFpbmVyLmNtYlBheW1lbnRUeXBlLmdldFNlbGVjdGVkSW5kZXgoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkUGF5bWVudFR5cGUgPT0gMCkgeyAvLyBDaHV54buDbiBraG/huqNuIG5nw6JuIGjDoG5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHRyYW5zYWN0aW9uSWQgPSBjb250YWluZXIudHh0VHJhbnNhY3Rpb25JZC5nZXRUZXh0KCkudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbklkLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJWdWkgbMOybmcgbmjhuq1wIG3DoyBnaWFvIGThu4tjaFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGjDtG5nIGLDoW9cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4dUx5VGhhbmhUb2FuKFwiQ0hVWUVOX0tIT0FOX05HQU5fSEFOR1wiLCB0cmFuc2FjdGlvbklkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93VHJhbnNmZXJTdWNjZXNzRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NBZnRlclN1Y2Nlc3NmdWxQYXltZW50KGRpYWxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiS2jDtG5nIHRo4buDIHjDoWMgdGjhu7FjIGdpYW8gZOG7i2NoLiBWdWkgbMOybmcga2nhu4NtIHRyYSBtw6MgZ2lhbyBk4buLY2guXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJM4buXaVwiLCBKT3B0aW9uUGFuZS5FUlJPUl9NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBWTlBheSBRUlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFjDoWMgdGjhu7FjIGzhuqFpIHRy4bqhbmcgdGjDoWkgdGhhbmggdG/DoW4gbeG7mXQgbOG6p24gbuG7r2FcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sZWFuIHBheW1lbnRTdWNjZXNzID0gY2hlY2tWbnBheVBheW1lbnRTdGF0dXModmVUYXVIaWVuVGFpLmdldE1hVmUoKSwgY29udGFpbmVyLmxibFBheW1lbnRTdGF0dXMsIG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBheW1lbnRTdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dWbnBheVN1Y2Nlc3NEaWFsb2coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0FmdGVyU3VjY2Vzc2Z1bFBheW1lbnQoZGlhbG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDaMawYSBuaOG6rW4gxJHGsOG7o2MgdGjDtG5nIHRpbiB0aGFuaCB0b8Ohbi4gVnVpIGzDsm5nIHRoYW5oIHRvw6FuIGhv4bq3YyBraeG7g20gdHJhIGzhuqFpLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2jGsGEgdGhhbmggdG/DoW5cIiwgSk9wdGlvblBhbmUuV0FSTklOR19NRVNTQUdFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChOdW1iZXJGb3JtYXRFeGNlcHRpb24gZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiU+G7kSB0aeG7gW4ga2jDtG5nIGjhu6NwIGzhu4dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgICAgICBleC5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHRoYW5oIHRvw6FuOiBcIiArIGV4LmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTsO6dCB4w6FjIG5o4bqtbiDEkcahbiBnaeG6o24gbuG6v3Uga2jDtG5nIGPhuqduIHRodSB0aMOqbSB0aeG7gW5cbiAgICAgICAgICAgIGJ0bkFjdGlvbi5hZGRBY3Rpb25MaXN0ZW5lcihlIC0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQWZ0ZXJTdWNjZXNzZnVsUGF5bWVudChkaWFsb2cpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkge1xuICAgICAgICAgICAgICAgICAgICBleC5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgSk9wdGlvblBhbmUuc2hvd01lc3NhZ2VEaWFsb2coZGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2hpIHjDoWMgbmjhuq1uOiBcIiArIGV4LmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcG5sQnV0dG9ucy5hZGQoYnRuQWN0aW9uKTtcbiAgICAgICAgcG5sQ29udGVudC5hZGQocG5sQnV0dG9ucywgQm9yZGVyTGF5b3V0LlNPVVRIKTtcblxuICAgICAgICBkaWFsb2cuYWRkKHBubENvbnRlbnQpO1xuICAgICAgICBkaWFsb2cuc2V0VmlzaWJsZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBU4bqhbyBt4buZdCBs4bubcCBDb250YWluZXIgxJHhu4MgZ2nhu68gY8OhYyB0aGFtIGNoaeG6v3VcbiAgICBwcml2YXRlIHN0YXRpYyBjbGFzcyBDb250YWluZXIge1xuICAgICAgICBwdWJsaWMgSlJhZGlvQnV0dG9uIHJhZENhc2g7XG4gICAgICAgIHB1YmxpYyBKUmFkaW9CdXR0b24gcmFkVHJhbnNmZXI7XG4gICAgICAgIHB1YmxpYyBKVGV4dEZpZWxkIHR4dEN1c3RvbWVyUGF5bWVudDtcbiAgICAgICAgcHVibGljIEpUZXh0RmllbGQgdHh0VHJhbnNhY3Rpb25JZDtcbiAgICAgICAgcHVibGljIEpMYWJlbCBsYmxQYXltZW50U3RhdHVzO1xuICAgICAgICBwdWJsaWMgSkNvbWJvQm94PFN0cmluZz4gY21iUGF5bWVudFR5cGU7XG4gICAgICAgIHB1YmxpYyBKTGFiZWwgbGJsQ2hhbmdlO1xuICAgIH1cbi4uLlxuXG4gICAgLy8gUGjGsMahbmcgdGjhu6ljIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBWTlBheVxuICAgIHByaXZhdGUgYm9vbGVhbiBjaGVja1ZucGF5UGF5bWVudFN0YXR1cyhTdHJpbmcgbWFWZSwgSkxhYmVsIGxibFN0YXR1cywgSkRpYWxvZyBwYXJlbnREaWFsb2cpIHtcbiAgICAgICAgLy8gVOG6oW8gU3dpbmdXb3JrZXIgxJHhu4Mga2jDtG5nIGzDoG0gxJHGoSBnaWFvIGRp4buHblxuICAgICAgICBTd2luZ1dvcmtlcjxCb29sZWFuLCBWb2lkPiB3b3JrZXIgPSBuZXcgU3dpbmdXb3JrZXI8PigpIHtcbiAgICAgICAgICAgIEBPdmVycmlkZVxuICAgICAgICAgICAgcHJvdGVjdGVkIEJvb2xlYW4gZG9JbkJhY2tncm91bmQoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJvbmcgbcO0aSB0csaw4budbmcgdGjhu7FjIHThur8sIGLhuqFuIHPhur0gZ+G7jWkgQVBJIFZOUGF5IMSR4buDIGtp4buDbSB0cmEgdHLhuqFuZyB0aMOhaSBnaWFvIGThu4tjaFxuICAgICAgICAgICAgICAgICAgICAvLyDhu54gxJHDonkgY2jDum5nIHRhIHPhur0gbcO0IHBo4buPbmcgdmnhu4djIGtp4buDbSB0cmEsIHRy4bqjIHbhu4Egbmfhuqt1IG5oacOqbiDEkeG7gyBkZW1vXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyb25nIHRo4buxYyB04bq/LCBz4bq9IGtp4buDbSB0cmEgZOG7sWEgdHLDqm4gbcOjIGdpYW8gZOG7i2NoIMSRw6MgbMawdVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIE3DtCBwaOG7j25nIGfhu41pIEFQSSBraeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgKDUwJSBjxqEgaOG7mWkgdGjDoG5oIGPDtG5nKVxuICAgICAgICAgICAgICAgICAgICBUaHJlYWQuc2xlZXAoMTUwMCk7IC8vIE3DtCBwaOG7j25nIHRo4budaSBnaWFuIGfhu41pIEFQSVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJhbmRvbSgpLm5leHRCb29sZWFuKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgcHJpdmF0ZSB2b2lkIGdlbmVyYXRlVm5wYXlRUkNvZGUoSkxhYmVsIGxibFFSQ29kZSwgU3RyaW5nIG1hVmUsIGRvdWJsZSBhbW91bnQsIEpMYWJlbCBsYmxTdGF0dXMpIHtcbiAgICAgICAgLy8gVOG6oW8gU3dpbmdXb3JrZXIgxJHhu4Mga2jDtG5nIGzDoG0gxJHGoSBnaWFvIGRp4buHblxuICAgICAgICBTd2luZ1dvcmtlcjxJbWFnZUljb24sIFZvaWQ+IHdvcmtlciA9IG5ldyBTd2luZ1dvcmtlcjw+KCkge1xuICAgICAgICAgICAgQE92ZXJyaWRlXG4gICAgICAgICAgICBwcm90ZWN0ZWQgSW1hZ2VJY29uIGRvSW5CYWNrZ3JvdW5kKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFThuqFvIHRoYW0gc+G7kSBjaG8gQVBJIFZOUGF5XG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfVHhuUmVmID0gbWFWZSArIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOyAvLyBNw6MgdGhhbSBjaGnhur91IGdpYW8gZOG7i2NoXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfQW1vdW50ID0gU3RyaW5nLnZhbHVlT2YoKGxvbmcpKGFtb3VudCAqIDEwMCkpOyAvLyBT4buRIHRp4buBbiAqIDEwMCAoxJHGoW4gduG7iyB4dSlcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nIHZucF9PcmRlckluZm8gPSBcIlRoYW5oIHRvYW4gaG9hIGRvbiB2ZSB0YXUgXCIgKyBtYVZlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVSTCBBUEkgdOG6oW8gbcOjIFFSIGPhu6dhIFZOUGF5ICjEkcOieSBsw6AgVVJMIGdp4bqjIMSR4buLbmgsIGLhuqFuIGPhuqduIHRoYXkgdGjhur8gYuG6sW5nIFVSTCB0aOG7sWMpXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyBhcGlVcmwgPSBcImh0dHBzOi8vc2FuZGJveC52bnBheW1lbnQudm4vcGF5bWVudHYyL2NyZWF0ZV9xcl9jb2RlLmh0bWxcIjtcbi4uLlxuXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyB2bnBfU2VjdXJlSGFzaCA9IGhtYWNTSEE1MTIoXCJZT1VSX1NFQ1JFVF9LRVlcIiwgaGFzaERhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5LmFwcGVuZChcIiZ2bnBfU2VjdXJlSGFzaD1cIikuYXBwZW5kKHZucF9TZWN1cmVIYXNoKTtcblxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcgcGF5bWVudFVybCA9IGFwaVVybCArIFwiP1wiICsgcXVlcnkudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUcm9uZyBtw7RpIHRyxrDhu51uZyB0aOG7sWMgdOG6vywgYuG6oW4gc+G6vSBn4buNaSBBUEkgVk5QYXkgxJHhu4MgbOG6pXkgVVJMIGhv4bq3YyBk4buvIGxp4buHdSBRUlxuICAgICAgICAgICAgICAgICAgICAvLyDhu54gxJHDonksIGNow7puZyB0YSBz4bq9IHThuqFvIG3DoyBRUiB04burIFVSTCB0aGFuaCB0b8OhblxuICAgICAgICAgICAgICAgICAgICAvLyBMxrB1IHRow7RuZyB0aW4gbsOgeSDEkeG7gyB0cmEgY+G7qXUgdHLhuqFuZyB0aMOhaSB0aGFuaCB0b8OhbiBzYXUgbsOgeVxuICAgICAgICAgICAgICAgICAgICBzYXZlVm5wYXlUcmFuc2FjdGlvbih2bnBfVHhuUmVmLCBtYVZlLCBhbW91bnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFThuqFvIFFSIGNvZGUgdOG7qyBVUkwgdGhhbmggdG/DoW5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlUVJDb2RlSW1hZ2UocGF5bWVudFVybCwgMjAwLCAyMDApO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgICAgIC8vIEfhu41pIEFQSSDEkeG7gyBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6lcbiAgICAgICAgYm9vbGVhbiBzdWNjZXNzID0gZG9pVmVEQU8uY2FwTmhhdFRyYW5nVGhhaVZlKHZlVGF1SGllblRhaS5nZXRNYVZlKCksIFRyYW5nVGhhaVZlVGF1LkRBX0RPSSk7XG4gICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICBkaWFsb2cuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKFNVQ0NFU1NfVEVYVCwgZmFsc2UpO1xuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgbOG6oWkgdHLhuqFuZyB0aMOhaSB0csOqbiBnaWFvIGRp4buHblxuICAgICAgICAgICAgbGJsVHJhbmdUaGFpLnNldFRleHQodmVUYXVIaWVuVGFpLmdldFRyYW5nVGhhaSgpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgc2V0VHJhbmdUaGFpQ29sb3IobGJsVHJhbmdUaGFpLCB2ZVRhdUhpZW5UYWkuZ2V0VHJhbmdUaGFpKCkpO1xuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgbOG6oWkgYuG6o25nIGzhu4tjaCBz4butXG4gICAgICAgICAgICBEZWZhdWx0VGFibGVNb2RlbCBtb2RlbCA9IChEZWZhdWx0VGFibGVNb2RlbCkgdGJsTGljaFN1LmdldE1vZGVsKCk7XG4gICAgICAgICAgICBpbnQgcm93Q291bnQgPSBtb2RlbC5nZXRSb3dDb3VudCgpO1xuICAgICAgICAgICAgaWYgKHJvd0NvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBkw7JuZyBjdeG7kWkgY8O5bmcgKHbhu6thIHRow6ptKVxuICAgICAgICAgICAgICAgIG1vZGVsLnNldFZhbHVlQXQoVHJhbmdUaGFpVmVUYXUuREFfVEhBTkhfVE9BTiwgcm93Q291bnQgLSAxLCAzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGFtTW9pKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBKT3B0aW9uUGFuZS5zaG93TWVzc2FnZURpYWxvZyhkaWFsb2csXG4gICAgICAgICAgICAgICAgICAgIFwiS2jDtG5nIHRo4buDIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqVwiLFxuICAgICAgICAgICAgICAgICAgICBcIkzhu5dpXCIsIEpPcHRpb25QYW5lLkVSUk9SX01FU1NBR0UpO1xuICAgICAgICB9XG4gICAgfVxuLi4uXG5cbiAgICAvLyBQaMawxqFuZyB0aOG7qWMgeOG7rSBsw70gdGhhbmggdG/DoW4gduG7m2kgdGjDtG5nIHRpbiB24buBIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhbiB2w6AgbcOjIGdpYW8gZOG7i2NoIChu4bq/dSBjw7MpXG4gICAgcHJpdmF0ZSBib29sZWFuIHh1THlUaGFuaFRvYW4oU3RyaW5nIHBodW9uZ1RodWNUaGFuaFRvYW4sIFN0cmluZyBtYUdpYW9EaWNoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBDb2RlIHjhu60gbMO9IHRoYW5oIHRvw6FuIOG7nyDEkcOieVxuICAgICAgICAgICAgLy8gTMawdSB0aMO0bmcgdGluIHBoxrDGoW5nIHRo4bupYyB0aGFuaCB0b8OhbiB2w6AgbcOjIGdpYW8gZOG7i2NoIHbDoG8gY8ahIHPhu58gZOG7ryBsaeG7h3VcblxuICAgICAgICAgICAgLy8gR2nhuqMgc+G7rSBwaMawxqFuZyB0aOG7qWMgbsOgeSBsdcO0biB0cuG6oyB24buBIHRydWUgbuG6v3Uga2jDtG5nIGPDsyBuZ2/huqFpIGzhu4dcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIljhu60gbMO9IHRoYW5oIHRvw6FuOiBcIiArIHBodW9uZ1RodWNUaGFuaFRvYW4gKyBcIiwgTcOjIGdpYW8gZOG7i2NoOiBcIiArXG4gICAgICAgICAgICAgICAgICAgIChtYUdpYW9EaWNoLmlzRW1wdHkoKSA/IFwiS2jDtG5nIGPDs1wiIDogbWFHaWFvRGljaCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGV4KSB7XG4gICAgICAgICAgICBleC5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbi4uLlxuICAgIHByaXZhdGUgYm9vbGVhbiB4dUx5VGhhbmhUb2FuKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBWZVRhdSB2ZVRhdU1vaSA9IG5ldyBWZVRhdSgpO1xuICAgICAgICAgICAgdmVUYXVNb2kuc2V0TWFWZShnZW5lcmF0ZU1hVmUoKSk7XG4gICAgICAgICAgICBib29sZWFuIGx1dVZlTW9pID0gRG9pVmVEQU8uZGF0VmUodmVUYXVNb2ksY2hvTmdvaURhQ2hvbi5nZXRNYUNobygpKTtcbiAgICAgICAgICAgIC8vIDEuIFTDrG0ga2jDoWNoIGjDoG5nIHThu6sgbcOjIHbDqVxuICAgICAgICAgICAgS2hhY2hIYW5nIGtoYWNoSGFuZyA9IGRvaVZlREFPLmdldEtoYWNoSGFuZ0J5TWFWZSh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpKTtcbiAgICAgICAgICAgIGlmIChraGFjaEhhbmcgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJLaMO0bmcgdMOsbSB0aOG6pXkgdGjDtG5nIHRpbiBraMOhY2ggaMOgbmchXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwixJDDoyB0w6xtIHRo4bqleSBLaGFjaEhhbmc6IFwiICsga2hhY2hIYW5nLmdldE1hS2hhY2hIYW5nKCkpO1xuXG4gICAgICAgICAgICBkb3VibGUgdmF0ID0gMC4xOyAvLyBWQVQgOCUgLSDEkGnhu4F1IGNo4buJbmggdGhlbyBxdXkgxJHhu4tuaCBj4bunYSBi4bqhblxuICAgICAgICAgICAgZG91YmxlIHRpZW5UaHVlID0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCkgKiB2YXQ7XG4gICAgICAgICAgICBkb3VibGUgdGhhbmhUaWVuID0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCkrdGllblRodWU7XG4gICAgICAgICAgICBkb3VibGUgdG9uZ1RpZW4gPSB0aGFuaFRpZW4rdGllblRodWU7XG4gICAgICAgICAgICAvLyAyLiBU4bqhbyBow7NhIMSRxqFuIG3hu5tpXG4gICAgICAgICAgICBIb2FEb24gaG9hRG9uID0gbmV3IEhvYURvbigpO1xuICAgICAgICAgICAgU3RyaW5nIG1hSEQgPSBnZW5lcmF0ZU1hSEQoKTtcbiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIkdlbmVyYXRlZCBNYUhEOiBcIiArIG1hSEQpO1xuICAgICAgICAgICAgaG9hRG9uLnNldE1hSEQobWFIRCk7XG4gICAgICAgICAgICBob2FEb24uc2V0TmdheUxhcChMb2NhbERhdGVUaW1lLm5vdygpKTtcbiAgICAgICAgICAgIGhvYURvbi5zZXRUaWVuR2lhbShnaWFWZUJhbkRhdSAtIHRvbmdUaWVuKTtcbiAgICAgICAgICAgIGhvYURvbi5zZXRUb25nVGllbih0b25nVGllbik7XG4gICAgICAgICAgICBob2FEb24uc2V0S2hhY2hIYW5nKGtoYWNoSGFuZyk7XG5cbiAgICAgICAgICAgIC8vIERlYnVnZ2luZyB0aGUgTmhhblZpZW4gcmVmZXJlbmNlXG4gICAgICAgICAgICBpZiAobmhhblZpZW5QYW5lbCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiRVJST1I6IG5oYW5WaWVuUGFuZWwgaXMgbnVsbFwiKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiVGhp4bq/dSB0aMO0bmcgdGluIG5ow6JuIHZpw6puIVwiKTtcbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJFcnJvciBpbiB4dUx5VGhhbmhUb2FuOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIHjhu60gbMO9IHRoYW5oIHRvw6FuOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgU3RyaW5nIGdlbmVyYXRlTWFWZSgpIHtcbiAgICAgICAgLy8gRm9ybWF0OiBIRCArIHl5eXlNTWRkICsgNCBz4buRIHJhbmRvbVxuICAgICAgICBTaW1wbGVEYXRlRm9ybWF0IHNkZiA9IG5ldyBTaW1wbGVEYXRlRm9ybWF0KFwieXl5eU1NZGRcIik7XG4gICAgICAgIFN0cmluZyBkYXRlUGFydCA9IHNkZi5mb3JtYXQobmV3IERhdGUoKSk7XG4gICAgICAgIFN0cmluZyByYW5kb21QYXJ0ID0gU3RyaW5nLmZvcm1hdChcIiUwNGRcIiwgbmV3IFJhbmRvbSgpLm5leHRJbnQoMTAwMDApKTtcbiAgICAgICAgcmV0dXJuIFwiVlRcIiArIGRhdGVQYXJ0ICsgcmFuZG9tUGFydDtcbiAgICB9XG5cbiAgICBwcml2YXRlIFN0cmluZyBnZW5lcmF0ZU1hSEQoKSB7XG4gICAgICAgIC8vIEZvcm1hdDogSEQgKyB5eXl5TU1kZCArIDQgc+G7kSByYW5kb21cbiAgICAgICAgU2ltcGxlRGF0ZUZvcm1hdCBzZGYgPSBuZXcgU2ltcGxlRGF0ZUZvcm1hdChcInl5eXlNTWRkXCIpO1xuICAgICAgICBTdHJpbmcgZGF0ZVBhcnQgPSBzZGYuZm9ybWF0KG5ldyBEYXRlKCkpO1xuICAgICAgICBTdHJpbmcgcmFuZG9tUGFydCA9IFN0cmluZy5mb3JtYXQoXCIlMDRkXCIsIG5ldyBSYW5kb20oKS5uZXh0SW50KDEwMDAwKSk7XG4gICAgICAgIHJldHVybiBcIkhEXCIgKyBkYXRlUGFydCArIHJhbmRvbVBhcnQ7XG4gICAgfVxufS4uLlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZjY2NWM4Y2EtYmE3NC00ZjU2LTg2MDAtM2I3YTNlNDE5NDNkO3Rvb2x1X3ZydHhfMDE4bXZyU214dE11N0x0bVVUSHgxY2l2Ijp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImViNjljY2NmLTY2MGYtNGM1NC04YWM1LTY4NGM0ZDhlNGExNDt0b29sdV92cnR4XzAxTlh1WmE1dVVZRXJKOWNGYlhFUTc2WiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9Eb2lWZURBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxuaW1wb3J0IG1vZGVsLkNob05nb2k7XG5pbXBvcnQgbW9kZWwuS2hhY2hIYW5nO1xuaW1wb3J0IG1vZGVsLlRyYW5nVGhhaVZlVGF1O1xuaW1wb3J0IG1vZGVsLlZlVGF1O1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlO1xuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcblxucHVibGljIGludGVyZmFjZSBEb2lWZURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgVmVUYXUgZ2V0VmVUYXUoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZG9pVmUoVmVUYXUgdmVUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxWZVRhdT4gZ2V0VmVUYXVCeVRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB0ZXN0Q29ubmVjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgTGlzdDxUcmFuZ1RoYWlWZVRhdT4gZ2V0QWxsVHJhbmdUaGFpVmUoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gVGjDqm0gY2jhu6ljIG7Eg25nIG3hu5tpXG4gICAgYm9vbGVhbiBkYXRWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGh1eVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gdGhhbmhUb2FuVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBjYXBOaGF0VHJhbmdUaGFpVmUoU3RyaW5nIG1hVmUsIFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBLaGFjaEhhbmcgZ2V0S2hhY2hIYW5nQnlNYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIHZvaWQgYmVnaW5UcmFuc2FjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgdm9pZCBjb21taXRUcmFuc2FjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgdm9pZCByb2xsYmFja1RyYW5zYWN0aW9uKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL1RyYUN1dVZlREFPLmphdmFcbi4uLlxuXG5wdWJsaWMgaW50ZXJmYWNlIFRyYUN1dVZlREFPIGV4dGVuZHMgUmVtb3RlIHtcblxuICAgIFZlVGF1IHRpbVZlVGF1VGhlb01hKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxWZVRhdT4gdGltRGFuaFNhY2hWZVRhdVRoZW9NYShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIENoaVRpZXRIb2FEb24gdGltQ2hpVGlldEhvYURvblRoZW9NYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxWZVRhdT4gdGltVmVUYXVUaGVvR2lheVRvKFN0cmluZyBnaWF5VG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBMaXN0PFZlVGF1PiB0aW1WZVRhdVRoZW9UZW5LSChTdHJpbmcgdGVuS2hhY2hIYW5nKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxWZVRhdT4gdGltVmVUYXVUaGVvQ2hpdGlldChTdHJpbmcgdGVuS2hhY2hIYW5nLCBTdHJpbmcgZ2lheVRvLCBMb2NhbERhdGUgbmdheURpLCBTdHJpbmcgbWFDaG9OZ29pLCBTdHJpbmcgZG9pVHVvbmcpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBMaXN0PFZlVGF1PiB0aW1WZVRhdVRoZW9UZW5LSFZhVGhvaUdpYW4oU3RyaW5nIGhvVGVuLCBMb2NhbERhdGUgbmdheURpRnJvbSwgTG9jYWxEYXRlIG5nYXlEaVRvKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgYm9vbGVhbiB0ZXN0Q29ubmVjdGlvbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59Li4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9WZVRhdURBTy5qYXZhXG4uLi5cblxuLyoqXG4gKiBAROG7sSDDoW46IFBoYW5UYW5KYXZhTmhvbUdQVFxuICogQENsYXNzOiBWZURBT1xuICogQFThuqFvIHbDoG8gbmfDoHk6IDE4LzA0LzIwMjVcbiAqIEBUw6FjIGdp4bqjOiBOZ3V5ZW4gSHV1IFNhbmdcbiAqL1xucHVibGljIGludGVyZmFjZSBWZVRhdURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgYm9vbGVhbiBzYXZlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8VmVUYXU+IGdldEFsbExpc3QoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIFZlVGF1IGdldEJ5SWQoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gdXBkYXRlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZGVsZXRlKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFZlVGF1PiBnZXRCeUludm9pY2VJZChTdHJpbmcgaW52b2ljZUlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgYm9vbGVhbiB1cGRhdGVTdGF0dXNUb1JldHVybmVkKFN0cmluZyB0aWNrZXRJZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBIb2FEb24gZ2V0SG9hRG9uVGhhbmhUb2FuQnlNYVZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIEtoYWNoSGFuZyBnZXRLaGFjaEhhbmdCeU1hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBNYXA8U3RyaW5nLCBTdHJpbmc+IGdldFRob25nVGluR2FCeU1hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59Li4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9UcmFWZURBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxucHVibGljIGludGVyZmFjZSBUcmFWZURBTyB7XG4gICAgU3RyaW5nIGdldFRlblR1eWVuQnlNYVZlKFN0cmluZyBtYVZlKTtcbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vQ2hvTmdvaURvaVZlREFPLmphdmFcbi4uLlxuXG5wdWJsaWMgaW50ZXJmYWNlIENob05nb2lEb2lWZURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgLy8gTOG6pXkgZGFuaCBzw6FjaCBjaOG7lyBuZ+G7k2kgdGhlbyB0b2EgdMOgdVxuICAgIExpc3Q8Q2hvTmdvaT4gZ2V0Q2hvTmdvaUJ5VG9hVGF1KFN0cmluZyBtYVRvYVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIEtp4buDbSB0cmEgY2jhu5cgbmfhu5NpIGPDsyBraOG6oyBk4bulbmcga2jDtG5nICh0aW5oX3RyYW5nID0gdHJ1ZSlcbiAgICBib29sZWFuIGtpZW1UcmFDaG9OZ29pS2hhRHVuZyhTdHJpbmcgbWFDaG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBLaeG7g20gdHJhIGNo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCB0cm9uZyBt4buZdCBs4buLY2ggdHLDrG5oIGPhu6UgdGjhu4MgY2jGsGFcbiAgICBib29sZWFuIGtpZW1UcmFDaG9OZ29pRGFEYXQoU3RyaW5nIG1hQ2hvLCBTdHJpbmcgbWFMaWNoVHJpbmgpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBLaMOzYSBjaOG7lyBuZ+G7k2kgdOG6oW0gdGjhu51pIChraGkga2jDoWNoIGjDoG5nIGNo4buNbilcbiAgICBib29sZWFuIGtob2FDaG9OZ29pKFN0cmluZyBtYUNobywgU3RyaW5nIG1hTGljaFRyaW5oLCBTdHJpbmcgc2Vzc2lvbklkLCBsb25nIHRob2lHaWFuS2hvYU1pbGxpcykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIEjhu6d5IGtow7NhIGNo4buXIG5n4buTaVxuICAgIGJvb2xlYW4gaHV5S2hvYUNob05nb2koU3RyaW5nIG1hQ2hvLCBTdHJpbmcgbWFMaWNoVHJpbmgsIFN0cmluZyBzZXNzaW9uSWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSBraOG6oyBk4bulbmcgY+G7p2EgY2jhu5cgbmfhu5NpICjEkWFuZyBz4butYSBjaOG7r2EgaGF5IGtow7RuZylcbiAgICBib29sZWFuIGNhcE5oYXRLaGFOYW5nU3VEdW5nQ2hvTmdvaShTdHJpbmcgbWFDaG8sIGJvb2xlYW4ga2hhRHVuZykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIMSQ4bq3dCBs4bqhaSB0cuG6oW5nIHRow6FpIMSR4bq3dCBjaOG7lyBuZ+G7k2kgZOG7sWEgdHLDqm4gdsOpXG4gICAgaW50IGRvbmdCb1RyYW5nVGhhaURhdENobygpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyDEkMSDbmcga8O9IGNsaWVudCDEkeG7gyBuaOG6rW4gdGjDtG5nIGLDoW8ga2hpIGPDsyB0aGF5IMSR4buVaSB0cuG6oW5nIHRow6FpIGNo4buXIG5n4buTaVxuICAgIHZvaWQgZGFuZ0t5Q2xpZW50Q2hvVGhvbmdCYW8oQ2hvTmdvaUNhbGxiYWNrIGNhbGxiYWNrKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gSOG7p3kgxJHEg25nIGvDvSBjbGllbnRcbiAgICB2b2lkIGh1eURhbmdLeUNsaWVudENob1Rob25nQmFvKENob05nb2lDYWxsYmFjayBjYWxsYmFjaykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGtpZW1UcmFDaG9OZ29pRGFEYXRUcmVuSGVUSG9uZyhTdHJpbmcgbWFDaG8sIFN0cmluZyBtYVZlTG9haVRydSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFN0cmluZz4gbGF5RGFuaFNhY2hMaWNoVHJpbmhEYURhdENobyhTdHJpbmcgbWFDaG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL1RvYVRhdURvaVZlREFPLmphdmFcbnBhY2thZ2UgZGFvO1xuXG5pbXBvcnQgbW9kZWwuVG9hVGF1O1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlO1xuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcblxucHVibGljIGludGVyZmFjZSBUb2FUYXVEb2lWZURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgLy8gTOG6pXkgZGFuaCBzw6FjaCB0b2EgdMOgdSB0aGVvIG3DoyB0w6B1XG4gICAgTGlzdDxUb2FUYXU+IGdldFRvYVRhdUJ5TWFUYXUoU3RyaW5nIG1hVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vVGhvbmdLZURBTy5qYXZhXG4uLi5cblxuLyoqXG4gKiBJbnRlcmZhY2UgY2hvIHZp4buHYyB0aOG7kW5nIGvDqiBk4buvIGxp4buHdSB2w6kgdMOgdSBxdWEgUk1JXG4gKi9cbnB1YmxpYyBpbnRlcmZhY2UgVGhvbmdLZURBTyBleHRlbmRzIFJlbW90ZSB7XG5cbiAgICAvKipcbiAgICAgKiBUaOG7kW5nIGvDqiBz4buRIGzGsOG7o25nIHbDqSB0aGVvIHRo4budaSBnaWFuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHVOZ2F5IG5nw6B5IGLhuq90IMSR4bqndSB0aOG7kW5nIGvDqlxuICAgICAqIEBwYXJhbSBkZW5OZ2F5IG5nw6B5IGvhur90IHRow7pjIHRo4buRbmcga8OqXG4gICAgICogQHBhcmFtIGxvYWlUaG9pR2lhbiBsb+G6oWkgdGjhu51pIGdpYW4gKE5nw6B5LCBUdeG6p24sIFRow6FuZywgUXXDvSwgTsSDbSlcbiAgICAgKiBAcmV0dXJuIGRhbmggc8OhY2gga+G6v3QgcXXhuqMgdGjhu5FuZyBrw6pcbiAgICAgKiBAdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiBs4buXaSBSTUlcbiAgICAgKi9cbiAgICBMaXN0PEtldFF1YVRob25nS2VWZT4gdGhvbmdLZVZlVGhlb1Rob2lHaWFuKFxuICAgICAgICAgICAgTG9jYWxEYXRlIHR1TmdheSxcbiAgICAgICAgICAgIExvY2FsRGF0ZSBkZW5OZ2F5LFxuICAgICAgICAgICAgU3RyaW5nIGxvYWlUaG9pR2lhbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8qKlxuICAgICAqIEtp4buDbSB0cmEga+G6v3QgbuG7kWkgZGF0YWJhc2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4gdHJ1ZSBu4bq/dSBr4bq/dCBu4buRaSB0aMOgbmggY8O0bmdcbiAgICAgKiBAdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiBs4buXaSBSTUlcbiAgICAgKi9cbiAgICBib29sZWFuIHRlc3RDb25uZWN0aW9uKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9Eb2lWZURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGRhby5Eb2lWZURBTztcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eU1hbmFnZXI7XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlUcmFuc2FjdGlvbjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLk5vUmVzdWx0RXhjZXB0aW9uO1xuaW1wb3J0IG1vZGVsLio7XG5pbXBvcnQgdXRpbC5KUEFVdGlsO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEucm1pLnNlcnZlci5VbmljYXN0UmVtb3RlT2JqZWN0O1xuaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGU7XG5pbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuVVVJRDtcblxucHVibGljIGNsYXNzIERvaVZlREFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBEb2lWZURBTyB7XG5cbiAgICBwdWJsaWMgRG9pVmVEQU9JbXBsKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIC8vIEtow7RuZyBraOG7n2kgdOG6oW8gRW50aXR5TWFuYWdlciB0cm9uZyBjb25zdHJ1Y3RvclxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBWZVRhdSBnZXRWZVRhdShTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgVmVUYXUgdmVUYXUgPSBudWxsO1xuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiBkYXRWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdsOpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIFZlVGF1IHZlVGF1ID0gZW0uZmluZChWZVRhdS5jbGFzcywgbWFWZSk7XG4gICAgICAgICAgICBpZiAodmVUYXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgdsOpIChjaOG7iSBo4buneSDEkcaw4bujYyB2w6kg4bufIHRy4bqhbmcgdGjDoWkgQ0hPX1hBQ19OSEFOIGhv4bq3YyBEQV9USEFOSF9UT0FOKVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTiAmJlxuICAgICAgICAgICAgICAgICAgICB2ZVRhdS5nZXRUcmFuZ1RoYWkoKSAhPSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdp4bqjaSBwaMOzbmcgY2jhu5cgbmfhu5NpXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0Q2hvTmdvaSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBDaG9OZ29pIGNob05nb2kgPSB2ZVRhdS5nZXRDaG9OZ29pKCk7XG4gICAgICAgICAgICAgICAgY2hvTmdvaS5zZXRUaW5oVHJhbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGVtLm1lcmdlKGNob05nb2kpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIERBX1RSQVxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkRBX1RSQSk7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4uLi5cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBib29sZWFuIHRoYW5oVG9hblZlKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgdsOpIGPDsyB04buTbiB04bqhaSBraMO0bmdcbiAgICAgICAgICAgIFZlVGF1IHZlVGF1ID0gZW0uZmluZChWZVRhdS5jbGFzcywgbWFWZSk7XG4gICAgICAgICAgICBpZiAodmVUYXUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHRy4bqhbmcgdGjDoWkgdsOpIChjaOG7iSB0aGFuaCB0b8OhbiDEkcaw4bujYyB2w6kg4bufIHRy4bqhbmcgdGjDoWkgQ0hPX1hBQ19OSEFOKVxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldFRyYW5nVGhhaSgpICE9IFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTikge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6kgdGjDoG5oIERBX1RIQU5IX1RPQU5cbiAgICAgICAgICAgIHZlVGF1LnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOKTtcbiAgICAgICAgICAgIGVtLm1lcmdlKHZlVGF1KTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIGJvb2xlYW4gY2FwTmhhdFRyYW5nVGhhaVZlKFN0cmluZyBtYVZlLCBUcmFuZ1RoYWlWZVRhdSB0cmFuZ1RoYWkpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB2w6kgY8OzIHThu5NuIHThuqFpIGtow7RuZ1xuICAgICAgICAgICAgVmVUYXUgdmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCBtYVZlKTtcbiAgICAgICAgICAgIGlmICh2ZVRhdSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqVxuICAgICAgICAgICAgdmVUYXUuc2V0VHJhbmdUaGFpKHRyYW5nVGhhaSk7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGPhuq1wIG5o4bqtdCB0cuG6oW5nIHRow6FpIHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBj4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB2w6k6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIHRoaXMgbWV0aG9kIHRvIHlvdXIgZXhpc3RpbmcgRG9pVmVEQU9JbXBsIGNsYXNzXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgS2hhY2hIYW5nIGdldEtoYWNoSGFuZ0J5TWFWZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICBLaGFjaEhhbmcga2hhY2hIYW5nID0gbnVsbDtcbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9UcmFWZURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW50aXR5TWFuYWdlcjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLk5vUmVzdWx0RXhjZXB0aW9uO1xuaW1wb3J0IHV0aWwuSlBBVXRpbDtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlbW90ZU9iamVjdDtcblxucHVibGljIGNsYXNzIFRyYVZlREFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBkYW8uVHJhVmVEQU8ge1xuICAgIHByaXZhdGUgRW50aXR5TWFuYWdlciBlbTtcblxuICAgIHB1YmxpYyBUcmFWZURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgdGhpcy5lbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBTdHJpbmcgZ2V0VGVuVHV5ZW5CeU1hVmUoU3RyaW5nIG1hVmUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJcIlwiXG4gICAgICAgICAgICBTRUxFQ1QgdHQudGVuVHV5ZW5cbiAgICAgICAgICAgIEZST00gVmVUYXUgdnRcbiAgICAgICAgICAgIEpPSU4gdnQubGljaFRyaW5oVGF1IGx0dFxuICAgICAgICAgICAgSk9JTiBsdHQudGF1IHRcbiAgICAgICAgICAgIEpPSU4gdC50dXllblRhdSB0dFxuICAgICAgICAgICAgV0hFUkUgdnQubWFWZSA9IDptYVZlXG4gICAgICAgIFwiXCJcIjtcblxuICAgICAgICAgICAgcmV0dXJuIGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFN0cmluZy5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hVmVcIiwgbWFWZSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFNpbmdsZVJlc3VsdCgpO1xuICAgICAgICB9IGNhdGNoIChOb1Jlc3VsdEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gS2jDtG5nIHTDrG0gdGjhuqV5XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vTmhhblZpZW5EQU8uamF2YVxucGFja2FnZSBkYW87XG5cbmltcG9ydCBtb2RlbC5OaGFuVmllbjtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZTtcbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5cbnB1YmxpYyBpbnRlcmZhY2UgTmhhblZpZW5EQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIE5oYW5WaWVuIGdldG5oYW52aWVuQnlJZChTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBib29sZWFuIHNhdmUoTmhhblZpZW4gbnYpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBib29sZWFuIHVwZGF0ZShOaGFuVmllbiBudikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIGJvb2xlYW4gZGVsZXRlKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIExpc3Q8TmhhblZpZW4+IGdldEFsbE5oYW5WaWVuKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHRlc3RDb25uZWN0aW9uKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9UdXllblRhdURBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxuaW1wb3J0IG1vZGVsLlR1eWVuVGF1O1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlO1xuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcblxucHVibGljIGludGVyZmFjZSBUdXllblRhdURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgVHV5ZW5UYXUgZ2V0TGlzdFR1eWVuVGF1QnlHYURpR2FEZW4oU3RyaW5nIGdhRGksIFN0cmluZyBnYURlbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFR1eWVuVGF1PiBnZXRMaXN0VHV5ZW5UYXUoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIFR1eWVuVGF1IGdldFR1eWVuVGF1QnlJZChTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBzYXZlKFR1eWVuVGF1IHR1eWVuVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZGVsZXRlKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHVwZGF0ZShUdXllblRhdSB0dXllblRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBUdXllblRhdSBnZXRUdXllblRhdUJ5TmFtZShTdHJpbmcgbmFtZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBUdXllblRhdSBnZXRMaXN0VHV5ZW5UYXVCeURpZW1EaURpZW1EZW4oU3RyaW5nIGRpZW1EaSwgU3RyaW5nIGRpZW1EZW4pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0xvYWlIb2FEb25EQU8uamF2YVxucGFja2FnZSBkYW87XG5cbmltcG9ydCBtb2RlbC5Mb2FpSG9hRG9uO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlO1xuXG5wdWJsaWMgaW50ZXJmYWNlIExvYWlIb2FEb25EQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIExvYWlIb2FEb24gZmluZEJ5SWQoU3RyaW5nIGlkKSB0aHJvd3MgRXhjZXB0aW9uO1xufVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9DaG9OZ29pREFPLmphdmFcbnBhY2thZ2UgZGFvO1xuXG5pbXBvcnQgbW9kZWwuQ2hvTmdvaTtcblxuaW1wb3J0IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjtcbmltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbmltcG9ydCBqYXZhLnV0aWwuTWFwO1xuXG5wdWJsaWMgaW50ZXJmYWNlIENob05nb2lEQU8ge1xuICAgIE1hcDxTdHJpbmcsIFN0cmluZz4gZ2V0QXZhaWxhYmxlU2VhdHNNYXBCeVNjaGVkdWxlQW5kVG9hKFN0cmluZyBtYUxpY2gsIFN0cmluZyBtYVRvYSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIENob05nb2kgZ2V0QnlJZChTdHJpbmcgaWQpO1xuXG4gICAgcHVibGljIExpc3Q8Q2hvTmdvaT4gZ2V0TGlzdEJ5VG9hKFN0cmluZyBtYVRvYSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9UcmFDdXVWZURBT0ltcGwuamF2YVxucGFja2FnZSBkYW8uaW1wbDtcblxuaW1wb3J0IGRhby5UcmFDdXVWZURBTztcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eU1hbmFnZXI7XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5FbnRpdHlUcmFuc2FjdGlvbjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLlR5cGVkUXVlcnk7XG5pbXBvcnQgbW9kZWwuKjtcbmltcG9ydCB1dGlsLkpQQVV0aWw7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS5ybWkuc2VydmVyLlVuaWNhc3RSZW1vdGVPYmplY3Q7XG5pbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZTtcbmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0O1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuXG5wdWJsaWMgY2xhc3MgVHJhQ3V1VmVEQU9JbXBsIGV4dGVuZHMgVW5pY2FzdFJlbW90ZU9iamVjdCBpbXBsZW1lbnRzIFRyYUN1dVZlREFPIHtcblxuICAgIHB1YmxpYyBUcmFDdXVWZURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgLy8gS2jDtG5nIGto4bufaSB04bqhbyBFbnRpdHlNYW5hZ2VyIHRyb25nIGNvbnN0cnVjdG9yXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFZlVGF1IHRpbVZlVGF1VGhlb01hKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBWZVRhdSB2ZVRhdSA9IG51bGw7XG4uLi5cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBMaXN0PFZlVGF1PiB0aW1EYW5oU2FjaFZlVGF1VGhlb01hKFN0cmluZyBtYVZlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBMaXN0PFZlVGF1PiBkYW5oU2FjaFZlVGF1ID0gbmV3IEFycmF5TGlzdDw+KCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpQUUwgduG7m2kgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB04bqldCBj4bqjIGThu68gbGnhu4d1IGPhuqduIHRoaeG6v3QgdHJvbmcgbeG7mXQgY8OidSBxdWVyeVxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCB2IEZST00gVmVUYXUgdiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB2LmxpY2hUcmluaFRhdSBsdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCBsdC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB0LnR1eWVuVGF1IHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYuY2hvTmdvaSBjIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2Lm1hVmUgPSA6bWFWZVwiO1xuXG4gICAgICAgICAgICBUeXBlZFF1ZXJ5PFZlVGF1PiBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKTtcbiAgICAgICAgICAgIHF1ZXJ5LnNldFBhcmFtZXRlcihcIm1hVmVcIiwgbWFWZSk7XG5cbiAgICAgICAgICAgIGRhbmhTYWNoVmVUYXUgPSBxdWVyeS5nZXRSZXN1bHRMaXN0KCk7XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0xpY2hUcmluaFRhdURBTy5qYXZhXG4uLi5cblxucHVibGljIGludGVyZmFjZSBMaWNoVHJpbmhUYXVEQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIExpc3Q8TGljaFRyaW5oVGF1PiBnZXRBbGxMaXN0KCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaWNoVHJpbmhUYXUgZ2V0QnlJZChTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBzYXZlKExpY2hUcmluaFRhdSBsaWNoVHJpbmhUYXUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB1cGRhdGUoTGljaFRyaW5oVGF1IGxpY2hUcmluaFRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGRlbGV0ZShMaWNoVHJpbmhUYXUgbGljaFRyaW5oVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZGVsZXRlKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PExpY2hUcmluaFRhdT4gZ2V0TGlzdExpY2hUcmluaFRhdUJ5RGF0ZShMb2NhbERhdGUgZGF0ZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PExpY2hUcmluaFRhdT4gZ2V0TGlzdExpY2hUcmluaFRhdUJ5RGF0ZUFuZEdhRGkoTG9jYWxEYXRlIGRhdGUsIFN0cmluZyBnYURpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8TGljaFRyaW5oVGF1PiBnZXRMaXN0TGljaFRyaW5oVGF1QnlEYXRlQW5kR2FEaUdhRGVuKExvY2FsRGF0ZSBkYXRlLCBTdHJpbmcgZ2FEaSwgU3RyaW5nIGdhRGVuKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9Ib2FEb25EQU8uamF2YVxuLi4uXG5cbi8qKlxuICogQEThu7Egw6FuOiBQaGFuVGFuSmF2YU5ob21HUFRcbiAqIEBJbnRlcmZhY2U6IEhvYURvbkRBT1xuICogQFThuqFvIHbDoG8gbmfDoHk6IDE4LzA0LzIwMjVcbiAqIEBUw6FjIGdp4bqjOiBOZ3V5ZW4gSHV1IFNhbmdcbiAqL1xucHVibGljIGludGVyZmFjZSBIb2FEb25EQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIC8vIENyZWF0ZTogVGjDqm0gaMOzYSDEkcahbiBt4bubaVxuICAgIGJvb2xlYW4gc2F2ZUhvYURvbihIb2FEb24gaG9hRG9uKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gUmVhZDogTOG6pXkgZGFuaCBzw6FjaCBow7NhIMSRxqFuXG4gICAgTGlzdDxIb2FEb24+IGdldEFsbEhvYURvbnMoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgLy8gUmVhZDogVMOsbSBow7NhIMSRxqFuIHRoZW8gbcOjIGjDs2EgxJHGoW5cbiAgICBIb2FEb24gZ2V0SG9hRG9uQnlJZChTdHJpbmcgbWFIRCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIC8vIFVwZGF0ZTogQ+G6rXAgbmjhuq10IHRow7RuZyB0aW4gaMOzYSDEkcahblxuICAgIGJvb2xlYW4gdXBkYXRlSG9hRG9uKEhvYURvbiBob2FEb24pIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBEZWxldGU6IFjDs2EgaMOzYSDEkcahbiB0aGVvIG3DoyBow7NhIMSRxqFuXG4gICAgYm9vbGVhbiBkZWxldGVIb2FEb24oU3RyaW5nIG1hSEQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBSZXRyaWV2ZSBpbnZvaWNlcyBieSBjdXN0b21lciBJRFxuICAgIExpc3Q8SG9hRG9uPiBnZXRCeUN1c3RvbWVySWQoU3RyaW5nIGN1c3RvbWVySWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBTdHJpbmcgZ2VuZXJhdGVNYUhvYURvbihMb2NhbERhdGUgbmdheSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMb2FpSG9hRG9uIGdldExvYWlIb2FEb25CeUlkKFN0cmluZyBtYUxvYWlIRCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIExpc3Q8SG9hRG9uPiB0aW1LaWVtSG9hRG9uKFN0cmluZyBtYUhvYURvbiwgU3RyaW5nIHNvRGllblRob2FpLCBTdHJpbmcgbWFOaGFuVmllbiwgICBMb2NhbERhdGUgdHVOZ2F5LCBMb2NhbERhdGUgZGVuTmdheSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuICAgIEhvYURvbiBnZXRIb2FEb25CeU1hKFN0cmluZyBtYUhvYURvbikgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PEhvYURvbj4gZ2V0SG9hRG9uc0J5RGF0ZVJhbmdlKExvY2FsRGF0ZSBzdGFydERhdGUsIExvY2FsRGF0ZSBlbmREYXRlKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExpc3Q8SG9hRG9uPiBnZXRIb2FEb25zQnlEYXRlUmFuZ2VBbmRTaGlmdChMb2NhbERhdGUgc3RhcnREYXRlLCBMb2NhbERhdGUgZW5kRGF0ZSwgaW50IGNhKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9WZVRhdURBT0ltcGwuamF2YVxuLi4uXG5cbnB1YmxpYyBjbGFzcyBWZVRhdURBT0ltcGwgZXh0ZW5kcyBVbmljYXN0UmVtb3RlT2JqZWN0IGltcGxlbWVudHMgVmVUYXVEQU8ge1xuICAgIHB1YmxpYyBWZVRhdURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcblxuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBMaXN0PFZlVGF1PiBnZXRBbGxMaXN0KCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICBMaXN0PFZlVGF1PiBsaXN0ID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG4gICAgICAgICAgICBsaXN0ID0gZW0uY3JlYXRlUXVlcnkoXCJTRUxFQ1QgdnQgRlJPTSBWZVRhdSB2dFwiLCBWZVRhdS5jbGFzcykuZ2V0UmVzdWx0TGlzdCgpO1xuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggVmVUYXVcIik7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIEBPdmVycmlkZVxuICAgIHB1YmxpYyBWZVRhdSBnZXRCeUlkKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgcmV0dXJuIGVtLmZpbmQoVmVUYXUuY2xhc3MsIGlkKTtcbiAgICB9XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0xpY2hMYW1WaWVjREFPLmphdmFcbnBhY2thZ2UgZGFvO1xuXG5pbXBvcnQgamFrYXJ0YS50cmFuc2FjdGlvbi5UcmFuc2FjdGlvbmFsO1xuaW1wb3J0IG1vZGVsLkxpY2hMYW1WaWVjO1xuXG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGU7XG5pbXBvcnQgamF2YS51dGlsLkxpc3Q7XG5cbnB1YmxpYyBpbnRlcmZhY2UgTGljaExhbVZpZWNEQU8ge1xuICAgIExpY2hMYW1WaWVjIGdldExpY2hMYW1WaWVjQnlJZChTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICBib29sZWFuIHNhdmUoTGljaExhbVZpZWMgbGx2KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgYm9vbGVhbiB1cGRhdGUoTGljaExhbVZpZWMgbGx2KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgYm9vbGVhbiBkZWxldGUoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgTGlzdDxMaWNoTGFtVmllYz4gZ2V0Q2FMYW1WaWVjRm9yRGF0ZShTdHJpbmcgbWFOaGFuVmllbiwgTG9jYWxEYXRlIHRvZGF5KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuXG4gICAgQFRyYW5zYWN0aW9uYWxcbiAgICB2b2lkIHVwZGF0ZVRyYW5nVGhhaShTdHJpbmcgbWFMaWNoTGFtVmllYywgU3RyaW5nIHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn1cbi4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vTG9haUtoYWNoSGFuZ0RBTy5qYXZhXG5wYWNrYWdlIGRhbztcblxuaW1wb3J0IG1vZGVsLkxvYWlLaGFjaEhhbmc7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGU7XG5pbXBvcnQgamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uO1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuXG4vKipcbiAqIEBE4buxIMOhbjogUGhhblRhbkphdmFOaG9tR1BUXG4gKiBAQ2xhc3M6IExvYWlLaGFjaEhhbmdEQU9cbiAqIEBU4bqhbyB2w6BvIG5nw6B5OiAxOC8wNC8yMDI1XG4gKiBAVMOhYyBnaeG6ozogTmd1eWVuIEh1dSBTYW5nXG4gKi9cbnB1YmxpYyBpbnRlcmZhY2UgTG9haUtoYWNoSGFuZ0RBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgTGlzdDxMb2FpS2hhY2hIYW5nPiBnZXRBbGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIExvYWlLaGFjaEhhbmcgZmluZEJ5SWQoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gc2F2ZShMb2FpS2hhY2hIYW5nIGxvYWlLaGFjaEhhbmcpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB1cGRhdGUoTG9haUtoYWNoSGFuZyBsb2FpS2hhY2hIYW5nKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gZGVsZXRlKFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcblxuLy8gICAgIExpc3Q8TG9haUtoYWNoSGFuZz4gZ2V0QWxsTGlzdCgpO1xufS4uLlxuUGF0aDogUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vaW1wbC9Ub2FUYXVEb2lWZURBT0ltcGwuamF2YVxuLi4uXG5cbnB1YmxpYyBjbGFzcyBUb2FUYXVEb2lWZURBT0ltcGwgZXh0ZW5kcyBVbmljYXN0UmVtb3RlT2JqZWN0IGltcGxlbWVudHMgVG9hVGF1RG9pVmVEQU8ge1xuXG4gICAgLy8gQ2FjaGUgY2hvIGRhbmggc8OhY2ggdG9hIHTDoHUsIHPhu60gZOG7pW5nIENvbmN1cnJlbnRIYXNoTWFwIMSR4buDIMSR4bqjbSBi4bqjbyB0aHJlYWQtc2FmZVxuICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIE1hcDxTdHJpbmcsIExpc3Q8VG9hVGF1Pj4gdG9hVGF1Q2FjaGUgPSBuZXcgLi4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNjQ0Zjc2YWMtYmNmYS00ZmUxLThhYzgtMWU5NDRjMjIzYmY5O3Rvb2x1XzAxOVVOS04xZmJTR0ZTWHFvZzlZVWVKMyI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL0RvaVZlREFPSW1wbC5qYXZhXG5wYWNrYWdlIGRhby5pbXBsO1xuXG5pbXBvcnQgZGFvLkRvaVZlREFPO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuRW50aXR5TWFuYWdlcjtcbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eVRyYW5zYWN0aW9uO1xuaW1wb3J0IGpha2FydGEucGVyc2lzdGVuY2UuTm9SZXN1bHRFeGNlcHRpb247XG5pbXBvcnQgbW9kZWwuKjtcbmltcG9ydCB1dGlsLkpQQVV0aWw7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS5ybWkuc2VydmVyLlVuaWNhc3RSZW1vdGVPYmplY3Q7XG5pbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZTtcbmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0O1xuaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuaW1wb3J0IGphdmEudXRpbC5VVUlEO1xuXG5wdWJsaWMgY2xhc3MgRG9pVmVEQU9JbXBsIGV4dGVuZHMgVW5pY2FzdFJlbW90ZU9iamVjdCBpbXBsZW1lbnRzIERvaVZlREFPIHtcblxuICAgIHB1YmxpYyBEb2lWZURBT0ltcGwoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgLy8gS2jDtG5nIGto4bufaSB04bqhbyBFbnRpdHlNYW5hZ2VyIHRyb25nIGNvbnN0cnVjdG9yXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFZlVGF1IGdldFZlVGF1KFN0cmluZyBpZCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuICAgICAgICBWZVRhdSB2ZVRhdSA9IG51bGw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpPSU4gRkVUQ0ggxJHhu4MgdOG6o2kgdHLGsOG7m2MgZOG7ryBsaeG7h3UgbGnDqm4gcXVhbiDEkeG7gyB0csOhbmggbOG7l2kgTGF6eUluaXRpYWxpemF0aW9uRXhjZXB0aW9uXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHZ0IEZST00gVmVUYXUgdnQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5saWNoVHJpbmhUYXUgbHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQuY2hvTmdvaSBjbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmtodXllbk1haSBrbSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGx0dC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHZ0Lm1hVmUgPSA6aWRcIjtcblxuICAgICAgICAgICAgdmVUYXUgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBWZVRhdS5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcImlkXCIsIGlkKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0U2luZ2xlUmVzdWx0KCk7XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB0csaw4bubYyBk4buvIGxp4buHdSBsacOqbiBxdWFuXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHZ0IEZST00gVmVUYXUgdnQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB2dC5saWNoVHJpbmhUYXUgbHR0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJMRUZUIEpPSU4gRkVUQ0ggdnQuY2hvTmdvaSBjbiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHZ0LmtodXllbk1haSBrbSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGx0dC50YXUgdCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHZ0LnRyYW5nVGhhaSA9IDp0cmFuZ1RoYWlcIjtcblxuICAgICAgICAgICAgbGlzdCA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpXCIsIHRyYW5nVGhhaSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICAgICAgdHguY29tbWl0KCk7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN5c3RlbS5lcnIucHJpbnRsbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIHbDqSB0aGVvIHRy4bqhbmcgdGjDoWk6IFwiICsgZS5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB2w6kgdGhlbyB0cuG6oW5nIHRow6FpXCIsIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4uLi5cblxuICAgICAgICAgICAgLy8gNy4gR2VuZXJhdGUgdGlja2V0IElEIGlmIG5vdCBwcm92aWRlZFxuICAgICAgICAgICAgaWYgKHZlVGF1LmdldE1hVmUoKSA9PSBudWxsIHx8IHZlVGF1LmdldE1hVmUoKS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBTdHJpbmcgbWFWZSA9IFwiVkVcIiArIFVVSUQucmFuZG9tVVVJRCgpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDgpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdmVUYXUuc2V0TWFWZShtYVZlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHRpY2tldCBJRCBhbHJlYWR5IGV4aXN0c1xuICAgICAgICAgICAgICAgIFZlVGF1IGV4aXN0aW5nVmVUYXUgPSBlbS5maW5kKFZlVGF1LmNsYXNzLCB2ZVRhdS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1ZlVGF1ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIk3DoyB2w6kgxJHDoyB04buTbiB04bqhaSB0cm9uZyBo4buHIHRo4buRbmdcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyA4LiBTZXQgdXAgdGlja2V0IGRhdGEgd2l0aCB2YWxpZCBlbnRpdGllc1xuICAgICAgICAgICAgdmVUYXUuc2V0Q2hvTmdvaShjaG9OZ29pKTtcbiAgICAgICAgICAgIHZlVGF1LnNldExpY2hUcmluaFRhdShsaWNoVHJpbmhUYXUpO1xuXG4gICAgICAgICAgICAvLyBTZXQgZGVmYXVsdCBzdGF0dXMgaWYgbm90IHByb3ZpZGVkXG4gICAgICAgICAgICBpZiAodmVUYXUuZ2V0VHJhbmdUaGFpKCkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZlVGF1LnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pO1xuICAgICAgICAgICAgfVxuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgYm9vbGVhbiB0aGFuaFRvYW5WZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgRW50aXR5VHJhbnNhY3Rpb24gdHggPSBlbS5nZXRUcmFuc2FjdGlvbigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHbDqSBjw7MgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgICBWZVRhdSB2ZVRhdSA9IGVtLmZpbmQoVmVUYXUuY2xhc3MsIG1hVmUpO1xuICAgICAgICAgICAgaWYgKHZlVGF1ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSB0cuG6oW5nIHRow6FpIHbDqSAoY2jhu4kgdGhhbmggdG/DoW4gxJHGsOG7o2MgdsOpIOG7nyB0cuG6oW5nIHRow6FpIENIT19YQUNfTkhBTilcbiAgICAgICAgICAgIGlmICh2ZVRhdS5nZXRUcmFuZ1RoYWkoKSAhPSBUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHRy4bqhbmcgdGjDoWkgdsOpIHRow6BuaCBEQV9USEFOSF9UT0FOXG4gICAgICAgICAgICB2ZVRhdS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuREFfVEhBTkhfVE9BTik7XG4gICAgICAgICAgICBlbS5tZXJnZSh2ZVRhdSk7XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvVHJhVmVEQU9JbXBsLmphdmFcbnBhY2thZ2UgZGFvLmltcGw7XG5cbmltcG9ydCBqYWthcnRhLnBlcnNpc3RlbmNlLkVudGl0eU1hbmFnZXI7XG5pbXBvcnQgamFrYXJ0YS5wZXJzaXN0ZW5jZS5Ob1Jlc3VsdEV4Y2VwdGlvbjtcbmltcG9ydCB1dGlsLkpQQVV0aWw7XG5cbmltcG9ydCBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb247XG5pbXBvcnQgamF2YS5ybWkuc2VydmVyLlVuaWNhc3RSZW1vdGVPYmplY3Q7XG5cbnB1YmxpYyBjbGFzcyBUcmFWZURBT0ltcGwgZXh0ZW5kcyBVbmljYXN0UmVtb3RlT2JqZWN0IGltcGxlbWVudHMgZGFvLlRyYVZlREFPIHtcbiAgICBwcml2YXRlIEVudGl0eU1hbmFnZXIgZW07XG5cbiAgICBwdWJsaWMgVHJhVmVEQU9JbXBsKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIHRoaXMuZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgU3RyaW5nIGdldFRlblR1eWVuQnlNYVZlKFN0cmluZyBtYVZlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiXCJcIlxuICAgICAgICAgICAgU0VMRUNUIHR0LnRlblR1eWVuXG4gICAgICAgICAgICBGUk9NIFZlVGF1IHZ0XG4gICAgICAgICAgICBKT0lOIHZ0LmxpY2hUcmluaFRhdSBsdHRcbiAgICAgICAgICAgIEpPSU4gbHR0LnRhdSB0XG4gICAgICAgICAgICBKT0lOIHQudHV5ZW5UYXUgdHRcbiAgICAgICAgICAgIFdIRVJFIHZ0Lm1hVmUgPSA6bWFWZVxuICAgICAgICBcIlwiXCI7XG5cbiAgICAgICAgICAgIHJldHVybiBlbS5jcmVhdGVRdWVyeShqcHFsLCBTdHJpbmcuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYVZlXCIsIG1hVmUpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRTaW5nbGVSZXN1bHQoKTtcbiAgICAgICAgfSBjYXRjaCAoTm9SZXN1bHRFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIEtow7RuZyB0w6xtIHRo4bqleVxuICAgICAgICB9XG4gICAgfVxuXG59XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvVHJhQ3V1VmVEQU9JbXBsLmphdmFcbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKUFFMIHbhu5tpIEpPSU4gRkVUQ0ggxJHhu4MgdOG6o2kgdOG6pXQgY+G6oyBk4buvIGxp4buHdSBj4bqnbiB0aGnhur90IHRyb25nIG3hu5l0IGPDonUgcXVlcnlcbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgdiBGUk9NIFZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5saWNoVHJpbmhUYXUgbHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggbHQudGF1IHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdC50dXllblRhdSB0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB2LmNob05nb2kgYyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIGMudG9hVGF1IHRvYSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiTEVGVCBKT0lOIEZFVENIIHRvYS5sb2FpVG9hIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2Lm1hVmUgPSA6bWFWZVwiO1xuXG4gICAgICAgICAgICBUeXBlZFF1ZXJ5PFZlVGF1PiBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKTtcbiAgICAgICAgICAgIHF1ZXJ5LnNldFBhcmFtZXRlcihcIm1hVmVcIiwgbWFWZSk7XG5cbiAgICAgICAgICAgIC8vIGdldFNpbmdsZVJlc3VsdCgpIGPDsyB0aOG7gyBuw6ltIE5vUmVzdWx0RXhjZXB0aW9uIG7hur91IGtow7RuZyB0w6xtIHRo4bqleSBr4bq/dCBxdeG6o1xuICAgICAgICAgICAgLy8gbsOqbiBjaMO6bmcgdGEgY+G6p24gYuG6r3Qgbmdv4bqhaSBs4buHIG7DoHkgdsOgIHjhu60gbMO9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZlVGF1ID0gcXVlcnkuZ2V0U2luZ2xlUmVzdWx0KCk7XG4gICAgICAgICAgICB9IGNhdGNoIChqYWthcnRhLnBlcnNpc3RlbmNlLk5vUmVzdWx0RXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgICAgICAvLyBLaMO0bmcgdMOsbSB0aOG6pXkgdsOpLCB0cuG6oyB24buBIG51bGxcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VmVUYXU+IHRpbURhbmhTYWNoVmVUYXVUaGVvTWEoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIExpc3Q8VmVUYXU+IGRhbmhTYWNoVmVUYXUgPSBuZXcgQXJyYXlMaXN0PD4oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSlBRTCB24bubaSBKT0lOIEZFVENIIMSR4buDIHThuqNpIHThuqV0IGPhuqMgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dCB0cm9uZyBt4buZdCBjw6J1IHF1ZXJ5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHYgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYubGljaFRyaW5oVGF1IGx0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5jaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYubWFWZSA9IDptYVZlXCI7XG5cbiAgICAgICAgICAgIFR5cGVkUXVlcnk8VmVUYXU+IHF1ZXJ5ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibWFWZVwiLCBtYVZlKTtcblxuICAgICAgICAgICAgZGFuaFNhY2hWZVRhdSA9IHF1ZXJ5LmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiTOG7l2kga2hpIHTDrG0gZGFuaCBzw6FjaCB2w6kgdMOgdSB0aGVvIG3DozogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSB0w6xtIGRhbmggc8OhY2ggdsOpIHTDoHUgdGhlbyBtw6NcIiwgZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZW0gIT0gbnVsbCAmJiBlbS5pc09wZW4oKSkge1xuICAgICAgICAgICAgICAgIGVtLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGFuaFNhY2hWZVRhdTtcbiAgICB9XG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgQ2hpVGlldEhvYURvbiB0aW1DaGlUaWV0SG9hRG9uVGhlb01hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIENoaVRpZXRIb2FEb24gY2hpVGlldEhvYURvbiA9IG51bGw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFPhu60gZOG7pW5nIEpQUUwgxJHhu4MgbOG6pXkgY2hpIHRp4bq/dCBow7NhIMSRxqFuIG3hu5tpIG5o4bqldCB0aGVvIG5nw6B5IGzhuq1wXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIGMgRlJPTSBDaGlUaWV0SG9hRG9uIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggYy5ob2FEb24gaCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCBjLnZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGMuaWQubWFWZSA9IDptYVZlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJPUkRFUiBCWSBoLm5nYXlMYXAgREVTQ1wiOyAgLy8gU+G6r3AgeOG6v3AgdGhlbyBuZ8OgeSBs4bqtcCBow7NhIMSRxqFuIG3hu5tpIG5o4bqldFxuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxWZVRhdT4gdGltVmVUYXVUaGVvR2lheVRvKFN0cmluZyBnaWF5VG8pIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIExpc3Q8VmVUYXU+IGRhbmhTYWNoVmVUYXUgPSBuZXcgQXJyYXlMaXN0PD4oKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSlBRTCB24bubaSBKT0lOIEZFVENIIMSR4buDIHThuqNpIHThuqV0IGPhuqMgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dCB0cm9uZyBt4buZdCBjw6J1IHF1ZXJ5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHYgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYubGljaFRyaW5oVGF1IGx0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5jaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYuZ2lheVRvID0gOmdpYXlUb1wiO1xuXG4gICAgICAgICAgICBUeXBlZFF1ZXJ5PFZlVGF1PiBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKTtcbiAgICAgICAgICAgIHF1ZXJ5LnNldFBhcmFtZXRlcihcImdpYXlUb1wiLCBnaWF5VG8pO1xuXG4gICAgICAgICAgICBkYW5oU2FjaFZlVGF1ID0gcXVlcnkuZ2V0UmVzdWx0TGlzdCgpO1xuLi4uXG5cbiAgICBAT3ZlcnJpZGVcbiAgICBwdWJsaWMgTGlzdDxWZVRhdT4gdGltVmVUYXVUaGVvVGVuS0goU3RyaW5nIHRlbktoYWNoSGFuZykgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgICAgIEVudGl0eU1hbmFnZXIgZW0gPSBKUEFVdGlsLmdldEVudGl0eU1hbmFnZXIoKTtcbiAgICAgICAgTGlzdDxWZVRhdT4gZGFuaFNhY2hWZVRhdSA9IG5ldyBBcnJheUxpc3Q8PigpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBT4butIGThu6VuZyBKUFFMIHbhu5tpIEpPSU4gRkVUQ0ggxJHhu4MgdOG6o2kgdOG6pXQgY+G6oyBk4buvIGxp4buHdSBj4bqnbiB0aGnhur90IHRyb25nIG3hu5l0IGPDonUgcXVlcnlcbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgdiBGUk9NIFZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5saWNoVHJpbmhUYXUgbHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggbHQudGF1IHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdC50dXllblRhdSB0dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB2LmNob05nb2kgYyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdi50ZW5LaGFjaEhhbmcgPSA6dGVuS2hhY2hIYW5nXCI7XG5cbiAgICAgICAgICAgIFR5cGVkUXVlcnk8VmVUYXU+IHF1ZXJ5ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVmVUYXUuY2xhc3MpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwidGVuS2hhY2hIYW5nXCIsIHRlbktoYWNoSGFuZyk7XG5cbiAgICAgICAgICAgIGRhbmhTYWNoVmVUYXUgPSBxdWVyeS5nZXRSZXN1bHRMaXN0KCk7XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSlBRTCB24bubaSBKT0lOIEZFVENIIMSR4buDIHThuqNpIHThuqV0IGPhuqMgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dCB0cm9uZyBt4buZdCBjw6J1IHF1ZXJ5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHYgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYubGljaFRyaW5oVGF1IGx0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5jaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYudGVuS2hhY2hIYW5nID0gOnRlbktoYWNoSGFuZyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYuZ2lheVRvID0gOmdpYXlUbyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYubmdheURpID0gOm5nYXlEaSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYuY2hvTmdvaS5tYUNobyA9IDptYUNobyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYuZG9pVHVvbmcgPSA6ZG9pVHVvbmdcIjtcblxuICAgICAgICAgICAgVHlwZWRRdWVyeTxWZVRhdT4gcXVlcnkgPSBlbS5jcmVhdGVRdWVyeShqcHFsLCBWZVRhdS5jbGFzcyk7XG4gICAgICAgICAgICBxdWVyeS5zZXRQYXJhbWV0ZXIoXCJ0ZW5LaGFjaEhhbmdcIiwgdGVuS2hhY2hIYW5nKTtcbiAgICAgICAgICAgIHF1ZXJ5LnNldFBhcmFtZXRlcihcImdpYXlUb1wiLCBnaWF5VG8pO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibmdheURpXCIsIG5nYXlEaSk7XG4gICAgICAgICAgICBxdWVyeS5zZXRQYXJhbWV0ZXIoXCJtYUNob1wiLCBtYUNob05nb2kpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwiZG9pVHVvbmdcIiwgZG9pVHVvbmcpO1xuXG4gICAgICAgICAgICB2ZVRhdUxpc3QgPSBxdWVyeS5nZXRSZXN1bHRMaXN0KCk7XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSlBRTCB24bubaSBKT0lOIEZFVENIIMSR4buDIHThuqNpIHThuqV0IGPhuqMgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dCB0cm9uZyBt4buZdCBjw6J1IHF1ZXJ5XG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIHYgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHYubGljaFRyaW5oVGF1IGx0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGx0LnRhdSB0IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIHQudHV5ZW5UYXUgdHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gRkVUQ0ggdi5jaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYudGVuS2hhY2hIYW5nID0gOnRlbktoYWNoSGFuZyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYubmdheURpIEJFVFdFRU4gOm5nYXlEaUZyb20gQU5EIDpuZ2F5RGlUb1wiO1xuXG4gICAgICAgICAgICBUeXBlZFF1ZXJ5PFZlVGF1PiBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFZlVGF1LmNsYXNzKTtcbiAgICAgICAgICAgIHF1ZXJ5LnNldFBhcmFtZXRlcihcInRlbktoYWNoSGFuZ1wiLCBob1Rlbik7XG4gICAgICAgICAgICBxdWVyeS5zZXRQYXJhbWV0ZXIoXCJuZ2F5RGlGcm9tXCIsIG5nYXlEaUZyb20pO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibmdheURpVG9cIiwgbmdheURpVG8pO1xuXG4gICAgICAgICAgICB2ZVRhdUxpc3QgPSBxdWVyeS5nZXRSZXN1bHRMaXN0KCk7XG4uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0RvaVZlREFPLmphdmFcbi4uLlxuXG5wdWJsaWMgaW50ZXJmYWNlIERvaVZlREFPIGV4dGVuZHMgUmVtb3RlIHtcbiAgICBWZVRhdSBnZXRWZVRhdShTdHJpbmcgaWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiBkb2lWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFZlVGF1PiBnZXRWZVRhdUJ5VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1IHRyYW5nVGhhaSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIHRlc3RDb25uZWN0aW9uKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBMaXN0PFRyYW5nVGhhaVZlVGF1PiBnZXRBbGxUcmFuZ1RoYWlWZSgpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbiAgICAvLyBUaMOqbSBjaOG7qWMgbsSDbmcgbeG7m2lcbiAgICBib29sZWFuIGRhdFZlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIGJvb2xlYW4gaHV5VmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG4gICAgYm9vbGVhbiB0aGFuaFRvYW5WZShTdHJpbmcgbWFWZSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbiAgICBib29sZWFuIGNhcE5oYXRUcmFuZ1RoYWlWZShTdHJpbmcgbWFWZSwgVHJhbmdUaGFpVmVUYXUgdHJhbmdUaGFpKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uO1xuICAgIEtoYWNoSGFuZyBnZXRLaGFjaEhhbmdCeU1hVmUoU3RyaW5nIG1hVmUpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG5cbn0uLi5cblBhdGg6IFByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvVG9hVGF1RG9pVmVEQU9JbXBsLmphdmFcbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICAvLyBU4buRaSDGsHUgcXVlcnkgxJHhu4MgY2jhu4kgbOG6pXkgZOG7ryBsaeG7h3UgY+G6p24gdGhp4bq/dFxuICAgICAgICAgICAgU3RyaW5nIGpwcWwgPSBcIlNFTEVDVCBESVNUSU5DVCB0IEZST00gVG9hVGF1IHQgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB0LmxvYWlUb2EgbGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCB0LnRhdSB0YSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgdC50YXUubWFUYXUgPSA6bWFUYXVcIjtcblxuICAgICAgICAgICAgTGlzdDxUb2FUYXU+IGRzVG9hVGF1ID0gZW0uY3JlYXRlUXVlcnkoanBxbCwgVG9hVGF1LmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFUYXVcIiwgbWFUYXUpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRSZXN1bHRMaXN0KCk7XG5cbiAgICAgICAgICAgIC8vIENo4buJIHThuqNpIG5o4buvbmcgdGh14buZYyB0w61uaCB0aOG7sWMgc+G7sSBj4bqnbiB0aGnhur90XG4gICAgICAgICAgICBmb3IgKFRvYVRhdSB0b2FUYXUgOiBkc1RvYVRhdSkge1xuICAgICAgICAgICAgICAgIGlmICh0b2FUYXUuZ2V0TG9haVRvYSgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hVGF1LmdldExvYWlUb2EoKS5nZXRUZW5Mb2FpKCk7XG4gICAgICAgICAgICAgICAgICAgIHRvYVRhdS5nZXRMb2FpVG9hKCkuZ2V0TWFMb2FpKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0b2FUYXUuZ2V0VGF1KCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0b2FUYXUuZ2V0VGF1KCkuZ2V0TWFUYXUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuXG4gICAgICAgICAgICAvLyBMxrB1IGvhur90IHF14bqjIHbDoG8gY2FjaGVcbiAgICAgICAgICAgIHVwZGF0ZUNhY2hlKG1hVGF1LCBkc1RvYVRhdSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkc1RvYVRhdTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL0Nob05nb2lEb2lWZURBT0ltcGwuamF2YVxuLi4uXG5cbiAgICAgICAgICAgIC8vIE1hcCBzZWF0IElEcyB0byB0aGVpciB0aWNrZXQgc3RhdHVzXG4gICAgICAgICAgICBmb3IgKFZlVGF1IHZlIDogdGlja2V0cykge1xuICAgICAgICAgICAgICAgIC8vIExhdGVzdCB0aWNrZXQgc3RhdHVzIGZvciBlYWNoIHNlYXQgdGFrZXMgcHJlY2VkZW5jZVxuICAgICAgICAgICAgICAgIFN0cmluZyBtYUNobyA9IHZlLmdldENob05nb2koKS5nZXRNYUNobygpO1xuICAgICAgICAgICAgICAgIFRyYW5nVGhhaVZlVGF1IGN1cnJlbnRTdGF0dXMgPSByZXN1bHQuZ2V0KG1hQ2hvKTtcblxuICAgICAgICAgICAgICAgIC8vIE9ubHkgb3ZlcndyaXRlIGlmOlxuICAgICAgICAgICAgICAgIC8vIDEuIE5vIHN0YXR1cyBleGlzdHMgeWV0LCBvclxuICAgICAgICAgICAgICAgIC8vIDIuIE5ldyBzdGF0dXMgaXMgREFfVEhBTkhfVE9BTiAodGFrZXMgcHJlY2VkZW5jZSksIG9yXG4gICAgICAgICAgICAgICAgLy8gMy4gQ3VycmVudCBpcyBub3QgREFfVEhBTkhfVE9BTiBhbmQgbmV3IGlzIERBX0RPSSBvciBEQV9UUkFcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFN0YXR1cyA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZS5nZXRUcmFuZ1RoYWkoKSA9PSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoY3VycmVudFN0YXR1cyAhPSBUcmFuZ1RoYWlWZVRhdS5EQV9USEFOSF9UT0FOICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh2ZS5nZXRUcmFuZ1RoYWkoKSA9PSBUcmFuZ1RoYWlWZVRhdS5EQV9ET0kgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZS5nZXRUcmFuZ1RoYWkoKSA9PSBUcmFuZ1RoYWlWZVRhdS5EQV9UUkEpKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXQobWFDaG8sIHZlLmdldFRyYW5nVGhhaSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4uLi5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcblxuICAgICAgICAgICAgLy8gU+G7rSBk4bulbmcgSk9JTiBGRVRDSCDEkeG7gyB04bqjaSB0csaw4bubYyBk4buvIGxp4buHdSBsacOqbiBxdWFuXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIERJU1RJTkNUIGMgRlJPTSBDaG9OZ29pIGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkxFRlQgSk9JTiBGRVRDSCBjLmxvYWlDaG8gbGMgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGMudG9hVGF1Lm1hVG9hID0gOm1hVG9hVGF1XCI7XG5cbiAgICAgICAgICAgIGRzQ2hvTmdvaSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIENob05nb2kuY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYVRvYVRhdVwiLCBtYVRvYVRhdSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcblxuICAgICAgICAgICAgLy8gxJDhuqNtIGLhuqNvIGPDoWMgdGh14buZYyB0w61uaCBsYXp5IMSRxrDhu6NjIHThuqNpXG4gICAgICAgICAgICBmb3IgKENob05nb2kgY2hvTmdvaSA6IGRzQ2hvTmdvaSkge1xuICAgICAgICAgICAgICAgIGlmIChjaG9OZ29pLmdldExvYWlDaG8oKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNob05nb2kuZ2V0TG9haUNobygpLmdldFRlbkxvYWkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGzhuqV5IGRhbmggc8OhY2ggY2jhu5cgbmfhu5NpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlbSAhPSBudWxsICYmIGVtLmlzT3BlbigpKSB7XG4gICAgICAgICAgICAgICAgZW0uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkc0Nob05nb2k7XG4gICAgfVxuLi4uXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHR4LmJlZ2luKCk7XG5cbiAgICAgICAgICAgIFN0cmluZyBqcHFsID0gXCJTRUxFQ1QgQ09VTlQodikgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSB2LmNob05nb2kubWFDaG8gPSA6bWFDaG8gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkFORCB2LnRyYW5nVGhhaSBOT1QgSU4gKDp0cmFuZ1RoYWlEYVRyYSwgOnRyYW5nVGhhaURhRG9pKVwiO1xuXG4gICAgICAgICAgICAvLyBO4bq/dSBjw7MgbcOjIHbDqSBj4bqnbiBsb+G6oWkgdHLhu6ssIHRow6ptIMSRaeG7gXUga2nhu4duXG4gICAgICAgICAgICBpZiAobWFWZUxvYWlUcnUgIT0gbnVsbCAmJiAhbWFWZUxvYWlUcnUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAganBxbCArPSBcIiBBTkQgdi5tYVZlICE9IDptYVZlTG9haVRydVwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBRdWVyeSBxdWVyeSA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwpO1xuICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibWFDaG9cIiwgbWFDaG8pXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlEYVRyYVwiLCBUcmFuZ1RoYWlWZVRhdS5EQV9UUkEpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlEYURvaVwiLCBUcmFuZ1RoYWlWZVRhdS5EQV9ET0kpO1xuXG4gICAgICAgICAgICBpZiAobWFWZUxvYWlUcnUgIT0gbnVsbCAmJiAhbWFWZUxvYWlUcnUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkuc2V0UGFyYW1ldGVyKFwibWFWZUxvYWlUcnVcIiwgbWFWZUxvYWlUcnUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBMb25nIGNvdW50ID0gKExvbmcpIHF1ZXJ5LmdldFNpbmdsZVJlc3VsdCgpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiBjb3VudCA+IDA7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICBpZiAodHggIT0gbnVsbCAmJiB0eC5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgdHgucm9sbGJhY2soKTtcbiAgICAgICAgICAgIH1cbi4uLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuXG4gICAgICAgICAgICBTdHJpbmcganBxbCA9IFwiU0VMRUNUIERJU1RJTkNUIHYubGljaFRyaW5oVGF1Lm1hTGljaCBGUk9NIFZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIHYuY2hvTmdvaS5tYUNobyA9IDptYUNobyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYudHJhbmdUaGFpIE5PVCBJTiAoOnRyYW5nVGhhaURhVHJhLCA6dHJhbmdUaGFpRGFEb2kpXCI7XG5cbiAgICAgICAgICAgIExpc3Q8U3RyaW5nPiBkYW5oU2FjaExpY2hUcmluaCA9IGVtLmNyZWF0ZVF1ZXJ5KGpwcWwsIFN0cmluZy5jbGFzcylcbiAgICAgICAgICAgICAgICAgICAgLnNldFBhcmFtZXRlcihcIm1hQ2hvXCIsIG1hQ2hvKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpRGFUcmFcIiwgVHJhbmdUaGFpVmVUYXUuREFfVFJBKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpRGFEb2lcIiwgVHJhbmdUaGFpVmVUYXUuREFfRE9JKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0UmVzdWx0TGlzdCgpO1xuXG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgICAgIHJldHVybiBkYW5oU2FjaExpY2hUcmluaDtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIGlmICh0eCAhPSBudWxsICYmIHR4LmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0eC5yb2xsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSBs4bqleSBkYW5oIHPDoWNoIGzhu4tjaCB0csOsbmggxJHDoyDEkeG6t3QgY2jhu5c6IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGVtICE9IG51bGwgJiYgZW0uaXNPcGVuKCkpIHtcbiAgICAgICAgICAgICAgICBlbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuLi4uXG5QYXRoOiBQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL1ZlVGF1REFPSW1wbC5qYXZhXG4uLi5cblxucHVibGljIGNsYXNzIFZlVGF1REFPSW1wbCBleHRlbmRzIFVuaWNhc3RSZW1vdGVPYmplY3QgaW1wbGVtZW50cyBWZVRhdURBTyB7XG4gICAgcHVibGljIFZlVGF1REFPSW1wbCgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuXG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VmVUYXU+IGdldEFsbExpc3QoKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICBFbnRpdHlUcmFuc2FjdGlvbiB0eCA9IGVtLmdldFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIExpc3Q8VmVUYXU+IGxpc3QgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdHguYmVnaW4oKTtcbiAgICAgICAgICAgIGxpc3QgPSBlbS5jcmVhdGVRdWVyeShcIlNFTEVDVCB2dCBGUk9NIFZlVGF1IHZ0XCIsIFZlVGF1LmNsYXNzKS5nZXRSZXN1bHRMaXN0KCk7XG4gICAgICAgICAgICB0eC5jb21taXQoKTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCBWZVRhdVwiKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIFZlVGF1IGdldEJ5SWQoU3RyaW5nIGlkKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICAgICAgRW50aXR5TWFuYWdlciBlbSA9IEpQQVV0aWwuZ2V0RW50aXR5TWFuYWdlcigpO1xuICAgICAgICByZXR1cm4gZW0uZmluZChWZVRhdS5jbGFzcywgaWQpO1xuICAgIH1cbi4uLlxuXG4gICAgQE92ZXJyaWRlXG4gICAgcHVibGljIExpc3Q8VmVUYXU+IGdldEJ5SW52b2ljZUlkKFN0cmluZyBpbnZvaWNlSWQpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgICAgICBFbnRpdHlNYW5hZ2VyIGVtID0gSlBBVXRpbC5nZXRFbnRpdHlNYW5hZ2VyKCk7XG4gICAgICAgIEVudGl0eVRyYW5zYWN0aW9uIHR4ID0gZW0uZ2V0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgTGlzdDxWZVRhdT4gbGlzdCA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5iZWdpbigpO1xuICAgICAgICAgICAgU3RyaW5nIHF1ZXJ5ID0gXCJTRUxFQ1QgRElTVElOQ1QgdnQgRlJPTSBWZVRhdSB2dCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiSk9JTiBGRVRDSCB2dC5jaGlUaWV0SG9hRG9ucyBjdGhkIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIEZFVENIIGN0aGQuaG9hRG9uIGhkIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJXSEVSRSBoZC5tYUhEID0gOmludm9pY2VJZFwiO1xuXG4gICAgICAgICAgICBsaXN0ID0gZW0uY3JlYXRlUXVlcnkocXVlcnksIFZlVGF1LmNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwiaW52b2ljZUlkXCIsIGludm9pY2VJZClcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlc3VsdExpc3QoKTtcbiAgICAgICAgICAgIHR4LmNvbW1pdCgpO1xuICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICAgICAgaWYgKHR4ICE9IG51bGwgJiYgdHguaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgIHR4LnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJM4buXaSBraGkgbOG6pXkgZGFuaCBzw6FjaCB2w6kgdGhlbyBow7NhIMSRxqFuOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIH0gZmluYWwuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIwMDI3ODc1NC02NDYzLTQ0NzMtYWRhOS1mYzk0ZDU0ODVkYWQ7dG9vbHVfdnJ0eF8wMUZnVEtpQ3I3RVU2aWVZbVNTYmtKb24iOnsicGhhc2UiOjYsInJlc3VsdCI6eyJ0ZXh0IjoiRmlsZSBhbHJlYWR5IGV4aXN0czogRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbF9GaXguamF2YSIsImlzRXJyb3IiOnRydWUsInJlcXVlc3RJZCI6IiJ9fX0sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjp0cnVlLCJleHRyYURhdGEiOnsiaXNBZ2VudENvbnZlcnNhdGlvbiI6dHJ1ZSwiaGFzQWdlbnRPbmJvYXJkZWQiOnRydWUsImhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjAsImRyYWZ0QWN0aXZlQ29udGV4dElkcyI6WyJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmEiLCJEOi9Db2RlL1BoYW5UYW5KYXZhTmhvbUdQVC9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZ2ZhbHNlZmFsc2UiLCJhZ2VudE1lbW9yaWVzIl19LCJiODM2OTgzOS1iN2IxLTRiOTUtYmZmMC05MzM1MmIxZmYyYWMiOnsiaWQiOiJiODM2OTgzOS1iN2IxLTRiOTUtYmZmMC05MzM1MmIxZmYyYWMiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA0LTIyVDA5OjQ1OjAzLjI2OFoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNC0yMlQwOTo1Njo0MS4zNzhaIiwiY2hhdEhpc3RvcnkiOlt7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMDEwZDdiNmMtNzY2Ny00MTE2LWEwNGEtYWQ5OTM3OTQ3Y2MzIiwicmVxdWVzdF9tZXNzYWdlIjoixJHhu41jIGzhuqFpIHRvw6BuIGLhu5kgZOG7sSDDoW4gZ2nDunAgdMO0aSBmaXggbOG7l2kgRXJyb3IgaW4geHVMeVRoYW5oVG9hbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHJcbmphdmEucm1pLlNlcnZlckV4Y2VwdGlvbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzkyKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhjZXB0aW9uUmVjZWl2ZWRGcm9tU2VydmVyKFN0cmVhbVJlbW90ZUNhbGwuamF2YTozMDQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuU3RyZWFtUmVtb3RlQ2FsbC5leGVjdXRlQ2FsbChTdHJlYW1SZW1vdGVDYWxsLmphdmE6MjgwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RSZWYuaW52b2tlKFVuaWNhc3RSZWYuamF2YToxNjYpXHJcblx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZVJlbW90ZU1ldGhvZChSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjIxNSlcclxuXHRhdCBqYXZhLnJtaS9qYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuaW52b2tlKFJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmphdmE6MTYwKVxyXG5cdGF0IGpkay5wcm94eTIvamRrLnByb3h5Mi4kUHJveHk3Ni5kYXRWZShVbmtub3duIFNvdXJjZSlcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC54dUx5VGhhbmhUb2FuKERvaVZlUGFuZWwuamF2YToyOTA4KVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmRvaVZlKERvaVZlUGFuZWwuamF2YToxMzE4KVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmxhbWJkYSRjcmVhdGVCdXR0b25QYW5lbCQ3KERvaVZlUGFuZWwuamF2YTo4MDQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkFic3RyYWN0QnV0dG9uLmZpcmVBY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToxOTcyKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbiRIYW5kbGVyLmFjdGlvblBlcmZvcm1lZChBYnN0cmFjdEJ1dHRvbi5qYXZhOjIzMTQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5maXJlQWN0aW9uUGVyZm9ybWVkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjQwNylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuRGVmYXVsdEJ1dHRvbk1vZGVsLnNldFByZXNzZWQoRGVmYXVsdEJ1dHRvbk1vZGVsLmphdmE6MjYyKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5wbGFmLmJhc2ljLkJhc2ljQnV0dG9uTGlzdGVuZXIubW91c2VSZWxlYXNlZChCYXNpY0J1dHRvbkxpc3RlbmVyLmphdmE6Mjc5KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5BV1RFdmVudE11bHRpY2FzdGVyLm1vdXNlUmVsZWFzZWQoQVdURXZlbnRNdWx0aWNhc3Rlci5qYXZhOjI5NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KENvbXBvbmVudC5qYXZhOjY2MjEpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkpDb21wb25lbnQucHJvY2Vzc01vdXNlRXZlbnQoSkNvbXBvbmVudC5qYXZhOjMzOTgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzRXZlbnQoQ29tcG9uZW50LmphdmE6NjM4NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLnByb2Nlc3NFdmVudChDb250YWluZXIuamF2YToyMjY2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudEltcGwoQ29tcG9uZW50LmphdmE6NDk5NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLmRpc3BhdGNoRXZlbnRJbXBsKENvbnRhaW5lci5qYXZhOjIzMjQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5yZXRhcmdldE1vdXNlRXZlbnQoQ29udGFpbmVyLmphdmE6NDk0OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLnByb2Nlc3NNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ1NzUpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KENvbnRhaW5lci5qYXZhOjQ1MTYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzEwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5XaW5kb3cuZGlzcGF0Y2hFdmVudEltcGwoV2luZG93LmphdmE6Mjc4MClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnQoQ29tcG9uZW50LmphdmE6NDgyOClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50SW1wbChFdmVudFF1ZXVlLmphdmE6Nzc1KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MjApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNC5ydW4oRXZlbnRRdWV1ZS5qYXZhOjcxNClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6ODcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo5OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDUucnVuKEV2ZW50UXVldWUuamF2YTo3NDUpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlLmRpc3BhdGNoRXZlbnQoRXZlbnRRdWV1ZS5qYXZhOjc0NClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wT25lRXZlbnRGb3JGaWx0ZXJzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToyMDMpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50c0ZvckZpbHRlcihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTI0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JIaWVyYXJjaHkoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjExMylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMDkpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTAxKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnJ1bihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6OTApXHJcbkNhdXNlZCBieTogamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuXHRhdCBkYW8uaW1wbC5Eb2lWZURBT0ltcGwuZGF0VmUoRG9pVmVEQU9JbXBsLmphdmE6NDMwKVxyXG5cdGF0IGphdmEuYmFzZS9qZGsuaW50ZXJuYWwucmVmbGVjdC5EaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5pbnZva2UoRGlyZWN0TWV0aG9kSGFuZGxlQWNjZXNzb3IuamF2YToxMDMpXHJcblx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5yZWZsZWN0Lk1ldGhvZC5pbnZva2UoTWV0aG9kLmphdmE6NTgwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM2MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcclxuQ2F1c2VkIGJ5OiBqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuXHRhdCBkYW8uaW1wbC5Eb2lWZURBT0ltcGwuZGF0VmUoRG9pVmVEQU9JbXBsLmphdmE6MzQ0KVxyXG5cdC4uLiAxNSBtb3JlXHJcbmphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIHjhu60gbMO9IHRoYW5oIHRvw6FuOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEucm1pLlNlcnZlckV4Y2VwdGlvbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6Mjk2NilcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5kb2lWZShEb2lWZVBhbmVsLmphdmE6MTMxOClcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5sYW1iZGEkY3JlYXRlQnV0dG9uUGFuZWwkNyhEb2lWZVBhbmVsLmphdmE6ODA0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbi5maXJlQWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MTk3MilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24kSGFuZGxlci5hY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToyMzE0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuZmlyZUFjdGlvblBlcmZvcm1lZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YTo0MDcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5zZXRQcmVzc2VkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjI2MilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcucGxhZi5iYXNpYy5CYXNpY0J1dHRvbkxpc3RlbmVyLm1vdXNlUmVsZWFzZWQoQmFzaWNCdXR0b25MaXN0ZW5lci5qYXZhOjI3OSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQVdURXZlbnRNdWx0aWNhc3Rlci5tb3VzZVJlbGVhc2VkKEFXVEV2ZW50TXVsdGljYXN0ZXIuamF2YToyOTcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChDb21wb25lbnQuamF2YTo2NjIxKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5KQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KEpDb21wb25lbnQuamF2YTozMzk4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc0V2ZW50KENvbXBvbmVudC5qYXZhOjYzODYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5wcm9jZXNzRXZlbnQoQ29udGFpbmVyLmphdmE6MjI2NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnRJbXBsKENvbXBvbmVudC5qYXZhOjQ5OTYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzI0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucmV0YXJnZXRNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ5NDgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5wcm9jZXNzTW91c2VFdmVudChDb250YWluZXIuamF2YTo0NTc1KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChDb250YWluZXIuamF2YTo0NTE2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMxMClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuV2luZG93LmRpc3BhdGNoRXZlbnRJbXBsKFdpbmRvdy5qYXZhOjI3ODApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudEltcGwoRXZlbnRRdWV1ZS5qYXZhOjc3NSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzIwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MTQpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6OTgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ1KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50KEV2ZW50UXVldWUuamF2YTo3NDQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcE9uZUV2ZW50Rm9yRmlsdGVycyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MjAzKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JGaWx0ZXIoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEyNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9ySGllcmFyY2h5KEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMTMpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTA5KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwMSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5ydW4oRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjkwKVxyXG5DYXVzZWQgYnk6IGphdmEucm1pLlNlcnZlckV4Y2VwdGlvbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzkyKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhjZXB0aW9uUmVjZWl2ZWRGcm9tU2VydmVyKFN0cmVhbVJlbW90ZUNhbGwuamF2YTozMDQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuU3RyZWFtUmVtb3RlQ2FsbC5leGVjdXRlQ2FsbChTdHJlYW1SZW1vdGVDYWxsLmphdmE6MjgwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RSZWYuaW52b2tlKFVuaWNhc3RSZWYuamF2YToxNjYpXHJcblx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZVJlbW90ZU1ldGhvZChSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjIxNSlcclxuXHRhdCBqYXZhLnJtaS9qYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuaW52b2tlKFJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmphdmE6MTYwKVxyXG5cdGF0IGpkay5wcm94eTIvamRrLnByb3h5Mi4kUHJveHk3Ni5kYXRWZShVbmtub3duIFNvdXJjZSlcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC54dUx5VGhhbmhUb2FuKERvaVZlUGFuZWwuamF2YToyOTA4KVxyXG5cdC4uLiAzOCBtb3JlXHJcbkNhdXNlZCBieTogamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuXHRhdCBkYW8uaW1wbC5Eb2lWZURBT0ltcGwuZGF0VmUoRG9pVmVEQU9JbXBsLmphdmE6NDMwKVxyXG5cdGF0IGphdmEuYmFzZS9qZGsuaW50ZXJuYWwucmVmbGVjdC5EaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5pbnZva2UoRGlyZWN0TWV0aG9kSGFuZGxlQWNjZXNzb3IuamF2YToxMDMpXHJcblx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5yZWZsZWN0Lk1ldGhvZC5pbnZva2UoTWV0aG9kLmphdmE6NTgwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM2MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcclxuQ2F1c2VkIGJ5OiBqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuXHRhdCBkYW8uaW1wbC5Eb2lWZURBT0ltcGwuZGF0VmUoRG9pVmVEQU9JbXBsLmphdmE6MzQ0KVxyXG5cdC4uLiAxNSBtb3JlXHJcblxuIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IsSR4buNYyBs4bqhaSB0b8OgbiBi4buZIGThu7Egw6FuIGdpw7pwIHTDtGkgZml4IGzhu5dpIEVycm9yIGluIHh1THlUaGFuaFRvYW46IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJqYXZhLnJtaS5TZXJ2ZXJFeGNlcHRpb246IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM5MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4Y2VwdGlvblJlY2VpdmVkRnJvbVNlcnZlcihTdHJlYW1SZW1vdGVDYWxsLmphdmE6MzA0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhlY3V0ZUNhbGwoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjI4MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0UmVmLmludm9rZShVbmljYXN0UmVmLmphdmE6MTY2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2VSZW1vdGVNZXRob2QoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToyMTUpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZShSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjE2MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqZGsucHJveHkyL2pkay5wcm94eTIuJFByb3h5NzYuZGF0VmUoVW5rbm93biBTb3VyY2UpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6MjkwOClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5kb2lWZShEb2lWZVBhbmVsLmphdmE6MTMxOClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5sYW1iZGEkY3JlYXRlQnV0dG9uUGFuZWwkNyhEb2lWZVBhbmVsLmphdmE6ODA0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbi5maXJlQWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MTk3MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24kSGFuZGxlci5hY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToyMzE0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuZmlyZUFjdGlvblBlcmZvcm1lZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YTo0MDcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5zZXRQcmVzc2VkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjI2MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcucGxhZi5iYXNpYy5CYXNpY0J1dHRvbkxpc3RlbmVyLm1vdXNlUmVsZWFzZWQoQmFzaWNCdXR0b25MaXN0ZW5lci5qYXZhOjI3OSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQVdURXZlbnRNdWx0aWNhc3Rlci5tb3VzZVJlbGVhc2VkKEFXVEV2ZW50TXVsdGljYXN0ZXIuamF2YToyOTcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChDb21wb25lbnQuamF2YTo2NjIxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5KQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KEpDb21wb25lbnQuamF2YTozMzk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc0V2ZW50KENvbXBvbmVudC5qYXZhOjYzODYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5wcm9jZXNzRXZlbnQoQ29udGFpbmVyLmphdmE6MjI2NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnRJbXBsKENvbXBvbmVudC5qYXZhOjQ5OTYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzI0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucmV0YXJnZXRNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ5NDgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5wcm9jZXNzTW91c2VFdmVudChDb250YWluZXIuamF2YTo0NTc1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChDb250YWluZXIuamF2YTo0NTE2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMxMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuV2luZG93LmRpc3BhdGNoRXZlbnRJbXBsKFdpbmRvdy5qYXZhOjI3ODApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudEltcGwoRXZlbnRRdWV1ZS5qYXZhOjc3NSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzIwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MTQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6OTgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50KEV2ZW50UXVldWUuamF2YTo3NDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcE9uZUV2ZW50Rm9yRmlsdGVycyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MjAzKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JGaWx0ZXIoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEyNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9ySGllcmFyY2h5KEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMTMpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTA5KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwMSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5ydW4oRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjkwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJDYXVzZWQgYnk6IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjQzMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamRrLmludGVybmFsLnJlZmxlY3QuRGlyZWN0TWV0aG9kSGFuZGxlQWNjZXNzb3IuaW52b2tlKERpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmphdmE6MTAzKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcucmVmbGVjdC5NZXRob2QuaW52b2tlKE1ldGhvZC5qYXZhOjU4MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0U2VydmVyUmVmLmRpc3BhdGNoKFVuaWNhc3RTZXJ2ZXJSZWYuamF2YTozNjApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjIwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MTk3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo3MTQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0LnNlcnZpY2VDYWxsKFRyYW5zcG9ydC5qYXZhOjE5NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0LmhhbmRsZU1lc3NhZ2VzKFRDUFRyYW5zcG9ydC5qYXZhOjU5OClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bjAoVENQVHJhbnNwb3J0LmphdmE6ODQ0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIubGFtYmRhJHJ1biQwKFRDUFRyYW5zcG9ydC5qYXZhOjcyMSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuKFRDUFRyYW5zcG9ydC5qYXZhOjcyMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yLnJ1bldvcmtlcihUaHJlYWRQb29sRXhlY3V0b3IuamF2YToxMTQ0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IkV29ya2VyLnJ1bihUaHJlYWRQb29sRXhlY3V0b3IuamF2YTo2NDIpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5UaHJlYWQucnVuKFRocmVhZC5qYXZhOjE1NzApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkNhdXNlZCBieTogamF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjM0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHQuLi4gMTUgbW9yZVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSB44butIGzDvSB0aGFuaCB0b8OhbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLnJtaS5TZXJ2ZXJFeGNlcHRpb246IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLnh1THlUaGFuaFRvYW4oRG9pVmVQYW5lbC5qYXZhOjI5NjYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwuZG9pVmUoRG9pVmVQYW5lbC5qYXZhOjEzMTgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwubGFtYmRhJGNyZWF0ZUJ1dHRvblBhbmVsJDcoRG9pVmVQYW5lbC5qYXZhOjgwNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24uZmlyZUFjdGlvblBlcmZvcm1lZChBYnN0cmFjdEJ1dHRvbi5qYXZhOjE5NzIpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkFic3RyYWN0QnV0dG9uJEhhbmRsZXIuYWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MjMxNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuRGVmYXVsdEJ1dHRvbk1vZGVsLmZpcmVBY3Rpb25QZXJmb3JtZWQoRGVmYXVsdEJ1dHRvbk1vZGVsLmphdmE6NDA3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuc2V0UHJlc3NlZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YToyNjIpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLnBsYWYuYmFzaWMuQmFzaWNCdXR0b25MaXN0ZW5lci5tb3VzZVJlbGVhc2VkKEJhc2ljQnV0dG9uTGlzdGVuZXIuamF2YToyNzkpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkFXVEV2ZW50TXVsdGljYXN0ZXIubW91c2VSZWxlYXNlZChBV1RFdmVudE11bHRpY2FzdGVyLmphdmE6Mjk3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc01vdXNlRXZlbnQoQ29tcG9uZW50LmphdmE6NjYyMSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuSkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChKQ29tcG9uZW50LmphdmE6MzM5OClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LnByb2Nlc3NFdmVudChDb21wb25lbnQuamF2YTo2Mzg2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIucHJvY2Vzc0V2ZW50KENvbnRhaW5lci5qYXZhOjIyNjYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50SW1wbChDb21wb25lbnQuamF2YTo0OTk2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMyNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnQoQ29tcG9uZW50LmphdmE6NDgyOClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLnJldGFyZ2V0TW91c2VFdmVudChDb250YWluZXIuamF2YTo0OTQ4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucHJvY2Vzc01vdXNlRXZlbnQoQ29udGFpbmVyLmphdmE6NDU3NSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLmRpc3BhdGNoRXZlbnQoQ29udGFpbmVyLmphdmE6NDUxNilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLmRpc3BhdGNoRXZlbnRJbXBsKENvbnRhaW5lci5qYXZhOjIzMTApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LldpbmRvdy5kaXNwYXRjaEV2ZW50SW1wbChXaW5kb3cuamF2YToyNzgwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlLmRpc3BhdGNoRXZlbnRJbXBsKEV2ZW50UXVldWUuamF2YTo3NzUpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNC5ydW4oRXZlbnRRdWV1ZS5qYXZhOjcyMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzE0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDUucnVuKEV2ZW50UXVldWUuamF2YTo3NDcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6ODcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudChFdmVudFF1ZXVlLmphdmE6NzQ0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBPbmVFdmVudEZvckZpbHRlcnMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjIwMylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9yRmlsdGVyKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMjQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50c0ZvckhpZXJhcmNoeShFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTEzKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwOSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMDEpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucnVuKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YTo5MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiQ2F1c2VkIGJ5OiBqYXZhLnJtaS5TZXJ2ZXJFeGNlcHRpb246IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM5MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4Y2VwdGlvblJlY2VpdmVkRnJvbVNlcnZlcihTdHJlYW1SZW1vdGVDYWxsLmphdmE6MzA0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhlY3V0ZUNhbGwoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjI4MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0UmVmLmludm9rZShVbmljYXN0UmVmLmphdmE6MTY2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2VSZW1vdGVNZXRob2QoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToyMTUpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZShSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjE2MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqZGsucHJveHkyL2pkay5wcm94eTIuJFByb3h5NzYuZGF0VmUoVW5rbm93biBTb3VyY2UpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6MjkwOClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHQuLi4gMzggbW9yZVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJDYXVzZWQgYnk6IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjQzMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamRrLmludGVybmFsLnJlZmxlY3QuRGlyZWN0TWV0aG9kSGFuZGxlQWNjZXNzb3IuaW52b2tlKERpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmphdmE6MTAzKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcucmVmbGVjdC5NZXRob2QuaW52b2tlKE1ldGhvZC5qYXZhOjU4MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0U2VydmVyUmVmLmRpc3BhdGNoKFVuaWNhc3RTZXJ2ZXJSZWYuamF2YTozNjApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjIwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MTk3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo3MTQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0LnNlcnZpY2VDYWxsKFRyYW5zcG9ydC5qYXZhOjE5NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0LmhhbmRsZU1lc3NhZ2VzKFRDUFRyYW5zcG9ydC5qYXZhOjU5OClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bjAoVENQVHJhbnNwb3J0LmphdmE6ODQ0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIubGFtYmRhJHJ1biQwKFRDUFRyYW5zcG9ydC5qYXZhOjcyMSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuKFRDUFRyYW5zcG9ydC5qYXZhOjcyMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yLnJ1bldvcmtlcihUaHJlYWRQb29sRXhlY3V0b3IuamF2YToxMTQ0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IkV29ya2VyLnJ1bihUaHJlYWRQb29sRXhlY3V0b3IuamF2YTo2NDIpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5UaHJlYWQucnVuKFRocmVhZC5qYXZhOjE1NzApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkNhdXNlZCBieTogamF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjM0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHQuLi4gMTUgbW9yZVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJE4buxYSB2w6BvIHRow7RuZyBiw6FvIGzhu5dpLCB24bqlbiDEkeG7gSB44bqjeSByYSBraGkgdGjhu7FjIGhp4buHbiDEkeG7lWkgdsOpIGzDoCBjaOG7lyBuZ+G7k2kgbeG7m2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmguIMSQ4buDIGZpeCBs4buXaSBuw6B5LCBjaMO6bmcgdGEgY+G6p246XG5cbjEuIEtp4buDbSB0cmEgdMOtbmgga2jhuqMgZOG7pW5nIGPhu6dhIGNo4buXIG5n4buTaSB0csaw4bubYyBraGkgdGjhu7FjIGhp4buHbiDEkeG7lWkgdsOpOlxuXG48YXVnbWVudF9jb2RlX3NuaXBwZXQgcGF0aD1cIlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YVwiIG1vZGU9XCJFRElUXCI+XG5gYGBqYXZhXG5wcml2YXRlIGJvb2xlYW4geHVMeVRoYW5oVG9hbigpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEtp4buDbSB0cmEgY2jhu5cgbmfhu5NpIGPDsyBraOG6oyBk4bulbmcga2jDtG5nXG4gICAgICAgIGlmIChjaG9OZ29pRGFDaG9uID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJWdWkgbMOybmcgY2jhu41uIGNo4buXIG5n4buTaSBt4bubaSFcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBLaeG7g20gdHJhIHhlbSBjaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgY2jGsGFcbiAgICAgICAgYm9vbGVhbiBjaG9OZ29pS2hhRHVuZyA9IGRvaVZlREFPLmtpZW1UcmFDaG9OZ29pKFxuICAgICAgICAgICAgY2hvTmdvaURhQ2hvbi5nZXRNYUNobygpLCBcbiAgICAgICAgICAgIGxpY2hUcmluaERhQ2hvbi5nZXRNYUxpY2hUcmluaCgpXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWNob05nb2lLaGFEdW5nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0LCB2dWkgbMOybmcgY2jhu41uIGNo4buXIGtow6FjIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBo4bqnbiBjb2RlIGPDsm4gbOG6oWkgZ2nhu68gbmd1ecOqblxuICAgICAgICBLaGFjaEhhbmcga2hhY2hIYW5nID0gZG9pVmVEQU8uZ2V0S2hhY2hIYW5nQnlNYVZlKHZlVGF1SGllblRhaS5nZXRNYVZlKCkpO1xuICAgICAgICBpZiAoa2hhY2hIYW5nID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJLaMO0bmcgdMOsbSB0aOG6pXkgdGjDtG5nIHRpbiBraMOhY2ggaMOgbmchXCIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBU4bqhbyB2w6kgbeG7m2lcbiAgICAgICAgVmVUYXUgdmVUYXVNb2kgPSBuZXcgVmVUYXUoKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0TWFWZShnZW5lcmF0ZU1hVmUoKSk7XG4gICAgICAgIHZlVGF1TW9pLnNldFRlbktoYWNoSGFuZyh2ZVRhdUhpZW5UYWkuZ2V0VGVuS2hhY2hIYW5nKCkpO1xuICAgICAgICB2ZVRhdU1vaS5zZXRHaWF5VG8odmVUYXVIaWVuVGFpLmdldEdpYXlUbygpKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0TmdheURpKHZlVGF1SGllblRhaS5nZXROZ2F5RGkoKSk7XG4gICAgICAgIHZlVGF1TW9pLnNldERvaVR1b25nKHZlVGF1SGllblRhaS5nZXREb2lUdW9uZygpKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0TGljaFRyaW5oVGF1KGxpY2hUcmluaERhQ2hvbik7XG4gICAgICAgIHZlVGF1TW9pLnNldENob05nb2koY2hvTmdvaURhQ2hvbik7XG4gICAgICAgIHZlVGF1TW9pLnNldEtodXllbk1haSh2ZVRhdUhpZW5UYWkuZ2V0S2h1eWVuTWFpKCkpO1xuICAgICAgICB2ZVRhdU1vaS5zZXRHaWFWZSh2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSk7XG4gICAgICAgIHZlVGF1TW9pLnNldFRyYW5nVGhhaShUcmFuZ1RoYWlWZVRhdS5DSE9fWEFDX05IQU4pO1xuXG4gICAgICAgIC8vIFRo4buxYyBoaeG7h24gxJHhurd0IHbDqSBt4bubaVxuICAgICAgICBib29sZWFuIGx1dVZlTW9pID0gZG9pVmVEQU8uZGF0VmUodmVUYXVNb2kpO1xuICAgICAgICBpZiAoIWx1dVZlTW9pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiS2jDtG5nIHRo4buDIGzGsHUgdsOpIG3hu5tpIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBo4bqnbiBjb2RlIHjhu60gbMO9IGjDs2EgxJHGoW4gZ2nhu68gbmd1ecOqblxuICAgICAgICAuLi5cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJFcnJvciBpbiB4dUx5VGhhbmhUb2FuOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSB44butIGzDvSB0aGFuaCB0b8OhbjogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgfVxufVxuYGBgXG48L2F1Z21lbnRfY29kZV9zbmlwcGV0PlxuXG4yLiBUaMOqbSBwaMawxqFuZyB0aOG7qWMga2nhu4NtIHRyYSBjaOG7lyBuZ+G7k2kgdsOgbyBpbnRlcmZhY2UgYERvaVZlREFPYDpcblxuPGF1Z21lbnRfY29kZV9zbmlwcGV0IHBhdGg9XCJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9Eb2lWZURBTy5qYXZhXCIgbW9kZT1cIkVESVRcIj5cbmBgYGphdmFcbnB1YmxpYyBpbnRlcmZhY2UgRG9pVmVEQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIC8vIEPDoWMgcGjGsMahbmcgdGjhu6ljIGhp4buHbiBjw7MuLi5cblxuICAgIC8vIFRow6ptIHBoxrDGoW5nIHRo4bupYyBt4bubaVxuICAgIGJvb2xlYW4ga2llbVRyYUNob05nb2koU3RyaW5nIG1hQ2hvLCBTdHJpbmcgbWFMaWNoVHJpbmgpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59XG5gYGBcbjwvYXVnbWVudF9jb2RlX3NuaXBwZXQ+XG5cbjMuIEPhuq1wIG5o4bqtdCBwaMawxqFuZyB0aOG7qWMgYGRhdFZlYCB0cm9uZyBgRG9pVmVEQU9JbXBsYCDEkeG7gyBraeG7g20gdHJhIGNo4buXIG5n4buTaSB0csaw4bubYyBraGkgxJHhurd0OlxuXG48YXVnbWVudF9jb2RlX3NuaXBwZXQgcGF0aD1cIlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvRG9pVmVEQU9JbXBsLmphdmFcIiBtb2RlPVwiRURJVFwiPlxuYGBgamF2YVxuQE92ZXJyaWRlXG5wdWJsaWMgYm9vbGVhbiBkYXRWZShWZVRhdSB2ZVRhdSkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gS2nhu4NtIHRyYSBjaOG7lyBuZ+G7k2kgdHLGsOG7m2Mga2hpIMSR4bq3dFxuICAgICAgICBpZiAoIWtpZW1UcmFDaG9OZ29pKHZlVGF1LmdldENob05nb2koKS5nZXRNYUNobygpLCB2ZVRhdS5nZXRMaWNoVHJpbmhUYXUoKS5nZXRNYUxpY2hUcmluaCgpKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIkNo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRp4bq/cCB04bulYyBxdcOhIHRyw6xuaCDEkeG6t3QgdsOpXG4gICAgICAgIFNlc3Npb24gc2Vzc2lvbiA9IHNlc3Npb25GYWN0b3J5Lm9wZW5TZXNzaW9uKCk7XG4gICAgICAgIFRyYW5zYWN0aW9uIHRyID0gc2Vzc2lvbi5iZWdpblRyYW5zYWN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2Vzc2lvbi5zYXZlKHZlVGF1KTtcbiAgICAgICAgICAgIHRyLmNvbW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgICAgICB0ci5yb2xsYmFjaygpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHNlc3Npb24uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgxJHhurd0IHbDqTogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgfVxufVxuXG5AT3ZlcnJpZGVcbnB1YmxpYyBib29sZWFuIGtpZW1UcmFDaG9OZ29pKFN0cmluZyBtYUNobywgU3RyaW5nIG1hTGljaFRyaW5oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICBTZXNzaW9uIHNlc3Npb24gPSBzZXNzaW9uRmFjdG9yeS5vcGVuU2Vzc2lvbigpO1xuICAgIHRyeSB7XG4gICAgICAgIFN0cmluZyBocWwgPSBcIlNFTEVDVCBDT1VOVCh2KSBGUk9NIFZlVGF1IHYgV0hFUkUgdi5jaG9OZ29pLm1hQ2hvID0gOm1hQ2hvIFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJBTkQgdi5saWNoVHJpbmhUYXUubWFMaWNoVHJpbmggPSA6bWFMaWNoVHJpbmggXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkFORCB2LnRyYW5nVGhhaSBOT1QgSU4gKDp0cmFuZ1RoYWlIdXkpXCI7XG4gICAgICAgIFxuICAgICAgICBMb25nIGNvdW50ID0gc2Vzc2lvbi5jcmVhdGVRdWVyeShocWwsIExvbmcuY2xhc3MpXG4gICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFDaG9cIiwgbWFDaG8pXG4gICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwibWFMaWNoVHJpbmhcIiwgbWFMaWNoVHJpbmgpXG4gICAgICAgICAgICAuc2V0UGFyYW1ldGVyKFwidHJhbmdUaGFpSHV5XCIsIFRyYW5nVGhhaVZlVGF1LkRBX0hVWSlcbiAgICAgICAgICAgIC51bmlxdWVSZXN1bHQoKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjb3VudCA9PSAwOyAvLyBUcuG6oyB24buBIHRydWUgbuG6v3UgY2jhu5cgbmfhu5NpIGPDsm4gdHLhu5FuZ1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNlc3Npb24uY2xvc2UoKTtcbiAgICB9XG59XG5gYGBcbjwvYXVnbWVudF9jb2RlX3NuaXBwZXQ+XG5cbk5o4buvbmcgdGhheSDEkeG7lWkgbsOgeSBz4bq9OlxuMS4gS2nhu4NtIHRyYSB0w61uaCBraOG6oyBk4bulbmcgY+G7p2EgY2jhu5cgbmfhu5NpIHRyxrDhu5tjIGtoaSB0aOG7sWMgaGnhu4duIMSR4buVaSB2w6lcbjIuIEhp4buDbiB0aOG7iyB0aMO0bmcgYsOhbyBs4buXaSByw7UgcsOgbmcgY2hvIG5nxrDhu51pIGTDuW5nIG7hur91IGNo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dFxuMy4gTmfEg24gY2jhurduIHZp4buHYyDEkeG6t3QgdHLDuW5nIGNo4buXIG5n4buTaSB0cm9uZyBjw7luZyBt4buZdCBs4buLY2ggdHLDrG5oXG40LiBD4bqjaSB0aGnhu4duIHjhu60gbMO9IGzhu5dpIHbDoCByb2xsYmFjayBnaWFvIGThu4tjaCBu4bq/dSBjw7MgduG6pW4gxJHhu4EgeOG6o3kgcmFcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhOjU0MTU3LTU1MDY0XG5Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmE6MTAwMDY0LTEwMTA4M1xuUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhOjEyMDI4MS0xMjA3ODNcblByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YToxMjA3ODMtMTIxNzY3XG5Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsX0ZpeC5qYXZhOjAtMzcwXG5Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsX0ZpeC5qYXZhOjM3MC0xMjc4XG5Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsX0ZpeC5qYXZhOjEyNzgtMjA3MFxuUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbF9GaXguamF2YTozNTI3LTQyODdcblByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0RvaVZlREFPLmphdmE6MTkwLTkxNSJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6IsSR4buNYyBs4bqhaSB0b8OgbiBi4buZIGThu7Egw6FuIGdpw7pwIHTDtGkgZml4IGzhu5dpIEVycm9yIGluIHh1THlUaGFuaFRvYW46IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5qYXZhLnJtaS5TZXJ2ZXJFeGNlcHRpb246IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM5MilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4Y2VwdGlvblJlY2VpdmVkRnJvbVNlcnZlcihTdHJlYW1SZW1vdGVDYWxsLmphdmE6MzA0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhlY3V0ZUNhbGwoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjI4MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0UmVmLmludm9rZShVbmljYXN0UmVmLmphdmE6MTY2KVxyXG5cdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2VSZW1vdGVNZXRob2QoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToyMTUpXHJcblx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZShSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjE2MClcclxuXHRhdCBqZGsucHJveHkyL2pkay5wcm94eTIuJFByb3h5NzYuZGF0VmUoVW5rbm93biBTb3VyY2UpXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6MjkwOClcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5kb2lWZShEb2lWZVBhbmVsLmphdmE6MTMxOClcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5sYW1iZGEkY3JlYXRlQnV0dG9uUGFuZWwkNyhEb2lWZVBhbmVsLmphdmE6ODA0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbi5maXJlQWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MTk3MilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24kSGFuZGxlci5hY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToyMzE0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuZmlyZUFjdGlvblBlcmZvcm1lZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YTo0MDcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5zZXRQcmVzc2VkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjI2MilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcucGxhZi5iYXNpYy5CYXNpY0J1dHRvbkxpc3RlbmVyLm1vdXNlUmVsZWFzZWQoQmFzaWNCdXR0b25MaXN0ZW5lci5qYXZhOjI3OSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQVdURXZlbnRNdWx0aWNhc3Rlci5tb3VzZVJlbGVhc2VkKEFXVEV2ZW50TXVsdGljYXN0ZXIuamF2YToyOTcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChDb21wb25lbnQuamF2YTo2NjIxKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5KQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KEpDb21wb25lbnQuamF2YTozMzk4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc0V2ZW50KENvbXBvbmVudC5qYXZhOjYzODYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5wcm9jZXNzRXZlbnQoQ29udGFpbmVyLmphdmE6MjI2NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnRJbXBsKENvbXBvbmVudC5qYXZhOjQ5OTYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzI0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucmV0YXJnZXRNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ5NDgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5wcm9jZXNzTW91c2VFdmVudChDb250YWluZXIuamF2YTo0NTc1KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChDb250YWluZXIuamF2YTo0NTE2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMxMClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuV2luZG93LmRpc3BhdGNoRXZlbnRJbXBsKFdpbmRvdy5qYXZhOjI3ODApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudEltcGwoRXZlbnRRdWV1ZS5qYXZhOjc3NSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzIwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MTQpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6OTgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ1KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50KEV2ZW50UXVldWUuamF2YTo3NDQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcE9uZUV2ZW50Rm9yRmlsdGVycyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MjAzKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JGaWx0ZXIoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEyNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9ySGllcmFyY2h5KEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMTMpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTA5KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwMSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5ydW4oRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjkwKVxyXG5DYXVzZWQgYnk6IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHJcblx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjQzMClcclxuXHRhdCBqYXZhLmJhc2UvamRrLmludGVybmFsLnJlZmxlY3QuRGlyZWN0TWV0aG9kSGFuZGxlQWNjZXNzb3IuaW52b2tlKERpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmphdmE6MTAzKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcucmVmbGVjdC5NZXRob2QuaW52b2tlKE1ldGhvZC5qYXZhOjU4MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0U2VydmVyUmVmLmRpc3BhdGNoKFVuaWNhc3RTZXJ2ZXJSZWYuamF2YTozNjApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjIwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MTk3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo3MTQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0LnNlcnZpY2VDYWxsKFRyYW5zcG9ydC5qYXZhOjE5NilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0LmhhbmRsZU1lc3NhZ2VzKFRDUFRyYW5zcG9ydC5qYXZhOjU5OClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bjAoVENQVHJhbnNwb3J0LmphdmE6ODQ0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIubGFtYmRhJHJ1biQwKFRDUFRyYW5zcG9ydC5qYXZhOjcyMSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuKFRDUFRyYW5zcG9ydC5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yLnJ1bldvcmtlcihUaHJlYWRQb29sRXhlY3V0b3IuamF2YToxMTQ0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IkV29ya2VyLnJ1bihUaHJlYWRQb29sRXhlY3V0b3IuamF2YTo2NDIpXHJcblx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5UaHJlYWQucnVuKFRocmVhZC5qYXZhOjE1NzApXHJcbkNhdXNlZCBieTogamF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHJcblx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjM0NClcclxuXHQuLi4gMTUgbW9yZVxyXG5qYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSB44butIGzDvSB0aGFuaCB0b8OhbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLnJtaS5TZXJ2ZXJFeGNlcHRpb246IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLnh1THlUaGFuaFRvYW4oRG9pVmVQYW5lbC5qYXZhOjI5NjYpXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwuZG9pVmUoRG9pVmVQYW5lbC5qYXZhOjEzMTgpXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwubGFtYmRhJGNyZWF0ZUJ1dHRvblBhbmVsJDcoRG9pVmVQYW5lbC5qYXZhOjgwNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24uZmlyZUFjdGlvblBlcmZvcm1lZChBYnN0cmFjdEJ1dHRvbi5qYXZhOjE5NzIpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkFic3RyYWN0QnV0dG9uJEhhbmRsZXIuYWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MjMxNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuRGVmYXVsdEJ1dHRvbk1vZGVsLmZpcmVBY3Rpb25QZXJmb3JtZWQoRGVmYXVsdEJ1dHRvbk1vZGVsLmphdmE6NDA3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuc2V0UHJlc3NlZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YToyNjIpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLnBsYWYuYmFzaWMuQmFzaWNCdXR0b25MaXN0ZW5lci5tb3VzZVJlbGVhc2VkKEJhc2ljQnV0dG9uTGlzdGVuZXIuamF2YToyNzkpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkFXVEV2ZW50TXVsdGljYXN0ZXIubW91c2VSZWxlYXNlZChBV1RFdmVudE11bHRpY2FzdGVyLmphdmE6Mjk3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc01vdXNlRXZlbnQoQ29tcG9uZW50LmphdmE6NjYyMSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuSkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChKQ29tcG9uZW50LmphdmE6MzM5OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LnByb2Nlc3NFdmVudChDb21wb25lbnQuamF2YTo2Mzg2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIucHJvY2Vzc0V2ZW50KENvbnRhaW5lci5qYXZhOjIyNjYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50SW1wbChDb21wb25lbnQuamF2YTo0OTk2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMyNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnQoQ29tcG9uZW50LmphdmE6NDgyOClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLnJldGFyZ2V0TW91c2VFdmVudChDb250YWluZXIuamF2YTo0OTQ4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucHJvY2Vzc01vdXNlRXZlbnQoQ29udGFpbmVyLmphdmE6NDU3NSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLmRpc3BhdGNoRXZlbnQoQ29udGFpbmVyLmphdmE6NDUxNilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLmRpc3BhdGNoRXZlbnRJbXBsKENvbnRhaW5lci5qYXZhOjIzMTApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LldpbmRvdy5kaXNwYXRjaEV2ZW50SW1wbChXaW5kb3cuamF2YToyNzgwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlLmRpc3BhdGNoRXZlbnRJbXBsKEV2ZW50UXVldWUuamF2YTo3NzUpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNC5ydW4oRXZlbnRRdWV1ZS5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzE0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjk4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDUucnVuKEV2ZW50UXVldWUuamF2YTo3NDcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6ODcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudChFdmVudFF1ZXVlLmphdmE6NzQ0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBPbmVFdmVudEZvckZpbHRlcnMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjIwMylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9yRmlsdGVyKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMjQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50c0ZvckhpZXJhcmNoeShFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTEzKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwOSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMDEpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucnVuKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YTo5MClcclxuQ2F1c2VkIGJ5OiBqYXZhLnJtaS5TZXJ2ZXJFeGNlcHRpb246IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM5MilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4Y2VwdGlvblJlY2VpdmVkRnJvbVNlcnZlcihTdHJlYW1SZW1vdGVDYWxsLmphdmE6MzA0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhlY3V0ZUNhbGwoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjI4MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0UmVmLmludm9rZShVbmljYXN0UmVmLmphdmE6MTY2KVxyXG5cdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2VSZW1vdGVNZXRob2QoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToyMTUpXHJcblx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZShSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjE2MClcclxuXHRhdCBqZGsucHJveHkyL2pkay5wcm94eTIuJFByb3h5NzYuZGF0VmUoVW5rbm93biBTb3VyY2UpXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6MjkwOClcclxuXHQuLi4gMzggbW9yZVxyXG5DYXVzZWQgYnk6IGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHJcblx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjQzMClcclxuXHRhdCBqYXZhLmJhc2UvamRrLmludGVybmFsLnJlZmxlY3QuRGlyZWN0TWV0aG9kSGFuZGxlQWNjZXNzb3IuaW52b2tlKERpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmphdmE6MTAzKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcucmVmbGVjdC5NZXRob2QuaW52b2tlKE1ldGhvZC5qYXZhOjU4MClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0U2VydmVyUmVmLmRpc3BhdGNoKFVuaWNhc3RTZXJ2ZXJSZWYuamF2YTozNjApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjIwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MTk3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo3MTQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0LnNlcnZpY2VDYWxsKFRyYW5zcG9ydC5qYXZhOjE5NilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0LmhhbmRsZU1lc3NhZ2VzKFRDUFRyYW5zcG9ydC5qYXZhOjU5OClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bjAoVENQVHJhbnNwb3J0LmphdmE6ODQ0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIubGFtYmRhJHJ1biQwKFRDUFRyYW5zcG9ydC5qYXZhOjcyMSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuKFRDUFRyYW5zcG9ydC5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yLnJ1bldvcmtlcihUaHJlYWRQb29sRXhlY3V0b3IuamF2YToxMTQ0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IkV29ya2VyLnJ1bihUaHJlYWRQb29sRXhlY3V0b3IuamF2YTo2NDIpXHJcblx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5UaHJlYWQucnVuKFRocmVhZC5qYXZhOjE1NzApXHJcbkNhdXNlZCBieTogamF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHJcblx0YXQgZGFvLmltcGwuRG9pVmVEQU9JbXBsLmRhdFZlKERvaVZlREFPSW1wbC5qYXZhOjM0NClcclxuXHQuLi4gMTUgbW9yZVxyXG5cbiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIiwiZm9sZGVyUm9vdCI6IkQ6L0NvZGUvUGhhblRhbkphdmFOaG9tR1BUL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwicmVzcG9uc2VfdGV4dCI6IkThu7FhIHbDoG8gdGjDtG5nIGLDoW8gbOG7l2ksIHbhuqVuIMSR4buBIHjhuqN5IHJhIGtoaSB0aOG7sWMgaGnhu4duIMSR4buVaSB2w6kgbMOgIGNo4buXIG5n4buTaSBt4bubaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaC4gxJDhu4MgZml4IGzhu5dpIG7DoHksIGNow7puZyB0YSBj4bqnbjpcblxuMS4gS2nhu4NtIHRyYSB0w61uaCBraOG6oyBk4bulbmcgY+G7p2EgY2jhu5cgbmfhu5NpIHRyxrDhu5tjIGtoaSB0aOG7sWMgaGnhu4duIMSR4buVaSB2w6k6XG5cbmBgYGBqYXZhIHBhdGg9UHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhIG1vZGU9RURJVFxucHJpdmF0ZSBib29sZWFuIHh1THlUaGFuaFRvYW4oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBLaeG7g20gdHJhIGNo4buXIG5n4buTaSBjw7Mga2jhuqMgZOG7pW5nIGtow7RuZ1xuICAgICAgICBpZiAoY2hvTmdvaURhQ2hvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiVnVpIGzDsm5nIGNo4buNbiBjaOG7lyBuZ+G7k2kgbeG7m2khXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gS2nhu4NtIHRyYSB4ZW0gY2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGNoxrBhXG4gICAgICAgIGJvb2xlYW4gY2hvTmdvaUtoYUR1bmcgPSBkb2lWZURBTy5raWVtVHJhQ2hvTmdvaShcbiAgICAgICAgICAgIGNob05nb2lEYUNob24uZ2V0TWFDaG8oKSwgXG4gICAgICAgICAgICBsaWNoVHJpbmhEYUNob24uZ2V0TWFMaWNoVHJpbmgoKVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFjaG9OZ29pS2hhRHVuZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIkNo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCwgdnVpIGzDsm5nIGNo4buNbiBjaOG7lyBraMOhYyFcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQaOG6p24gY29kZSBjw7JuIGzhuqFpIGdp4buvIG5ndXnDqm5cbiAgICAgICAgS2hhY2hIYW5nIGtoYWNoSGFuZyA9IGRvaVZlREFPLmdldEtoYWNoSGFuZ0J5TWFWZSh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpKTtcbiAgICAgICAgaWYgKGtoYWNoSGFuZyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiS2jDtG5nIHTDrG0gdGjhuqV5IHRow7RuZyB0aW4ga2jDoWNoIGjDoG5nIVwiKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVOG6oW8gdsOpIG3hu5tpXG4gICAgICAgIFZlVGF1IHZlVGF1TW9pID0gbmV3IFZlVGF1KCk7XG4gICAgICAgIHZlVGF1TW9pLnNldE1hVmUoZ2VuZXJhdGVNYVZlKCkpO1xuICAgICAgICB2ZVRhdU1vaS5zZXRUZW5LaGFjaEhhbmcodmVUYXVIaWVuVGFpLmdldFRlbktoYWNoSGFuZygpKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0R2lheVRvKHZlVGF1SGllblRhaS5nZXRHaWF5VG8oKSk7XG4gICAgICAgIHZlVGF1TW9pLnNldE5nYXlEaSh2ZVRhdUhpZW5UYWkuZ2V0TmdheURpKCkpO1xuICAgICAgICB2ZVRhdU1vaS5zZXREb2lUdW9uZyh2ZVRhdUhpZW5UYWkuZ2V0RG9pVHVvbmcoKSk7XG4gICAgICAgIHZlVGF1TW9pLnNldExpY2hUcmluaFRhdShsaWNoVHJpbmhEYUNob24pO1xuICAgICAgICB2ZVRhdU1vaS5zZXRDaG9OZ29pKGNob05nb2lEYUNob24pO1xuICAgICAgICB2ZVRhdU1vaS5zZXRLaHV5ZW5NYWkodmVUYXVIaWVuVGFpLmdldEtodXllbk1haSgpKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0R2lhVmUodmVUYXVIaWVuVGFpLmdldEdpYVZlKCkpO1xuICAgICAgICB2ZVRhdU1vaS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKTtcblxuICAgICAgICAvLyBUaOG7sWMgaGnhu4duIMSR4bq3dCB2w6kgbeG7m2lcbiAgICAgICAgYm9vbGVhbiBsdXVWZU1vaSA9IGRvaVZlREFPLmRhdFZlKHZlVGF1TW9pKTtcbiAgICAgICAgaWYgKCFsdXVWZU1vaSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIktow7RuZyB0aOG7gyBsxrB1IHbDqSBt4bubaSFcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQaOG6p24gY29kZSB44butIGzDvSBow7NhIMSRxqFuIGdp4buvIG5ndXnDqm5cbiAgICAgICAgLi4uXG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiRXJyb3IgaW4geHVMeVRoYW5oVG9hbjogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgeOG7rSBsw70gdGhhbmggdG/DoW46IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgIH1cbn1cbmBgYGBcblxuMi4gVGjDqm0gcGjGsMahbmcgdGjhu6ljIGtp4buDbSB0cmEgY2jhu5cgbmfhu5NpIHbDoG8gaW50ZXJmYWNlIGBEb2lWZURBT2A6XG5cbmBgYGBqYXZhIHBhdGg9UHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9kYW8vRG9pVmVEQU8uamF2YSBtb2RlPUVESVRcbnB1YmxpYyBpbnRlcmZhY2UgRG9pVmVEQU8gZXh0ZW5kcyBSZW1vdGUge1xuICAgIC8vIEPDoWMgcGjGsMahbmcgdGjhu6ljIGhp4buHbiBjw7MuLi5cblxuICAgIC8vIFRow6ptIHBoxrDGoW5nIHRo4bupYyBt4bubaVxuICAgIGJvb2xlYW4ga2llbVRyYUNob05nb2koU3RyaW5nIG1hQ2hvLCBTdHJpbmcgbWFMaWNoVHJpbmgpIHRocm93cyBSZW1vdGVFeGNlcHRpb247XG59XG5gYGBgXG5cbjMuIEPhuq1wIG5o4bqtdCBwaMawxqFuZyB0aOG7qWMgYGRhdFZlYCB0cm9uZyBgRG9pVmVEQU9JbXBsYCDEkeG7gyBraeG7g20gdHJhIGNo4buXIG5n4buTaSB0csaw4bubYyBraGkgxJHhurd0OlxuXG5gYGBgamF2YSBwYXRoPVByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL2ltcGwvRG9pVmVEQU9JbXBsLmphdmEgbW9kZT1FRElUXG5AT3ZlcnJpZGVcbnB1YmxpYyBib29sZWFuIGRhdFZlKFZlVGF1IHZlVGF1KSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBLaeG7g20gdHJhIGNo4buXIG5n4buTaSB0csaw4bubYyBraGkgxJHhurd0XG4gICAgICAgIGlmICgha2llbVRyYUNob05nb2kodmVUYXUuZ2V0Q2hvTmdvaSgpLmdldE1hQ2hvKCksIHZlVGF1LmdldExpY2hUcmluaFRhdSgpLmdldE1hTGljaFRyaW5oKCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGnhur9wIHThu6VjIHF1w6EgdHLDrG5oIMSR4bq3dCB2w6lcbiAgICAgICAgU2Vzc2lvbiBzZXNzaW9uID0gc2Vzc2lvbkZhY3Rvcnkub3BlblNlc3Npb24oKTtcbiAgICAgICAgVHJhbnNhY3Rpb24gdHIgPSBzZXNzaW9uLmJlZ2luVHJhbnNhY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZXNzaW9uLnNhdmUodmVUYXUpO1xuICAgICAgICAgICAgdHIuY29tbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgICAgIHRyLnJvbGxiYWNrKCk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgc2Vzc2lvbi5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSDEkeG6t3QgdsOpOiBcIiArIGUuZ2V0TWVzc2FnZSgpLCBlKTtcbiAgICB9XG59XG5cbkBPdmVycmlkZVxucHVibGljIGJvb2xlYW4ga2llbVRyYUNob05nb2koU3RyaW5nIG1hQ2hvLCBTdHJpbmcgbWFMaWNoVHJpbmgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgIFNlc3Npb24gc2Vzc2lvbiA9IHNlc3Npb25GYWN0b3J5Lm9wZW5TZXNzaW9uKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgU3RyaW5nIGhxbCA9IFwiU0VMRUNUIENPVU5UKHYpIEZST00gVmVUYXUgdiBXSEVSRSB2LmNob05nb2kubWFDaG8gPSA6bWFDaG8gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkFORCB2LmxpY2hUcmluaFRhdS5tYUxpY2hUcmluaCA9IDptYUxpY2hUcmluaCBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYudHJhbmdUaGFpIE5PVCBJTiAoOnRyYW5nVGhhaUh1eSlcIjtcbiAgICAgICAgXG4gICAgICAgIExvbmcgY291bnQgPSBzZXNzaW9uLmNyZWF0ZVF1ZXJ5KGhxbCwgTG9uZy5jbGFzcylcbiAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYUNob1wiLCBtYUNobylcbiAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJtYUxpY2hUcmluaFwiLCBtYUxpY2hUcmluaClcbiAgICAgICAgICAgIC5zZXRQYXJhbWV0ZXIoXCJ0cmFuZ1RoYWlIdXlcIiwgVHJhbmdUaGFpVmVUYXUuREFfSFVZKVxuICAgICAgICAgICAgLnVuaXF1ZVJlc3VsdCgpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvdW50ID09IDA7IC8vIFRy4bqjIHbhu4EgdHJ1ZSBu4bq/dSBjaOG7lyBuZ+G7k2kgY8OybiB0cuG7kW5nXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2Vzc2lvbi5jbG9zZSgpO1xuICAgIH1cbn1cbmBgYGBcblxuTmjhu69uZyB0aGF5IMSR4buVaSBuw6B5IHPhur06XG4xLiBLaeG7g20gdHJhIHTDrW5oIGto4bqjIGThu6VuZyBj4bunYSBjaOG7lyBuZ+G7k2kgdHLGsOG7m2Mga2hpIHRo4buxYyBoaeG7h24gxJHhu5VpIHbDqVxuMi4gSGnhu4NuIHRo4buLIHRow7RuZyBiw6FvIGzhu5dpIHLDtSByw6BuZyBjaG8gbmfGsOG7nWkgZMO5bmcgbuG6v3UgY2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0XG4zLiBOZ8SDbiBjaOG6t24gdmnhu4djIMSR4bq3dCB0csO5bmcgY2jhu5cgbmfhu5NpIHRyb25nIGPDuW5nIG3hu5l0IGzhu4tjaCB0csOsbmhcbjQuIEPhuqNpIHRoaeG7h24geOG7rSBsw70gbOG7l2kgdsOgIHJvbGxiYWNrIGdpYW8gZOG7i2NoIG7hur91IGPDsyB24bqlbiDEkeG7gSB44bqjeSByYVxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbeyJjaGFyX3N0YXJ0IjoiNTQxNTciLCJjaGFyX2VuZCI6IjU1MDY0IiwiYmxvYl9uYW1lIjoiMDVmOGI0ZDNhNjk2NmQzN2MyNTQ1OWRiNzBmZjQ2ODcyMTM3MTZmOTI1ZTI2MDBkYzkzNTlkZGQwYzBkNDQwYiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6IlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YSJ9fSx7ImNoYXJfc3RhcnQiOiIxMDAwNjQiLCJjaGFyX2VuZCI6IjEwMTA4MyIsImJsb2JfbmFtZSI6IjA1ZjhiNGQzYTY5NjZkMzdjMjU0NTlkYjcwZmY0Njg3MjEzNzE2ZjkyNWUyNjAwZGM5MzU5ZGRkMGMwZDQ0MGIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmEifX0seyJjaGFyX3N0YXJ0IjoiMTIwMjgxIiwiY2hhcl9lbmQiOiIxMjA3ODMiLCJibG9iX25hbWUiOiIwNWY4YjRkM2E2OTY2ZDM3YzI1NDU5ZGI3MGZmNDY4NzIxMzcxNmY5MjVlMjYwMGRjOTM1OWRkZDBjMGQ0NDBiIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjEyMDc4MyIsImNoYXJfZW5kIjoiMTIxNzY3IiwiYmxvYl9uYW1lIjoiMDVmOGI0ZDNhNjk2NmQzN2MyNTQ1OWRiNzBmZjQ2ODcyMTM3MTZmOTI1ZTI2MDBkYzkzNTlkZGQwYzBkNDQwYiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6IlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YSJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiIzNzAiLCJibG9iX25hbWUiOiIyYjkyNmM0ZWFjYTFjYWI2NDVjNTY3ODJmNDdmZjQwOGM0MjQzZDljMTYxYWE1NjAzNTAxODc1NWVmMmQ5MzFjIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbF9GaXguamF2YSJ9fSx7ImNoYXJfc3RhcnQiOiIzNzAiLCJjaGFyX2VuZCI6IjEyNzgiLCJibG9iX25hbWUiOiIyYjkyNmM0ZWFjYTFjYWI2NDVjNTY3ODJmNDdmZjQwOGM0MjQzZDljMTYxYWE1NjAzNTAxODc1NWVmMmQ5MzFjIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbF9GaXguamF2YSJ9fSx7ImNoYXJfc3RhcnQiOiIxMjc4IiwiY2hhcl9lbmQiOiIyMDcwIiwiYmxvYl9uYW1lIjoiMmI5MjZjNGVhY2ExY2FiNjQ1YzU2NzgyZjQ3ZmY0MDhjNDI0M2Q5YzE2MWFhNTYwMzUwMTg3NTVlZjJkOTMxYyIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6IlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWxfRml4LmphdmEifX0seyJjaGFyX3N0YXJ0IjoiMzUyNyIsImNoYXJfZW5kIjoiNDI4NyIsImJsb2JfbmFtZSI6IjJiOTI2YzRlYWNhMWNhYjY0NWM1Njc4MmY0N2ZmNDA4YzQyNDNkOWMxNjFhYTU2MDM1MDE4NzU1ZWYyZDkzMWMiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsX0ZpeC5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjE5MCIsImNoYXJfZW5kIjoiOTE1IiwiYmxvYl9uYW1lIjoiNzI5MDk5MWI2YzIzYjJjYzY4OWJhM2I1ZTc2NTBjODZiYjk2NzI1YjhjNzE2ZmFiODc4YmIyY2VhOTQwZTZkYSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6IlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0RvaVZlREFPLmphdmEifX1dfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMTQxZDIwYjYtNzY1NS00ZGMzLWFkYzgtNzIzOTZmODIyZTEzIiwicmVxdWVzdF9tZXNzYWdlIjoicmVyZWFkIHRoZSB3aG9sZSBwcm9qZWN0LCBoZWxwIG1lIGZpeCB0aGUgZXJyb3JzXG5FcnJvciBpbiB4dUx5VGhhbmhUb2FuOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuamF2YS5ybWkuU2VydmVyRXhjZXB0aW9uOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0U2VydmVyUmVmLmRpc3BhdGNoKFVuaWNhc3RTZXJ2ZXJSZWYuamF2YTozOTIpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjIwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MTk3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo3MTQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0LnNlcnZpY2VDYWxsKFRyYW5zcG9ydC5qYXZhOjE5NilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0LmhhbmRsZU1lc3NhZ2VzKFRDUFRyYW5zcG9ydC5qYXZhOjU5OClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bjAoVENQVHJhbnNwb3J0LmphdmE6ODQ0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIubGFtYmRhJHJ1biQwKFRDUFRyYW5zcG9ydC5qYXZhOjcyMSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuKFRDUFRyYW5zcG9ydC5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yLnJ1bldvcmtlcihUaHJlYWRQb29sRXhlY3V0b3IuamF2YToxMTQ0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IkV29ya2VyLnJ1bihUaHJlYWRQb29sRXhlY3V0b3IuamF2YTo2NDIpXHJcblx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5UaHJlYWQucnVuKFRocmVhZC5qYXZhOjE1NzApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuU3RyZWFtUmVtb3RlQ2FsbC5leGNlcHRpb25SZWNlaXZlZEZyb21TZXJ2ZXIoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjMwNClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4ZWN1dGVDYWxsKFN0cmVhbVJlbW90ZUNhbGwuamF2YToyODApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlZi5pbnZva2UoVW5pY2FzdFJlZi5qYXZhOjE2NilcclxuXHRhdCBqYXZhLnJtaS9qYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuaW52b2tlUmVtb3RlTWV0aG9kKFJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmphdmE6MjE1KVxyXG5cdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2UoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToxNjApXHJcblx0YXQgamRrLnByb3h5Mi9qZGsucHJveHkyLiRQcm94eTc2LmRhdFZlKFVua25vd24gU291cmNlKVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLnh1THlUaGFuaFRvYW4oRG9pVmVQYW5lbC5qYXZhOjI5MDgpXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwuZG9pVmUoRG9pVmVQYW5lbC5qYXZhOjEzMTgpXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwubGFtYmRhJGNyZWF0ZUJ1dHRvblBhbmVsJDcoRG9pVmVQYW5lbC5qYXZhOjgwNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24uZmlyZUFjdGlvblBlcmZvcm1lZChBYnN0cmFjdEJ1dHRvbi5qYXZhOjE5NzIpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkFic3RyYWN0QnV0dG9uJEhhbmRsZXIuYWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MjMxNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuRGVmYXVsdEJ1dHRvbk1vZGVsLmZpcmVBY3Rpb25QZXJmb3JtZWQoRGVmYXVsdEJ1dHRvbk1vZGVsLmphdmE6NDA3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuc2V0UHJlc3NlZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YToyNjIpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLnBsYWYuYmFzaWMuQmFzaWNCdXR0b25MaXN0ZW5lci5tb3VzZVJlbGVhc2VkKEJhc2ljQnV0dG9uTGlzdGVuZXIuamF2YToyNzkpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkFXVEV2ZW50TXVsdGljYXN0ZXIubW91c2VSZWxlYXNlZChBV1RFdmVudE11bHRpY2FzdGVyLmphdmE6Mjk3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc01vdXNlRXZlbnQoQ29tcG9uZW50LmphdmE6NjYyMSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuSkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChKQ29tcG9uZW50LmphdmE6MzM5OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LnByb2Nlc3NFdmVudChDb21wb25lbnQuamF2YTo2Mzg2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIucHJvY2Vzc0V2ZW50KENvbnRhaW5lci5qYXZhOjIyNjYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50SW1wbChDb21wb25lbnQuamF2YTo0OTk2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMyNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnQoQ29tcG9uZW50LmphdmE6NDgyOClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLnJldGFyZ2V0TW91c2VFdmVudChDb250YWluZXIuamF2YTo0OTQ4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucHJvY2Vzc01vdXNlRXZlbnQoQ29udGFpbmVyLmphdmE6NDU3NSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLmRpc3BhdGNoRXZlbnQoQ29udGFpbmVyLmphdmE6NDUxNilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLmRpc3BhdGNoRXZlbnRJbXBsKENvbnRhaW5lci5qYXZhOjIzMTApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LldpbmRvdy5kaXNwYXRjaEV2ZW50SW1wbChXaW5kb3cuamF2YToyNzgwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlLmRpc3BhdGNoRXZlbnRJbXBsKEV2ZW50UXVldWUuamF2YTo3NzUpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNC5ydW4oRXZlbnRRdWV1ZS5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzE0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjk4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDUucnVuKEV2ZW50UXVldWUuamF2YTo3NDcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6ODcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudChFdmVudFF1ZXVlLmphdmE6NzQ0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBPbmVFdmVudEZvckZpbHRlcnMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjIwMylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9yRmlsdGVyKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMjQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50c0ZvckhpZXJhcmNoeShFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTEzKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwOSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMDEpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucnVuKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YTo5MClcclxuQ2F1c2VkIGJ5OiBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTo0MzApXHJcblx0YXQgamF2YS5iYXNlL2pkay5pbnRlcm5hbC5yZWZsZWN0LkRpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmludm9rZShEaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5qYXZhOjEwMylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kLmludm9rZShNZXRob2QuamF2YTo1ODApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzYwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyXG5DYXVzZWQgYnk6IGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTozNDQpXHJcblx0Li4uIDE1IG1vcmVcclxuamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgeOG7rSBsw70gdGhhbmggdG/DoW46IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuU2VydmVyRXhjZXB0aW9uOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC54dUx5VGhhbmhUb2FuKERvaVZlUGFuZWwuamF2YToyOTY2KVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmRvaVZlKERvaVZlUGFuZWwuamF2YToxMzE4KVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmxhbWJkYSRjcmVhdGVCdXR0b25QYW5lbCQ3KERvaVZlUGFuZWwuamF2YTo4MDQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkFic3RyYWN0QnV0dG9uLmZpcmVBY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToxOTcyKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbiRIYW5kbGVyLmFjdGlvblBlcmZvcm1lZChBYnN0cmFjdEJ1dHRvbi5qYXZhOjIzMTQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5maXJlQWN0aW9uUGVyZm9ybWVkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjQwNylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuRGVmYXVsdEJ1dHRvbk1vZGVsLnNldFByZXNzZWQoRGVmYXVsdEJ1dHRvbk1vZGVsLmphdmE6MjYyKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5wbGFmLmJhc2ljLkJhc2ljQnV0dG9uTGlzdGVuZXIubW91c2VSZWxlYXNlZChCYXNpY0J1dHRvbkxpc3RlbmVyLmphdmE6Mjc5KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5BV1RFdmVudE11bHRpY2FzdGVyLm1vdXNlUmVsZWFzZWQoQVdURXZlbnRNdWx0aWNhc3Rlci5qYXZhOjI5NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KENvbXBvbmVudC5qYXZhOjY2MjEpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkpDb21wb25lbnQucHJvY2Vzc01vdXNlRXZlbnQoSkNvbXBvbmVudC5qYXZhOjMzOTgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzRXZlbnQoQ29tcG9uZW50LmphdmE6NjM4NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLnByb2Nlc3NFdmVudChDb250YWluZXIuamF2YToyMjY2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudEltcGwoQ29tcG9uZW50LmphdmE6NDk5NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLmRpc3BhdGNoRXZlbnRJbXBsKENvbnRhaW5lci5qYXZhOjIzMjQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5yZXRhcmdldE1vdXNlRXZlbnQoQ29udGFpbmVyLmphdmE6NDk0OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLnByb2Nlc3NNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ1NzUpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KENvbnRhaW5lci5qYXZhOjQ1MTYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzEwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5XaW5kb3cuZGlzcGF0Y2hFdmVudEltcGwoV2luZG93LmphdmE6Mjc4MClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnQoQ29tcG9uZW50LmphdmE6NDgyOClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50SW1wbChFdmVudFF1ZXVlLmphdmE6Nzc1KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MjApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNC5ydW4oRXZlbnRRdWV1ZS5qYXZhOjcxNClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6ODcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo5OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDUucnVuKEV2ZW50UXVldWUuamF2YTo3NDUpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlLmRpc3BhdGNoRXZlbnQoRXZlbnRRdWV1ZS5qYXZhOjc0NClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wT25lRXZlbnRGb3JGaWx0ZXJzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToyMDMpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50c0ZvckZpbHRlcihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTI0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JIaWVyYXJjaHkoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjExMylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMDkpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTAxKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnJ1bihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6OTApXHJcbkNhdXNlZCBieTogamF2YS5ybWkuU2VydmVyRXhjZXB0aW9uOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0U2VydmVyUmVmLmRpc3BhdGNoKFVuaWNhc3RTZXJ2ZXJSZWYuamF2YTozOTIpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjIwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MTk3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo3MTQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0LnNlcnZpY2VDYWxsKFRyYW5zcG9ydC5qYXZhOjE5NilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0LmhhbmRsZU1lc3NhZ2VzKFRDUFRyYW5zcG9ydC5qYXZhOjU5OClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bjAoVENQVHJhbnNwb3J0LmphdmE6ODQ0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIubGFtYmRhJHJ1biQwKFRDUFRyYW5zcG9ydC5qYXZhOjcyMSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuKFRDUFRyYW5zcG9ydC5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yLnJ1bldvcmtlcihUaHJlYWRQb29sRXhlY3V0b3IuamF2YToxMTQ0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IkV29ya2VyLnJ1bihUaHJlYWRQb29sRXhlY3V0b3IuamF2YTo2NDIpXHJcblx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5UaHJlYWQucnVuKFRocmVhZC5qYXZhOjE1NzApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuU3RyZWFtUmVtb3RlQ2FsbC5leGNlcHRpb25SZWNlaXZlZEZyb21TZXJ2ZXIoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjMwNClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4ZWN1dGVDYWxsKFN0cmVhbVJlbW90ZUNhbGwuamF2YToyODApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlZi5pbnZva2UoVW5pY2FzdFJlZi5qYXZhOjE2NilcclxuXHRhdCBqYXZhLnJtaS9qYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuaW52b2tlUmVtb3RlTWV0aG9kKFJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmphdmE6MjE1KVxyXG5cdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2UoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToxNjApXHJcblx0YXQgamRrLnByb3h5Mi9qZGsucHJveHkyLiRQcm94eTc2LmRhdFZlKFVua25vd24gU291cmNlKVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLnh1THlUaGFuaFRvYW4oRG9pVmVQYW5lbC5qYXZhOjI5MDgpXHJcblx0Li4uIDM4IG1vcmVcclxuQ2F1c2VkIGJ5OiBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTo0MzApXHJcblx0YXQgamF2YS5iYXNlL2pkay5pbnRlcm5hbC5yZWZsZWN0LkRpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmludm9rZShEaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5qYXZhOjEwMylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kLmludm9rZShNZXRob2QuamF2YTo1ODApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzYwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyXG5DYXVzZWQgYnk6IGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTozNDQpXHJcblx0Li4uIDE1IG1vcmVcclxuIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6InJlcmVhZCB0aGUgd2hvbGUgcHJvamVjdCwgaGVscCBtZSBmaXggdGhlIGVycm9ycyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiRXJyb3IgaW4geHVMeVRoYW5oVG9hbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImphdmEucm1pLlNlcnZlckV4Y2VwdGlvbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzkyKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhjZXB0aW9uUmVjZWl2ZWRGcm9tU2VydmVyKFN0cmVhbVJlbW90ZUNhbGwuamF2YTozMDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuU3RyZWFtUmVtb3RlQ2FsbC5leGVjdXRlQ2FsbChTdHJlYW1SZW1vdGVDYWxsLmphdmE6MjgwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RSZWYuaW52b2tlKFVuaWNhc3RSZWYuamF2YToxNjYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZVJlbW90ZU1ldGhvZChSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjIxNSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9qYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuaW52b2tlKFJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmphdmE6MTYwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGpkay5wcm94eTIvamRrLnByb3h5Mi4kUHJveHk3Ni5kYXRWZShVbmtub3duIFNvdXJjZSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC54dUx5VGhhbmhUb2FuKERvaVZlUGFuZWwuamF2YToyOTA4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmRvaVZlKERvaVZlUGFuZWwuamF2YToxMzE4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmxhbWJkYSRjcmVhdGVCdXR0b25QYW5lbCQ3KERvaVZlUGFuZWwuamF2YTo4MDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkFic3RyYWN0QnV0dG9uLmZpcmVBY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToxOTcyKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbiRIYW5kbGVyLmFjdGlvblBlcmZvcm1lZChBYnN0cmFjdEJ1dHRvbi5qYXZhOjIzMTQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5maXJlQWN0aW9uUGVyZm9ybWVkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjQwNylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuRGVmYXVsdEJ1dHRvbk1vZGVsLnNldFByZXNzZWQoRGVmYXVsdEJ1dHRvbk1vZGVsLmphdmE6MjYyKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5wbGFmLmJhc2ljLkJhc2ljQnV0dG9uTGlzdGVuZXIubW91c2VSZWxlYXNlZChCYXNpY0J1dHRvbkxpc3RlbmVyLmphdmE6Mjc5KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5BV1RFdmVudE11bHRpY2FzdGVyLm1vdXNlUmVsZWFzZWQoQVdURXZlbnRNdWx0aWNhc3Rlci5qYXZhOjI5NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KENvbXBvbmVudC5qYXZhOjY2MjEpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkpDb21wb25lbnQucHJvY2Vzc01vdXNlRXZlbnQoSkNvbXBvbmVudC5qYXZhOjMzOTgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzRXZlbnQoQ29tcG9uZW50LmphdmE6NjM4NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLnByb2Nlc3NFdmVudChDb250YWluZXIuamF2YToyMjY2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudEltcGwoQ29tcG9uZW50LmphdmE6NDk5NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLmRpc3BhdGNoRXZlbnRJbXBsKENvbnRhaW5lci5qYXZhOjIzMjQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5yZXRhcmdldE1vdXNlRXZlbnQoQ29udGFpbmVyLmphdmE6NDk0OClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLnByb2Nlc3NNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ1NzUpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KENvbnRhaW5lci5qYXZhOjQ1MTYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzEwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5XaW5kb3cuZGlzcGF0Y2hFdmVudEltcGwoV2luZG93LmphdmE6Mjc4MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnQoQ29tcG9uZW50LmphdmE6NDgyOClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50SW1wbChFdmVudFF1ZXVlLmphdmE6Nzc1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MjApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNC5ydW4oRXZlbnRRdWV1ZS5qYXZhOjcxNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6ODcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo5OClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDUucnVuKEV2ZW50UXVldWUuamF2YTo3NDUpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlLmRpc3BhdGNoRXZlbnQoRXZlbnRRdWV1ZS5qYXZhOjc0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wT25lRXZlbnRGb3JGaWx0ZXJzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToyMDMpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50c0ZvckZpbHRlcihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTI0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JIaWVyYXJjaHkoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjExMylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMDkpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTAxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnJ1bihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6OTApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkNhdXNlZCBieTogamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBkYW8uaW1wbC5Eb2lWZURBT0ltcGwuZGF0VmUoRG9pVmVEQU9JbXBsLmphdmE6NDMwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qZGsuaW50ZXJuYWwucmVmbGVjdC5EaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5pbnZva2UoRGlyZWN0TWV0aG9kSGFuZGxlQWNjZXNzb3IuamF2YToxMDMpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5yZWZsZWN0Lk1ldGhvZC5pbnZva2UoTWV0aG9kLmphdmE6NTgwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM2MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiQ2F1c2VkIGJ5OiBqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBkYW8uaW1wbC5Eb2lWZURBT0ltcGwuZGF0VmUoRG9pVmVEQU9JbXBsLmphdmE6MzQ0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdC4uLiAxNSBtb3JlXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ImphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIHjhu60gbMO9IHRoYW5oIHRvw6FuOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEucm1pLlNlcnZlckV4Y2VwdGlvbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwueHVMeVRoYW5oVG9hbihEb2lWZVBhbmVsLmphdmE6Mjk2NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5kb2lWZShEb2lWZVBhbmVsLmphdmE6MTMxOClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC5sYW1iZGEkY3JlYXRlQnV0dG9uUGFuZWwkNyhEb2lWZVBhbmVsLmphdmE6ODA0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbi5maXJlQWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MTk3MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24kSGFuZGxlci5hY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToyMzE0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuZmlyZUFjdGlvblBlcmZvcm1lZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YTo0MDcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5zZXRQcmVzc2VkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjI2MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcucGxhZi5iYXNpYy5CYXNpY0J1dHRvbkxpc3RlbmVyLm1vdXNlUmVsZWFzZWQoQmFzaWNCdXR0b25MaXN0ZW5lci5qYXZhOjI3OSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQVdURXZlbnRNdWx0aWNhc3Rlci5tb3VzZVJlbGVhc2VkKEFXVEV2ZW50TXVsdGljYXN0ZXIuamF2YToyOTcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChDb21wb25lbnQuamF2YTo2NjIxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5KQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KEpDb21wb25lbnQuamF2YTozMzk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc0V2ZW50KENvbXBvbmVudC5qYXZhOjYzODYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5wcm9jZXNzRXZlbnQoQ29udGFpbmVyLmphdmE6MjI2NilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnRJbXBsKENvbXBvbmVudC5qYXZhOjQ5OTYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzI0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucmV0YXJnZXRNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ5NDgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5wcm9jZXNzTW91c2VFdmVudChDb250YWluZXIuamF2YTo0NTc1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChDb250YWluZXIuamF2YTo0NTE2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMxMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuV2luZG93LmRpc3BhdGNoRXZlbnRJbXBsKFdpbmRvdy5qYXZhOjI3ODApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudEltcGwoRXZlbnRRdWV1ZS5qYXZhOjc3NSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzIwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MTQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6OTgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ1KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50KEV2ZW50UXVldWUuamF2YTo3NDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcE9uZUV2ZW50Rm9yRmlsdGVycyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MjAzKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JGaWx0ZXIoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEyNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9ySGllcmFyY2h5KEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMTMpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTA5KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwMSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5ydW4oRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjkwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJDYXVzZWQgYnk6IGphdmEucm1pLlNlcnZlckV4Y2VwdGlvbjogUmVtb3RlRXhjZXB0aW9uIG9jY3VycmVkIGluIHNlcnZlciB0aHJlYWQ7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGphdmEucm1pLlJlbW90ZUV4Y2VwdGlvbjogTOG7l2kga2hpIMSR4bq3dCB2w6k6IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0amF2YS5sYW5nLkV4Y2VwdGlvbjogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzkyKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlN0cmVhbVJlbW90ZUNhbGwuZXhjZXB0aW9uUmVjZWl2ZWRGcm9tU2VydmVyKFN0cmVhbVJlbW90ZUNhbGwuamF2YTozMDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuU3RyZWFtUmVtb3RlQ2FsbC5leGVjdXRlQ2FsbChTdHJlYW1SZW1vdGVDYWxsLmphdmE6MjgwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RSZWYuaW52b2tlKFVuaWNhc3RSZWYuamF2YToxNjYpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmludm9rZVJlbW90ZU1ldGhvZChSZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5qYXZhOjIxNSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9qYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuaW52b2tlKFJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmphdmE6MTYwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGpkay5wcm94eTIvamRrLnByb3h5Mi4kUHJveHk3Ni5kYXRWZShVbmtub3duIFNvdXJjZSlcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC54dUx5VGhhbmhUb2FuKERvaVZlUGFuZWwuamF2YToyOTA4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdC4uLiAzOCBtb3JlXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkNhdXNlZCBieTogamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBkYW8uaW1wbC5Eb2lWZURBT0ltcGwuZGF0VmUoRG9pVmVEQU9JbXBsLmphdmE6NDMwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qZGsuaW50ZXJuYWwucmVmbGVjdC5EaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5pbnZva2UoRGlyZWN0TWV0aG9kSGFuZGxlQWNjZXNzb3IuamF2YToxMDMpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5yZWZsZWN0Lk1ldGhvZC5pbnZva2UoTWV0aG9kLmphdmE6NTgwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkuc2VydmVyLlVuaWNhc3RTZXJ2ZXJSZWYuZGlzcGF0Y2goVW5pY2FzdFNlcnZlclJlZi5qYXZhOjM2MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MjAwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToxOTcpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjcxNClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQuc2VydmljZUNhbGwoVHJhbnNwb3J0LmphdmE6MTk2KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQuaGFuZGxlTWVzc2FnZXMoVENQVHJhbnNwb3J0LmphdmE6NTk4KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuMChUQ1BUcmFuc3BvcnQuamF2YTo4NDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5sYW1iZGEkcnVuJDAoVENQVHJhbnNwb3J0LmphdmE6NzIxKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4oVENQVHJhbnNwb3J0LmphdmE6NzIwKVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IucnVuV29ya2VyKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjExNDQpXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ilx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvciRXb3JrZXIucnVuKFRocmVhZFBvb2xFeGVjdXRvci5qYXZhOjY0MilcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLlRocmVhZC5ydW4oVGhyZWFkLmphdmE6MTU3MClcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiQ2F1c2VkIGJ5OiBqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcciJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiXHRhdCBkYW8uaW1wbC5Eb2lWZURBT0ltcGwuZGF0VmUoRG9pVmVEQU9JbXBsLmphdmE6MzQ0KVxyIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJcdC4uLiAxNSBtb3JlXHIifSx7InR5cGUiOiJoYXJkQnJlYWsifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkJhc2VkIG9uIHRoZSBlcnJvciBzdGFjayB0cmFjZSwgdGhlIG1haW4gaXNzdWUgaXMgdGhhdCB0aGUgc3lzdGVtIGlzIHRyeWluZyB0byBib29rIGEgc2VhdCB0aGF0J3MgYWxyZWFkeSB0YWtlbiBieSBhbm90aGVyIHRpY2tldCBpbiB0aGUgc2FtZSBzY2hlZHVsZS4gSGVyZSdzIGhvdyB0byBmaXggdGhpcyBpbiB0aGUgYHh1THlUaGFuaFRvYW5gIG1ldGhvZCBpbiBgRG9pVmVQYW5lbC5qYXZhYDpcblxuPGF1Z21lbnRfY29kZV9zbmlwcGV0IHBhdGg9XCJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmFcIiBtb2RlPVwiRURJVFwiPlxuYGBgamF2YVxucHJpdmF0ZSBib29sZWFuIHh1THlUaGFuaFRvYW4oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICB0cnkge1xuICAgICAgICAvLyAxLiBDaGVjayBpZiB0aGUgc2VsZWN0ZWQgc2VhdCBpcyBhdmFpbGFibGUgYmVmb3JlIHByb2NlZWRpbmdcbiAgICAgICAgaWYgKCFkb2lWZURBTy5raWVtVHJhQ2hvTmdvaShjaG9OZ29pRGFDaG9uLmdldE1hQ2hvKCksIGxpY2hUcmluaERhQ2hvbi5nZXRNYUxpY2hUcmluaCgpKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIkNo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dC4gVnVpIGzDsm5nIGNo4buNbiBjaOG7lyBuZ+G7k2kga2jDoWMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMi4gQ3JlYXRlIG5ldyB0aWNrZXQgd2l0aCBiYXNpYyBpbmZvIGZpcnN0XG4gICAgICAgIFZlVGF1IHZlVGF1TW9pID0gbmV3IFZlVGF1KCk7XG4gICAgICAgIHZlVGF1TW9pLnNldE1hVmUoZ2VuZXJhdGVNYVZlKCkpO1xuICAgICAgICB2ZVRhdU1vaS5zZXRUZW5LaGFjaEhhbmcodmVUYXVIaWVuVGFpLmdldFRlbktoYWNoSGFuZygpKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0R2lheVRvKHZlVGF1SGllblRhaS5nZXRHaWF5VG8oKSk7XG4gICAgICAgIHZlVGF1TW9pLnNldE5nYXlEaSh2ZVRhdUhpZW5UYWkuZ2V0TmdheURpKCkpO1xuICAgICAgICB2ZVRhdU1vaS5zZXREb2lUdW9uZyh2ZVRhdUhpZW5UYWkuZ2V0RG9pVHVvbmcoKSk7XG4gICAgICAgIHZlVGF1TW9pLnNldExpY2hUcmluaFRhdShsaWNoVHJpbmhEYUNob24pO1xuICAgICAgICB2ZVRhdU1vaS5zZXRLaHV5ZW5NYWkoa2h1eWVuTWFpRGFDaG9uKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0R2lhVmUodmVUYXVIaWVuVGFpLmdldEdpYVZlKCkpO1xuICAgICAgICB2ZVRhdU1vaS5zZXRUcmFuZ1RoYWkoVHJhbmdUaGFpVmVUYXUuQ0hPX1hBQ19OSEFOKTtcblxuICAgICAgICAvLyAzLiBUcnkgdG8gYm9vayB0aGUgc2VhdCB3aXRoIHRoZSBuZXcgdGlja2V0XG4gICAgICAgIGJvb2xlYW4gbHV1VmVNb2kgPSBkb2lWZURBTy5kYXRWZSh2ZVRhdU1vaSwgY2hvTmdvaURhQ2hvbi5nZXRNYUNobygpKTtcbiAgICAgICAgaWYgKCFsdXVWZU1vaSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIktow7RuZyB0aOG7gyDEkeG6t3QgdsOpIG3hu5tpLiBWdWkgbMOybmcgdGjhu60gbOG6oWkuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gNC4gRmluZCBjdXN0b21lciBpbmZvcm1hdGlvblxuICAgICAgICBLaGFjaEhhbmcga2hhY2hIYW5nID0gZG9pVmVEQU8uZ2V0S2hhY2hIYW5nQnlNYVZlKHZlVGF1SGllblRhaS5nZXRNYVZlKCkpO1xuICAgICAgICBpZiAoa2hhY2hIYW5nID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFJvbGxiYWNrIHRoZSBzZWF0IGJvb2tpbmdcbiAgICAgICAgICAgIGRvaVZlREFPLmh1eVZlKHZlVGF1TW9pLmdldE1hVmUoKSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiS2jDtG5nIHTDrG0gdGjhuqV5IHRow7RuZyB0aW4ga2jDoWNoIGjDoG5nIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnRpbnVlIHdpdGggaW52b2ljZSBjcmVhdGlvbi4uLlxuICAgICAgICBkb3VibGUgdmF0ID0gMC4xO1xuICAgICAgICBkb3VibGUgdGllblRodWUgPSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSAqIHZhdDtcbiAgICAgICAgZG91YmxlIHRoYW5oVGllbiA9IHZlVGF1SGllblRhaS5nZXRHaWFWZSgpICsgdGllblRodWU7XG4gICAgICAgIGRvdWJsZSB0b25nVGllbiA9IHRoYW5oVGllbiArIHRpZW5UaHVlO1xuXG4gICAgICAgIC8vIENyZWF0ZSBpbnZvaWNlXG4gICAgICAgIEhvYURvbiBob2FEb24gPSBuZXcgSG9hRG9uKCk7XG4gICAgICAgIFN0cmluZyBtYUhEID0gZ2VuZXJhdGVNYUhEKCk7XG4gICAgICAgIGhvYURvbi5zZXRNYUhEKG1hSEQpO1xuICAgICAgICBob2FEb24uc2V0TmdheUxhcChMb2NhbERhdGVUaW1lLm5vdygpKTtcbiAgICAgICAgaG9hRG9uLnNldFRpZW5HaWFtKGdpYVZlQmFuRGF1IC0gdG9uZ1RpZW4pO1xuICAgICAgICBob2FEb24uc2V0VG9uZ1RpZW4odG9uZ1RpZW4pO1xuICAgICAgICBob2FEb24uc2V0S2hhY2hIYW5nKGtoYWNoSGFuZyk7XG5cbiAgICAgICAgaWYgKG5oYW5WaWVuUGFuZWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gUm9sbGJhY2sgZXZlcnl0aGluZyBpZiBzdGFmZiBpbmZvIGlzIG1pc3NpbmdcbiAgICAgICAgICAgIGRvaVZlREFPLmh1eVZlKHZlVGF1TW9pLmdldE1hVmUoKSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiVGhp4bq/dSB0aMO0bmcgdGluIG5ow6JuIHZpw6puIVwiKTtcbiAgICAgICAgfVxuICAgICAgICBob2FEb24uc2V0TnYobmhhblZpZW5QYW5lbCk7XG5cbiAgICAgICAgLy8gR2V0IGludm9pY2UgdHlwZVxuICAgICAgICBMb2FpSG9hRG9uIGxvYWlIb2FEb24gPSBsb2FpSG9hRG9uREFPLmZpbmRCeUlkKFwiTEhEMDAxXCIpO1xuICAgICAgICBpZiAobG9haUhvYURvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICBkb2lWZURBTy5odXlWZSh2ZVRhdU1vaS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIktow7RuZyB0w6xtIHRo4bqleSBsb+G6oWkgaMOzYSDEkcahbiFcIik7XG4gICAgICAgIH1cbiAgICAgICAgaG9hRG9uLnNldExvYWlIb2FEb24obG9haUhvYURvbik7XG5cbiAgICAgICAgLy8gU2F2ZSBpbnZvaWNlXG4gICAgICAgIGJvb2xlYW4gc2F2ZWRIb2FEb24gPSBob2FEb25EQU8uc2F2ZUhvYURvbihob2FEb24pO1xuICAgICAgICBpZiAoIXNhdmVkSG9hRG9uKSB7XG4gICAgICAgICAgICBkb2lWZURBTy5odXlWZSh2ZVRhdU1vaS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIktow7RuZyB0aOG7gyBsxrB1IGjDs2EgxJHGoW4hXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuZCBzYXZlIGludm9pY2UgZGV0YWlsc1xuICAgICAgICBDaGlUaWV0SG9hRG9uIGNoaVRpZXRIb2FEb24gPSBuZXcgQ2hpVGlldEhvYURvbigpO1xuICAgICAgICBDaGlUaWV0SG9hRG9uSWQgY2hpVGlldElkID0gbmV3IENoaVRpZXRIb2FEb25JZCgpO1xuICAgICAgICBjaGlUaWV0SWQuc2V0TWFIRChtYUhEKTtcbiAgICAgICAgY2hpVGlldElkLnNldE1hVmUodmVUYXVIaWVuVGFpLmdldE1hVmUoKSk7XG4gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0SWQoY2hpVGlldElkKTtcbiAgICAgICAgY2hpVGlldEhvYURvbi5zZXRIb2FEb24oaG9hRG9uKTtcbiAgICAgICAgY2hpVGlldEhvYURvbi5zZXRWZVRhdSh2ZVRhdUhpZW5UYWkpO1xuICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFNvTHVvbmcoMSk7XG4gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0VkFUKHZhdCk7XG4gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0VGhhbmhUaWVuKHRoYW5oVGllbik7XG4gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0VGllblRodWUodGllblRodWUpO1xuXG4gICAgICAgIGJvb2xlYW4gc2F2ZWRDaGlUaWV0ID0gY2hpVGlldEhvYURvbkRBTy5zYXZlKGNoaVRpZXRIb2FEb24pO1xuICAgICAgICBpZiAoIXNhdmVkQ2hpVGlldCkge1xuICAgICAgICAgICAgLy8gUm9sbGJhY2sgZXZlcnl0aGluZyBpZiBpbnZvaWNlIGRldGFpbCBzYXZlIGZhaWxzXG4gICAgICAgICAgICBkb2lWZURBTy5odXlWZSh2ZVRhdU1vaS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgaG9hRG9uREFPLmRlbGV0ZShtYUhEKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJLaMO0bmcgdGjhu4MgbMawdSBjaGkgdGnhur90IGjDs2EgxJHGoW4hXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuICAgICAgICBTeXN0ZW0uZXJyLnByaW50bG4oXCJFcnJvciBpbiB4dUx5VGhhbmhUb2FuOiBcIiArIGUuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtcbiAgICAgICAgdGhyb3cgbmV3IFJlbW90ZUV4Y2VwdGlvbihcIkzhu5dpIGtoaSB44butIGzDvSB0aGFuaCB0b8OhbjogXCIgKyBlLmdldE1lc3NhZ2UoKSwgZSk7XG4gICAgfVxufVxuYGBgXG48L2F1Z21lbnRfY29kZV9zbmlwcGV0PlxuXG5LZXkgY2hhbmdlcyBtYWRlIHRvIGZpeCB0aGUgaXNzdWVzOlxuXG4xLiBBZGRlZCBzZWF0IGF2YWlsYWJpbGl0eSBjaGVjayBiZWZvcmUgcHJvY2VlZGluZyB3aXRoIHRoZSBib29raW5nXG4yLiBDcmVhdGVkIHRoZSBuZXcgdGlja2V0IHdpdGggYWxsIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbiBiZWZvcmUgYXR0ZW1wdGluZyB0byBib29rIHRoZSBzZWF0XG4zLiBBZGRlZCBwcm9wZXIgcm9sbGJhY2sgbWVjaGFuaXNtcyBpbiBjYXNlIG9mIGZhaWx1cmVzIGF0IGFueSBzdGVwXG40LiBJbXByb3ZlZCBlcnJvciBoYW5kbGluZyBhbmQgbWVzc2FnaW5nXG41LiBFbnN1cmVkIHByb3BlciBzZXF1ZW5jZSBvZiBvcGVyYXRpb25zOiBzZWF0IGNoZWNrIOKGkiB0aWNrZXQgY3JlYXRpb24g4oaSIHNlYXQgYm9va2luZyDihpIgaW52b2ljZSBjcmVhdGlvblxuNi4gQWRkZWQgbW9yZSBkZXRhaWxlZCBlcnJvciBtZXNzYWdlcyBmb3IgYmV0dGVyIGRlYnVnZ2luZ1xuXG5Zb3UnbGwgYWxzbyBuZWVkIHRvIGFkZCB0aGUgYGtpZW1UcmFDaG9OZ29pYCBtZXRob2QgdG8geW91ciBgRG9pVmVEQU9gIGludGVyZmFjZSBhbmQgaW1wbGVtZW50IGl0IGluIGBEb2lWZURBT0ltcGxgOlxuXG48YXVnbWVudF9jb2RlX3NuaXBwZXQgcGF0aD1cIlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZGFvL0RvaVZlREFPLmphdmFcIiBtb2RlPVwiRURJVFwiPlxuYGBgamF2YVxucHVibGljIGludGVyZmFjZSBEb2lWZURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgLy8gLi4uIG90aGVyIG1ldGhvZHMgLi4uXG4gICAgXG4gICAgYm9vbGVhbiBraWVtVHJhQ2hvTmdvaShTdHJpbmcgbWFDaG8sIFN0cmluZyBtYUxpY2hUcmluaCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn1cbmBgYFxuPC9hdWdtZW50X2NvZGVfc25pcHBldD5cblxuPGF1Z21lbnRfY29kZV9zbmlwcGV0IHBhdGg9XCJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL0RvaVZlREFPSW1wbC5qYXZhXCIgbW9kZT1cIkVESVRcIj5cbmBgYGphdmFcbnB1YmxpYyBib29sZWFuIGtpZW1UcmFDaG9OZ29pKFN0cmluZyBtYUNobywgU3RyaW5nIG1hTGljaFRyaW5oKSB0aHJvd3MgUmVtb3RlRXhjZXB0aW9uIHtcbiAgICB0cnkge1xuICAgICAgICBTdHJpbmcgc3FsID0gXCJTRUxFQ1QgQ09VTlQoKikgRlJPTSBWZVRhdSB2IFwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJKT0lOIENoaVRpZXRDaG9OZ29pIGN0IE9OIHYubWFWZSA9IGN0Lm1hVmUgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIldIRVJFIGN0Lm1hQ2hvID0gPyBBTkQgdi5tYUxpY2hUcmluaCA9ID8gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkFORCB2LnRyYW5nVGhhaSBOT1QgSU4gKCdEQV9IVVknLCAnREFfRE9JJylcIjtcbiAgICAgICAgXG4gICAgICAgIFByZXBhcmVkU3RhdGVtZW50IHN0bXQgPSBjb24ucHJlcGFyZVN0YXRlbWVudChzcWwpO1xuICAgICAgICBzdG10LnNldFN0cmluZygxLCBtYUNobyk7XG4gICAgICAgIHN0bXQuc2V0U3RyaW5nKDIsIG1hTGljaFRyaW5oKTtcbiAgICAgICAgXG4gICAgICAgIFJlc3VsdFNldCBycyA9IHN0bXQuZXhlY3V0ZVF1ZXJ5KCk7XG4gICAgICAgIGlmIChycy5uZXh0KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBycy5nZXRJbnQoMSkgPT0gMDsgLy8gUmV0dXJuIHRydWUgaWYgc2VhdCBpcyBhdmFpbGFibGVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChTUUxFeGNlcHRpb24gZSkge1xuICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpO1xuICAgICAgICB0aHJvdyBuZXcgUmVtb3RlRXhjZXB0aW9uKFwiTOG7l2kga2hpIGtp4buDbSB0cmEgY2jhu5cgbmfhu5NpXCIsIGUpO1xuICAgIH1cbn1cbmBgYFxuPC9hdWdtZW50X2NvZGVfc25pcHBldD5cblxuVGhlc2UgY2hhbmdlcyBzaG91bGQgcmVzb2x2ZSB0aGUgc2VhdCBib29raW5nIGNvbmZsaWN0IGlzc3VlcyBhbmQgcHJvdmlkZSBiZXR0ZXIgZXJyb3IgaGFuZGxpbmcgdGhyb3VnaG91dCB0aGUgdGlja2V0IGV4Y2hhbmdlIHByb2Nlc3MuXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YTo1NDE1Ny01NTA2NFxuUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhOjcyOTYxLTczNTk0XG5Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmE6ODIyNzUtODM2NDFcblByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YTo5MTcwMy05MjU2NVxuUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhOjk0NzI4LTk1NTY0XG5Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmE6MTAwMDY0LTEwMTA4M1xuUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhOjEwMjY0NC0xMDMzNTNcblByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWxfRml4LmphdmE6MC0zNzBcblByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWxfRml4LmphdmE6MzcwLTEyNzhcblByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL1Byb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWxfRml4LmphdmE6MzUyNy00Mjg3In1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoicmVyZWFkIHRoZSB3aG9sZSBwcm9qZWN0LCBoZWxwIG1lIGZpeCB0aGUgZXJyb3JzXG5FcnJvciBpbiB4dUx5VGhhbmhUb2FuOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuamF2YS5ybWkuU2VydmVyRXhjZXB0aW9uOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0U2VydmVyUmVmLmRpc3BhdGNoKFVuaWNhc3RTZXJ2ZXJSZWYuamF2YTozOTIpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjIwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MTk3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo3MTQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0LnNlcnZpY2VDYWxsKFRyYW5zcG9ydC5qYXZhOjE5NilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0LmhhbmRsZU1lc3NhZ2VzKFRDUFRyYW5zcG9ydC5qYXZhOjU5OClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bjAoVENQVHJhbnNwb3J0LmphdmE6ODQ0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIubGFtYmRhJHJ1biQwKFRDUFRyYW5zcG9ydC5qYXZhOjcyMSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuKFRDUFRyYW5zcG9ydC5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yLnJ1bldvcmtlcihUaHJlYWRQb29sRXhlY3V0b3IuamF2YToxMTQ0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IkV29ya2VyLnJ1bihUaHJlYWRQb29sRXhlY3V0b3IuamF2YTo2NDIpXHJcblx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5UaHJlYWQucnVuKFRocmVhZC5qYXZhOjE1NzApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuU3RyZWFtUmVtb3RlQ2FsbC5leGNlcHRpb25SZWNlaXZlZEZyb21TZXJ2ZXIoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjMwNClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4ZWN1dGVDYWxsKFN0cmVhbVJlbW90ZUNhbGwuamF2YToyODApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlZi5pbnZva2UoVW5pY2FzdFJlZi5qYXZhOjE2NilcclxuXHRhdCBqYXZhLnJtaS9qYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuaW52b2tlUmVtb3RlTWV0aG9kKFJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmphdmE6MjE1KVxyXG5cdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2UoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToxNjApXHJcblx0YXQgamRrLnByb3h5Mi9qZGsucHJveHkyLiRQcm94eTc2LmRhdFZlKFVua25vd24gU291cmNlKVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLnh1THlUaGFuaFRvYW4oRG9pVmVQYW5lbC5qYXZhOjI5MDgpXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwuZG9pVmUoRG9pVmVQYW5lbC5qYXZhOjEzMTgpXHJcblx0YXQgZ3VpQ2xpZW50LkRvaVZlUGFuZWwubGFtYmRhJGNyZWF0ZUJ1dHRvblBhbmVsJDcoRG9pVmVQYW5lbC5qYXZhOjgwNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuQWJzdHJhY3RCdXR0b24uZmlyZUFjdGlvblBlcmZvcm1lZChBYnN0cmFjdEJ1dHRvbi5qYXZhOjE5NzIpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkFic3RyYWN0QnV0dG9uJEhhbmRsZXIuYWN0aW9uUGVyZm9ybWVkKEFic3RyYWN0QnV0dG9uLmphdmE6MjMxNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuRGVmYXVsdEJ1dHRvbk1vZGVsLmZpcmVBY3Rpb25QZXJmb3JtZWQoRGVmYXVsdEJ1dHRvbk1vZGVsLmphdmE6NDA3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5EZWZhdWx0QnV0dG9uTW9kZWwuc2V0UHJlc3NlZChEZWZhdWx0QnV0dG9uTW9kZWwuamF2YToyNjIpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLnBsYWYuYmFzaWMuQmFzaWNCdXR0b25MaXN0ZW5lci5tb3VzZVJlbGVhc2VkKEJhc2ljQnV0dG9uTGlzdGVuZXIuamF2YToyNzkpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkFXVEV2ZW50TXVsdGljYXN0ZXIubW91c2VSZWxlYXNlZChBV1RFdmVudE11bHRpY2FzdGVyLmphdmE6Mjk3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQucHJvY2Vzc01vdXNlRXZlbnQoQ29tcG9uZW50LmphdmE6NjYyMSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuSkNvbXBvbmVudC5wcm9jZXNzTW91c2VFdmVudChKQ29tcG9uZW50LmphdmE6MzM5OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LnByb2Nlc3NFdmVudChDb21wb25lbnQuamF2YTo2Mzg2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIucHJvY2Vzc0V2ZW50KENvbnRhaW5lci5qYXZhOjIyNjYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50SW1wbChDb21wb25lbnQuamF2YTo0OTk2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db250YWluZXIuZGlzcGF0Y2hFdmVudEltcGwoQ29udGFpbmVyLmphdmE6MjMyNClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnQoQ29tcG9uZW50LmphdmE6NDgyOClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLnJldGFyZ2V0TW91c2VFdmVudChDb250YWluZXIuamF2YTo0OTQ4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5MaWdodHdlaWdodERpc3BhdGNoZXIucHJvY2Vzc01vdXNlRXZlbnQoQ29udGFpbmVyLmphdmE6NDU3NSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLmRpc3BhdGNoRXZlbnQoQ29udGFpbmVyLmphdmE6NDUxNilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLmRpc3BhdGNoRXZlbnRJbXBsKENvbnRhaW5lci5qYXZhOjIzMTApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LldpbmRvdy5kaXNwYXRjaEV2ZW50SW1wbChXaW5kb3cuamF2YToyNzgwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudChDb21wb25lbnQuamF2YTo0ODI4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlLmRpc3BhdGNoRXZlbnRJbXBsKEV2ZW50UXVldWUuamF2YTo3NzUpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNC5ydW4oRXZlbnRRdWV1ZS5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ0LnJ1bihFdmVudFF1ZXVlLmphdmE6NzE0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo0MDApXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo4NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjk4KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDUucnVuKEV2ZW50UXVldWUuamF2YTo3NDcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNS5ydW4oRXZlbnRRdWV1ZS5qYXZhOjc0NSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6ODcpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUuZGlzcGF0Y2hFdmVudChFdmVudFF1ZXVlLmphdmE6NzQ0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBPbmVFdmVudEZvckZpbHRlcnMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjIwMylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzRm9yRmlsdGVyKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMjQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50c0ZvckhpZXJhcmNoeShFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTEzKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHMoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjEwOSlcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMDEpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucnVuKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YTo5MClcclxuQ2F1c2VkIGJ5OiBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTo0MzApXHJcblx0YXQgamF2YS5iYXNlL2pkay5pbnRlcm5hbC5yZWZsZWN0LkRpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmludm9rZShEaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5qYXZhOjEwMylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kLmludm9rZShNZXRob2QuamF2YTo1ODApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzYwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyXG5DYXVzZWQgYnk6IGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTozNDQpXHJcblx0Li4uIDE1IG1vcmVcclxuamF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgeOG7rSBsw70gdGhhbmggdG/DoW46IFJlbW90ZUV4Y2VwdGlvbiBvY2N1cnJlZCBpbiBzZXJ2ZXIgdGhyZWFkOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuU2VydmVyRXhjZXB0aW9uOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuXHRhdCBndWlDbGllbnQuRG9pVmVQYW5lbC54dUx5VGhhbmhUb2FuKERvaVZlUGFuZWwuamF2YToyOTY2KVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmRvaVZlKERvaVZlUGFuZWwuamF2YToxMzE4KVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLmxhbWJkYSRjcmVhdGVCdXR0b25QYW5lbCQ3KERvaVZlUGFuZWwuamF2YTo4MDQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkFic3RyYWN0QnV0dG9uLmZpcmVBY3Rpb25QZXJmb3JtZWQoQWJzdHJhY3RCdXR0b24uamF2YToxOTcyKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5BYnN0cmFjdEJ1dHRvbiRIYW5kbGVyLmFjdGlvblBlcmZvcm1lZChBYnN0cmFjdEJ1dHRvbi5qYXZhOjIzMTQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkRlZmF1bHRCdXR0b25Nb2RlbC5maXJlQWN0aW9uUGVyZm9ybWVkKERlZmF1bHRCdXR0b25Nb2RlbC5qYXZhOjQwNylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YXguc3dpbmcuRGVmYXVsdEJ1dHRvbk1vZGVsLnNldFByZXNzZWQoRGVmYXVsdEJ1dHRvbk1vZGVsLmphdmE6MjYyKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZheC5zd2luZy5wbGFmLmJhc2ljLkJhc2ljQnV0dG9uTGlzdGVuZXIubW91c2VSZWxlYXNlZChCYXNpY0J1dHRvbkxpc3RlbmVyLmphdmE6Mjc5KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5BV1RFdmVudE11bHRpY2FzdGVyLm1vdXNlUmVsZWFzZWQoQVdURXZlbnRNdWx0aWNhc3Rlci5qYXZhOjI5NylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LnByb2Nlc3NNb3VzZUV2ZW50KENvbXBvbmVudC5qYXZhOjY2MjEpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmF4LnN3aW5nLkpDb21wb25lbnQucHJvY2Vzc01vdXNlRXZlbnQoSkNvbXBvbmVudC5qYXZhOjMzOTgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5wcm9jZXNzRXZlbnQoQ29tcG9uZW50LmphdmE6NjM4NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLnByb2Nlc3NFdmVudChDb250YWluZXIuamF2YToyMjY2KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5Db21wb25lbnQuZGlzcGF0Y2hFdmVudEltcGwoQ29tcG9uZW50LmphdmE6NDk5NilcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29udGFpbmVyLmRpc3BhdGNoRXZlbnRJbXBsKENvbnRhaW5lci5qYXZhOjIzMjQpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbXBvbmVudC5kaXNwYXRjaEV2ZW50KENvbXBvbmVudC5qYXZhOjQ4MjgpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5yZXRhcmdldE1vdXNlRXZlbnQoQ29udGFpbmVyLmphdmE6NDk0OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuTGlnaHR3ZWlnaHREaXNwYXRjaGVyLnByb2Nlc3NNb3VzZUV2ZW50KENvbnRhaW5lci5qYXZhOjQ1NzUpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkxpZ2h0d2VpZ2h0RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KENvbnRhaW5lci5qYXZhOjQ1MTYpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkNvbnRhaW5lci5kaXNwYXRjaEV2ZW50SW1wbChDb250YWluZXIuamF2YToyMzEwKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5XaW5kb3cuZGlzcGF0Y2hFdmVudEltcGwoV2luZG93LmphdmE6Mjc4MClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuQ29tcG9uZW50LmRpc3BhdGNoRXZlbnQoQ29tcG9uZW50LmphdmE6NDgyOClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZS5kaXNwYXRjaEV2ZW50SW1wbChFdmVudFF1ZXVlLmphdmE6Nzc1KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDQucnVuKEV2ZW50UXVldWUuamF2YTo3MjApXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50UXVldWUkNC5ydW4oRXZlbnRRdWV1ZS5qYXZhOjcxNClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LlByb3RlY3Rpb25Eb21haW4kSmF2YVNlY3VyaXR5QWNjZXNzSW1wbC5kb0ludGVyc2VjdGlvblByaXZpbGVnZShQcm90ZWN0aW9uRG9tYWluLmphdmE6ODcpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuUHJvdGVjdGlvbkRvbWFpbiRKYXZhU2VjdXJpdHlBY2Nlc3NJbXBsLmRvSW50ZXJzZWN0aW9uUHJpdmlsZWdlKFByb3RlY3Rpb25Eb21haW4uamF2YTo5OClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnRRdWV1ZSQ1LnJ1bihFdmVudFF1ZXVlLmphdmE6NzQ3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlJDUucnVuKEV2ZW50UXVldWUuamF2YTo3NDUpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5Qcm90ZWN0aW9uRG9tYWluJEphdmFTZWN1cml0eUFjY2Vzc0ltcGwuZG9JbnRlcnNlY3Rpb25Qcml2aWxlZ2UoUHJvdGVjdGlvbkRvbWFpbi5qYXZhOjg3KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudFF1ZXVlLmRpc3BhdGNoRXZlbnQoRXZlbnRRdWV1ZS5qYXZhOjc0NClcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wT25lRXZlbnRGb3JGaWx0ZXJzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToyMDMpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50c0ZvckZpbHRlcihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTI0KVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnB1bXBFdmVudHNGb3JIaWVyYXJjaHkoRXZlbnREaXNwYXRjaFRocmVhZC5qYXZhOjExMylcclxuXHRhdCBqYXZhLmRlc2t0b3AvamF2YS5hd3QuRXZlbnREaXNwYXRjaFRocmVhZC5wdW1wRXZlbnRzKEV2ZW50RGlzcGF0Y2hUaHJlYWQuamF2YToxMDkpXHJcblx0YXQgamF2YS5kZXNrdG9wL2phdmEuYXd0LkV2ZW50RGlzcGF0Y2hUaHJlYWQucHVtcEV2ZW50cyhFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6MTAxKVxyXG5cdGF0IGphdmEuZGVza3RvcC9qYXZhLmF3dC5FdmVudERpc3BhdGNoVGhyZWFkLnJ1bihFdmVudERpc3BhdGNoVGhyZWFkLmphdmE6OTApXHJcbkNhdXNlZCBieTogamF2YS5ybWkuU2VydmVyRXhjZXB0aW9uOiBSZW1vdGVFeGNlcHRpb24gb2NjdXJyZWQgaW4gc2VydmVyIHRocmVhZDsgbmVzdGVkIGV4Y2VwdGlvbiBpczogXHJcblx0amF2YS5ybWkuUmVtb3RlRXhjZXB0aW9uOiBM4buXaSBraGkgxJHhurd0IHbDqTogQ2jhu5cgbmfhu5NpIMSRw6MgxJHGsOG7o2MgxJHhurd0IGLhu59pIHbDqSBraMOhYyB0cm9uZyBjw7luZyBs4buLY2ggdHLDrG5oOyBuZXN0ZWQgZXhjZXB0aW9uIGlzOiBcclxuXHRqYXZhLmxhbmcuRXhjZXB0aW9uOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmhcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnNlcnZlci5VbmljYXN0U2VydmVyUmVmLmRpc3BhdGNoKFVuaWNhc3RTZXJ2ZXJSZWYuamF2YTozOTIpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjIwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5UcmFuc3BvcnQkMS5ydW4oVHJhbnNwb3J0LmphdmE6MTk3KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnNlY3VyaXR5LkFjY2Vzc0NvbnRyb2xsZXIuZG9Qcml2aWxlZ2VkKEFjY2Vzc0NvbnRyb2xsZXIuamF2YTo3MTQpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0LnNlcnZpY2VDYWxsKFRyYW5zcG9ydC5qYXZhOjE5NilcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0LmhhbmRsZU1lc3NhZ2VzKFRDUFRyYW5zcG9ydC5qYXZhOjU5OClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bjAoVENQVHJhbnNwb3J0LmphdmE6ODQ0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIubGFtYmRhJHJ1biQwKFRDUFRyYW5zcG9ydC5qYXZhOjcyMSlcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NDAwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LnRjcC5UQ1BUcmFuc3BvcnQkQ29ubmVjdGlvbkhhbmRsZXIucnVuKFRDUFRyYW5zcG9ydC5qYXZhOjcyMClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yLnJ1bldvcmtlcihUaHJlYWRQb29sRXhlY3V0b3IuamF2YToxMTQ0KVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLnV0aWwuY29uY3VycmVudC5UaHJlYWRQb29sRXhlY3V0b3IkV29ya2VyLnJ1bihUaHJlYWRQb29sRXhlY3V0b3IuamF2YTo2NDIpXHJcblx0YXQgamF2YS5iYXNlL2phdmEubGFuZy5UaHJlYWQucnVuKFRocmVhZC5qYXZhOjE1NzApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuU3RyZWFtUmVtb3RlQ2FsbC5leGNlcHRpb25SZWNlaXZlZEZyb21TZXJ2ZXIoU3RyZWFtUmVtb3RlQ2FsbC5qYXZhOjMwNClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC5TdHJlYW1SZW1vdGVDYWxsLmV4ZWN1dGVDYWxsKFN0cmVhbVJlbW90ZUNhbGwuamF2YToyODApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlZi5pbnZva2UoVW5pY2FzdFJlZi5qYXZhOjE2NilcclxuXHRhdCBqYXZhLnJtaS9qYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuaW52b2tlUmVtb3RlTWV0aG9kKFJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVyLmphdmE6MjE1KVxyXG5cdGF0IGphdmEucm1pL2phdmEucm1pLnNlcnZlci5SZW1vdGVPYmplY3RJbnZvY2F0aW9uSGFuZGxlci5pbnZva2UoUmVtb3RlT2JqZWN0SW52b2NhdGlvbkhhbmRsZXIuamF2YToxNjApXHJcblx0YXQgamRrLnByb3h5Mi9qZGsucHJveHkyLiRQcm94eTc2LmRhdFZlKFVua25vd24gU291cmNlKVxyXG5cdGF0IGd1aUNsaWVudC5Eb2lWZVBhbmVsLnh1THlUaGFuaFRvYW4oRG9pVmVQYW5lbC5qYXZhOjI5MDgpXHJcblx0Li4uIDM4IG1vcmVcclxuQ2F1c2VkIGJ5OiBqYXZhLnJtaS5SZW1vdGVFeGNlcHRpb246IEzhu5dpIGtoaSDEkeG6t3QgdsOpOiBDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QgYuG7n2kgdsOpIGtow6FjIHRyb25nIGPDuW5nIGzhu4tjaCB0csOsbmg7IG5lc3RlZCBleGNlcHRpb24gaXM6IFxyXG5cdGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTo0MzApXHJcblx0YXQgamF2YS5iYXNlL2pkay5pbnRlcm5hbC5yZWZsZWN0LkRpcmVjdE1ldGhvZEhhbmRsZUFjY2Vzc29yLmludm9rZShEaXJlY3RNZXRob2RIYW5kbGVBY2Nlc3Nvci5qYXZhOjEwMylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kLmludm9rZShNZXRob2QuamF2YTo1ODApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS5zZXJ2ZXIuVW5pY2FzdFNlcnZlclJlZi5kaXNwYXRjaChVbmljYXN0U2VydmVyUmVmLmphdmE6MzYwKVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydCQxLnJ1bihUcmFuc3BvcnQuamF2YToyMDApXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQuVHJhbnNwb3J0JDEucnVuKFRyYW5zcG9ydC5qYXZhOjE5NylcclxuXHRhdCBqYXZhLmJhc2UvamF2YS5zZWN1cml0eS5BY2Nlc3NDb250cm9sbGVyLmRvUHJpdmlsZWdlZChBY2Nlc3NDb250cm9sbGVyLmphdmE6NzE0KVxyXG5cdGF0IGphdmEucm1pL3N1bi5ybWkudHJhbnNwb3J0LlRyYW5zcG9ydC5zZXJ2aWNlQ2FsbChUcmFuc3BvcnQuamF2YToxOTYpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydC5oYW5kbGVNZXNzYWdlcyhUQ1BUcmFuc3BvcnQuamF2YTo1OTgpXHJcblx0YXQgamF2YS5ybWkvc3VuLnJtaS50cmFuc3BvcnQudGNwLlRDUFRyYW5zcG9ydCRDb25uZWN0aW9uSGFuZGxlci5ydW4wKFRDUFRyYW5zcG9ydC5qYXZhOjg0NClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLmxhbWJkYSRydW4kMChUQ1BUcmFuc3BvcnQuamF2YTo3MjEpXHJcblx0YXQgamF2YS5iYXNlL2phdmEuc2VjdXJpdHkuQWNjZXNzQ29udHJvbGxlci5kb1ByaXZpbGVnZWQoQWNjZXNzQ29udHJvbGxlci5qYXZhOjQwMClcclxuXHRhdCBqYXZhLnJtaS9zdW4ucm1pLnRyYW5zcG9ydC50Y3AuVENQVHJhbnNwb3J0JENvbm5lY3Rpb25IYW5kbGVyLnJ1bihUQ1BUcmFuc3BvcnQuamF2YTo3MjApXHJcblx0YXQgamF2YS5iYXNlL2phdmEudXRpbC5jb25jdXJyZW50LlRocmVhZFBvb2xFeGVjdXRvci5ydW5Xb3JrZXIoVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6MTE0NClcclxuXHRhdCBqYXZhLmJhc2UvamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkUG9vbEV4ZWN1dG9yJFdvcmtlci5ydW4oVGhyZWFkUG9vbEV4ZWN1dG9yLmphdmE6NjQyKVxyXG5cdGF0IGphdmEuYmFzZS9qYXZhLmxhbmcuVGhyZWFkLnJ1bihUaHJlYWQuamF2YToxNTcwKVxyXG5DYXVzZWQgYnk6IGphdmEubGFuZy5FeGNlcHRpb246IENo4buXIG5n4buTaSDEkcOjIMSRxrDhu6NjIMSR4bq3dCBi4bufaSB2w6kga2jDoWMgdHJvbmcgY8O5bmcgbOG7i2NoIHRyw6xuaFxyXG5cdGF0IGRhby5pbXBsLkRvaVZlREFPSW1wbC5kYXRWZShEb2lWZURBT0ltcGwuamF2YTozNDQpXHJcblx0Li4uIDE1IG1vcmVcclxuIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmciLCJmb2xkZXJSb290IjoiRDovQ29kZS9QaGFuVGFuSmF2YU5ob21HUFQvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJyZXNwb25zZV90ZXh0IjoiQmFzZWQgb24gdGhlIGVycm9yIHN0YWNrIHRyYWNlLCB0aGUgbWFpbiBpc3N1ZSBpcyB0aGF0IHRoZSBzeXN0ZW0gaXMgdHJ5aW5nIHRvIGJvb2sgYSBzZWF0IHRoYXQncyBhbHJlYWR5IHRha2VuIGJ5IGFub3RoZXIgdGlja2V0IGluIHRoZSBzYW1lIHNjaGVkdWxlLiBIZXJlJ3MgaG93IHRvIGZpeCB0aGlzIGluIHRoZSBgeHVMeVRoYW5oVG9hbmAgbWV0aG9kIGluIGBEb2lWZVBhbmVsLmphdmFgOlxuXG5gYGBgamF2YSBwYXRoPVByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YSBtb2RlPUVESVRcbnByaXZhdGUgYm9vbGVhbiB4dUx5VGhhbmhUb2FuKCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gMS4gQ2hlY2sgaWYgdGhlIHNlbGVjdGVkIHNlYXQgaXMgYXZhaWxhYmxlIGJlZm9yZSBwcm9jZWVkaW5nXG4gICAgICAgIGlmICghZG9pVmVEQU8ua2llbVRyYUNob05nb2koY2hvTmdvaURhQ2hvbi5nZXRNYUNobygpLCBsaWNoVHJpbmhEYUNob24uZ2V0TWFMaWNoVHJpbmgoKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJDaOG7lyBuZ+G7k2kgxJHDoyDEkcaw4bujYyDEkeG6t3QuIFZ1aSBsw7JuZyBjaOG7jW4gY2jhu5cgbmfhu5NpIGtow6FjLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDIuIENyZWF0ZSBuZXcgdGlja2V0IHdpdGggYmFzaWMgaW5mbyBmaXJzdFxuICAgICAgICBWZVRhdSB2ZVRhdU1vaSA9IG5ldyBWZVRhdSgpO1xuICAgICAgICB2ZVRhdU1vaS5zZXRNYVZlKGdlbmVyYXRlTWFWZSgpKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0VGVuS2hhY2hIYW5nKHZlVGF1SGllblRhaS5nZXRUZW5LaGFjaEhhbmcoKSk7XG4gICAgICAgIHZlVGF1TW9pLnNldEdpYXlUbyh2ZVRhdUhpZW5UYWkuZ2V0R2lheVRvKCkpO1xuICAgICAgICB2ZVRhdU1vaS5zZXROZ2F5RGkodmVUYXVIaWVuVGFpLmdldE5nYXlEaSgpKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0RG9pVHVvbmcodmVUYXVIaWVuVGFpLmdldERvaVR1b25nKCkpO1xuICAgICAgICB2ZVRhdU1vaS5zZXRMaWNoVHJpbmhUYXUobGljaFRyaW5oRGFDaG9uKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0S2h1eWVuTWFpKGtodXllbk1haURhQ2hvbik7XG4gICAgICAgIHZlVGF1TW9pLnNldEdpYVZlKHZlVGF1SGllblRhaS5nZXRHaWFWZSgpKTtcbiAgICAgICAgdmVUYXVNb2kuc2V0VHJhbmdUaGFpKFRyYW5nVGhhaVZlVGF1LkNIT19YQUNfTkhBTik7XG5cbiAgICAgICAgLy8gMy4gVHJ5IHRvIGJvb2sgdGhlIHNlYXQgd2l0aCB0aGUgbmV3IHRpY2tldFxuICAgICAgICBib29sZWFuIGx1dVZlTW9pID0gZG9pVmVEQU8uZGF0VmUodmVUYXVNb2ksIGNob05nb2lEYUNob24uZ2V0TWFDaG8oKSk7XG4gICAgICAgIGlmICghbHV1VmVNb2kpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJLaMO0bmcgdGjhu4MgxJHhurd0IHbDqSBt4bubaS4gVnVpIGzDsm5nIHRo4butIGzhuqFpLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDQuIEZpbmQgY3VzdG9tZXIgaW5mb3JtYXRpb25cbiAgICAgICAgS2hhY2hIYW5nIGtoYWNoSGFuZyA9IGRvaVZlREFPLmdldEtoYWNoSGFuZ0J5TWFWZSh2ZVRhdUhpZW5UYWkuZ2V0TWFWZSgpKTtcbiAgICAgICAgaWYgKGtoYWNoSGFuZyA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBSb2xsYmFjayB0aGUgc2VhdCBib29raW5nXG4gICAgICAgICAgICBkb2lWZURBTy5odXlWZSh2ZVRhdU1vaS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIktow7RuZyB0w6xtIHRo4bqleSB0aMO0bmcgdGluIGtow6FjaCBow6BuZyFcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb250aW51ZSB3aXRoIGludm9pY2UgY3JlYXRpb24uLi5cbiAgICAgICAgZG91YmxlIHZhdCA9IDAuMTtcbiAgICAgICAgZG91YmxlIHRpZW5UaHVlID0gdmVUYXVIaWVuVGFpLmdldEdpYVZlKCkgKiB2YXQ7XG4gICAgICAgIGRvdWJsZSB0aGFuaFRpZW4gPSB2ZVRhdUhpZW5UYWkuZ2V0R2lhVmUoKSArIHRpZW5UaHVlO1xuICAgICAgICBkb3VibGUgdG9uZ1RpZW4gPSB0aGFuaFRpZW4gKyB0aWVuVGh1ZTtcblxuICAgICAgICAvLyBDcmVhdGUgaW52b2ljZVxuICAgICAgICBIb2FEb24gaG9hRG9uID0gbmV3IEhvYURvbigpO1xuICAgICAgICBTdHJpbmcgbWFIRCA9IGdlbmVyYXRlTWFIRCgpO1xuICAgICAgICBob2FEb24uc2V0TWFIRChtYUhEKTtcbiAgICAgICAgaG9hRG9uLnNldE5nYXlMYXAoTG9jYWxEYXRlVGltZS5ub3coKSk7XG4gICAgICAgIGhvYURvbi5zZXRUaWVuR2lhbShnaWFWZUJhbkRhdSAtIHRvbmdUaWVuKTtcbiAgICAgICAgaG9hRG9uLnNldFRvbmdUaWVuKHRvbmdUaWVuKTtcbiAgICAgICAgaG9hRG9uLnNldEtoYWNoSGFuZyhraGFjaEhhbmcpO1xuXG4gICAgICAgIGlmIChuaGFuVmllblBhbmVsID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFJvbGxiYWNrIGV2ZXJ5dGhpbmcgaWYgc3RhZmYgaW5mbyBpcyBtaXNzaW5nXG4gICAgICAgICAgICBkb2lWZURBTy5odXlWZSh2ZVRhdU1vaS5nZXRNYVZlKCkpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIlRoaeG6v3UgdGjDtG5nIHRpbiBuaMOibiB2acOqbiFcIik7XG4gICAgICAgIH1cbiAgICAgICAgaG9hRG9uLnNldE52KG5oYW5WaWVuUGFuZWwpO1xuXG4gICAgICAgIC8vIEdldCBpbnZvaWNlIHR5cGVcbiAgICAgICAgTG9haUhvYURvbiBsb2FpSG9hRG9uID0gbG9haUhvYURvbkRBTy5maW5kQnlJZChcIkxIRDAwMVwiKTtcbiAgICAgICAgaWYgKGxvYWlIb2FEb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgZG9pVmVEQU8uaHV5VmUodmVUYXVNb2kuZ2V0TWFWZSgpKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJLaMO0bmcgdMOsbSB0aOG6pXkgbG/huqFpIGjDs2EgxJHGoW4hXCIpO1xuICAgICAgICB9XG4gICAgICAgIGhvYURvbi5zZXRMb2FpSG9hRG9uKGxvYWlIb2FEb24pO1xuXG4gICAgICAgIC8vIFNhdmUgaW52b2ljZVxuICAgICAgICBib29sZWFuIHNhdmVkSG9hRG9uID0gaG9hRG9uREFPLnNhdmVIb2FEb24oaG9hRG9uKTtcbiAgICAgICAgaWYgKCFzYXZlZEhvYURvbikge1xuICAgICAgICAgICAgZG9pVmVEQU8uaHV5VmUodmVUYXVNb2kuZ2V0TWFWZSgpKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJLaMO0bmcgdGjhu4MgbMawdSBow7NhIMSRxqFuIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhbmQgc2F2ZSBpbnZvaWNlIGRldGFpbHNcbiAgICAgICAgQ2hpVGlldEhvYURvbiBjaGlUaWV0SG9hRG9uID0gbmV3IENoaVRpZXRIb2FEb24oKTtcbiAgICAgICAgQ2hpVGlldEhvYURvbklkIGNoaVRpZXRJZCA9IG5ldyBDaGlUaWV0SG9hRG9uSWQoKTtcbiAgICAgICAgY2hpVGlldElkLnNldE1hSEQobWFIRCk7XG4gICAgICAgIGNoaVRpZXRJZC5zZXRNYVZlKHZlVGF1SGllblRhaS5nZXRNYVZlKCkpO1xuICAgICAgICBjaGlUaWV0SG9hRG9uLnNldElkKGNoaVRpZXRJZCk7XG4gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0SG9hRG9uKGhvYURvbik7XG4gICAgICAgIGNoaVRpZXRIb2FEb24uc2V0VmVUYXUodmVUYXVIaWVuVGFpKTtcbiAgICAgICAgY2hpVGlldEhvYURvbi5zZXRTb0x1b25nKDEpO1xuICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFZBVCh2YXQpO1xuICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFRoYW5oVGllbih0aGFuaFRpZW4pO1xuICAgICAgICBjaGlUaWV0SG9hRG9uLnNldFRpZW5UaHVlKHRpZW5UaHVlKTtcblxuICAgICAgICBib29sZWFuIHNhdmVkQ2hpVGlldCA9IGNoaVRpZXRIb2FEb25EQU8uc2F2ZShjaGlUaWV0SG9hRG9uKTtcbiAgICAgICAgaWYgKCFzYXZlZENoaVRpZXQpIHtcbiAgICAgICAgICAgIC8vIFJvbGxiYWNrIGV2ZXJ5dGhpbmcgaWYgaW52b2ljZSBkZXRhaWwgc2F2ZSBmYWlsc1xuICAgICAgICAgICAgZG9pVmVEQU8uaHV5VmUodmVUYXVNb2kuZ2V0TWFWZSgpKTtcbiAgICAgICAgICAgIGhvYURvbkRBTy5kZWxldGUobWFIRCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiS2jDtG5nIHRo4buDIGzGsHUgY2hpIHRp4bq/dCBow7NhIMSRxqFuIVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtcbiAgICAgICAgU3lzdGVtLmVyci5wcmludGxuKFwiRXJyb3IgaW4geHVMeVRoYW5oVG9hbjogXCIgKyBlLmdldE1lc3NhZ2UoKSk7XG4gICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkgeOG7rSBsw70gdGhhbmggdG/DoW46IFwiICsgZS5nZXRNZXNzYWdlKCksIGUpO1xuICAgIH1cbn1cbmBgYGBcblxuS2V5IGNoYW5nZXMgbWFkZSB0byBmaXggdGhlIGlzc3VlczpcblxuMS4gQWRkZWQgc2VhdCBhdmFpbGFiaWxpdHkgY2hlY2sgYmVmb3JlIHByb2NlZWRpbmcgd2l0aCB0aGUgYm9va2luZ1xuMi4gQ3JlYXRlZCB0aGUgbmV3IHRpY2tldCB3aXRoIGFsbCBuZWNlc3NhcnkgaW5mb3JtYXRpb24gYmVmb3JlIGF0dGVtcHRpbmcgdG8gYm9vayB0aGUgc2VhdFxuMy4gQWRkZWQgcHJvcGVyIHJvbGxiYWNrIG1lY2hhbmlzbXMgaW4gY2FzZSBvZiBmYWlsdXJlcyBhdCBhbnkgc3RlcFxuNC4gSW1wcm92ZWQgZXJyb3IgaGFuZGxpbmcgYW5kIG1lc3NhZ2luZ1xuNS4gRW5zdXJlZCBwcm9wZXIgc2VxdWVuY2Ugb2Ygb3BlcmF0aW9uczogc2VhdCBjaGVjayDihpIgdGlja2V0IGNyZWF0aW9uIOKGkiBzZWF0IGJvb2tpbmcg4oaSIGludm9pY2UgY3JlYXRpb25cbjYuIEFkZGVkIG1vcmUgZGV0YWlsZWQgZXJyb3IgbWVzc2FnZXMgZm9yIGJldHRlciBkZWJ1Z2dpbmdcblxuWW91J2xsIGFsc28gbmVlZCB0byBhZGQgdGhlIGBraWVtVHJhQ2hvTmdvaWAgbWV0aG9kIHRvIHlvdXIgYERvaVZlREFPYCBpbnRlcmZhY2UgYW5kIGltcGxlbWVudCBpdCBpbiBgRG9pVmVEQU9JbXBsYDpcblxuYGBgYGphdmEgcGF0aD1Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9Eb2lWZURBTy5qYXZhIG1vZGU9RURJVFxucHVibGljIGludGVyZmFjZSBEb2lWZURBTyBleHRlbmRzIFJlbW90ZSB7XG4gICAgLy8gLi4uIG90aGVyIG1ldGhvZHMgLi4uXG4gICAgXG4gICAgYm9vbGVhbiBraWVtVHJhQ2hvTmdvaShTdHJpbmcgbWFDaG8sIFN0cmluZyBtYUxpY2hUcmluaCkgdGhyb3dzIFJlbW90ZUV4Y2VwdGlvbjtcbn1cbmBgYGBcblxuYGBgYGphdmEgcGF0aD1Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2Rhby9pbXBsL0RvaVZlREFPSW1wbC5qYXZhIG1vZGU9RURJVFxucHVibGljIGJvb2xlYW4ga2llbVRyYUNob05nb2koU3RyaW5nIG1hQ2hvLCBTdHJpbmcgbWFMaWNoVHJpbmgpIHRocm93cyBSZW1vdGVFeGNlcHRpb24ge1xuICAgIHRyeSB7XG4gICAgICAgIFN0cmluZyBzcWwgPSBcIlNFTEVDVCBDT1VOVCgqKSBGUk9NIFZlVGF1IHYgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIkpPSU4gQ2hpVGlldENob05nb2kgY3QgT04gdi5tYVZlID0gY3QubWFWZSBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiV0hFUkUgY3QubWFDaG8gPSA/IEFORCB2Lm1hTGljaFRyaW5oID0gPyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiQU5EIHYudHJhbmdUaGFpIE5PVCBJTiAoJ0RBX0hVWScsICdEQV9ET0knKVwiO1xuICAgICAgICBcbiAgICAgICAgUHJlcGFyZWRTdGF0ZW1lbnQgc3RtdCA9IGNvbi5wcmVwYXJlU3RhdGVtZW50KHNxbCk7XG4gICAgICAgIHN0bXQuc2V0U3RyaW5nKDEsIG1hQ2hvKTtcbiAgICAgICAgc3RtdC5zZXRTdHJpbmcoMiwgbWFMaWNoVHJpbmgpO1xuICAgICAgICBcbiAgICAgICAgUmVzdWx0U2V0IHJzID0gc3RtdC5leGVjdXRlUXVlcnkoKTtcbiAgICAgICAgaWYgKHJzLm5leHQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJzLmdldEludCgxKSA9PSAwOyAvLyBSZXR1cm4gdHJ1ZSBpZiBzZWF0IGlzIGF2YWlsYWJsZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKFNRTEV4Y2VwdGlvbiBlKSB7XG4gICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7XG4gICAgICAgIHRocm93IG5ldyBSZW1vdGVFeGNlcHRpb24oXCJM4buXaSBraGkga2nhu4NtIHRyYSBjaOG7lyBuZ+G7k2lcIiwgZSk7XG4gICAgfVxufVxuYGBgYFxuXG5UaGVzZSBjaGFuZ2VzIHNob3VsZCByZXNvbHZlIHRoZSBzZWF0IGJvb2tpbmcgY29uZmxpY3QgaXNzdWVzIGFuZCBwcm92aWRlIGJldHRlciBlcnJvciBoYW5kbGluZyB0aHJvdWdob3V0IHRoZSB0aWNrZXQgZXhjaGFuZ2UgcHJvY2Vzcy5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W3siY2hhcl9zdGFydCI6IjU0MTU3IiwiY2hhcl9lbmQiOiI1NTA2NCIsImJsb2JfbmFtZSI6IjI5MWM4ZDZhZjQxYmE4YzM2N2U5NThhYzg3NDZhNzczYjYxODFlN2I1OWQ1NGUxZWY1MDNmM2ZmY2U1ODY1NmUiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmEifX0seyJjaGFyX3N0YXJ0IjoiNzI5NjEiLCJjaGFyX2VuZCI6IjczNTk0IiwiYmxvYl9uYW1lIjoiMjkxYzhkNmFmNDFiYThjMzY3ZTk1OGFjODc0NmE3NzNiNjE4MWU3YjU5ZDU0ZTFlZjUwM2YzZmZjZTU4NjU2ZSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6IlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YSJ9fSx7ImNoYXJfc3RhcnQiOiI4MjI3NSIsImNoYXJfZW5kIjoiODM2NDEiLCJibG9iX25hbWUiOiIyOTFjOGQ2YWY0MWJhOGMzNjdlOTU4YWM4NzQ2YTc3M2I2MTgxZTdiNTlkNTRlMWVmNTAzZjNmZmNlNTg2NTZlIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjkxNzAzIiwiY2hhcl9lbmQiOiI5MjU2NSIsImJsb2JfbmFtZSI6IjI5MWM4ZDZhZjQxYmE4YzM2N2U5NThhYzg3NDZhNzczYjYxODFlN2I1OWQ1NGUxZWY1MDNmM2ZmY2U1ODY1NmUiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmEifX0seyJjaGFyX3N0YXJ0IjoiOTQ3MjgiLCJjaGFyX2VuZCI6Ijk1NTY0IiwiYmxvYl9uYW1lIjoiMjkxYzhkNmFmNDFiYThjMzY3ZTk1OGFjODc0NmE3NzNiNjE4MWU3YjU5ZDU0ZTFlZjUwM2YzZmZjZTU4NjU2ZSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6IlByb2plY3RfQmFuVmVUYXVUYWlHYXNMYWNIb25nL3NyYy9tYWluL2phdmEvZ3VpQ2xpZW50L0RvaVZlUGFuZWwuamF2YSJ9fSx7ImNoYXJfc3RhcnQiOiIxMDAwNjQiLCJjaGFyX2VuZCI6IjEwMTA4MyIsImJsb2JfbmFtZSI6IjI5MWM4ZDZhZjQxYmE4YzM2N2U5NThhYzg3NDZhNzczYjYxODFlN2I1OWQ1NGUxZWY1MDNmM2ZmY2U1ODY1NmUiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsLmphdmEifX0seyJjaGFyX3N0YXJ0IjoiMTAyNjQ0IiwiY2hhcl9lbmQiOiIxMDMzNTMiLCJibG9iX25hbWUiOiIyOTFjOGQ2YWY0MWJhOGMzNjdlOTU4YWM4NzQ2YTc3M2I2MTgxZTdiNTlkNTRlMWVmNTAzZjNmZmNlNTg2NTZlIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbC5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjM3MCIsImJsb2JfbmFtZSI6IjJiOTI2YzRlYWNhMWNhYjY0NWM1Njc4MmY0N2ZmNDA4YzQyNDNkOWMxNjFhYTU2MDM1MDE4NzU1ZWYyZDkzMWMiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsX0ZpeC5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjM3MCIsImNoYXJfZW5kIjoiMTI3OCIsImJsb2JfbmFtZSI6IjJiOTI2YzRlYWNhMWNhYjY0NWM1Njc4MmY0N2ZmNDA4YzQyNDNkOWMxNjFhYTU2MDM1MDE4NzU1ZWYyZDkzMWMiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJQcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9Qcm9qZWN0X0JhblZlVGF1VGFpR2FzTGFjSG9uZy9zcmMvbWFpbi9qYXZhL2d1aUNsaWVudC9Eb2lWZVBhbmVsX0ZpeC5qYXZhIn19LHsiY2hhcl9zdGFydCI6IjM1MjciLCJjaGFyX2VuZCI6IjQyODciLCJibG9iX25hbWUiOiIyYjkyNmM0ZWFjYTFjYWI2NDVjNTY3ODJmNDdmZjQwOGM0MjQzZDljMTYxYWE1NjAzNTAxODc1NWVmMmQ5MzFjIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvUHJvamVjdF9CYW5WZVRhdVRhaUdhc0xhY0hvbmcvc3JjL21haW4vamF2YS9ndWlDbGllbnQvRG9pVmVQYW5lbF9GaXguamF2YSJ9fV19XSwiZmVlZGJhY2tTdGF0ZXMiOnsidGVtcC1mZS0wYjcxODA1NC1hMTVjLTRmNWYtOTFjOC1lMjcyMjFiZjZlZjkiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTI2YmE3YjNmLTVmYjMtNDVlZi04Mzc0LTU1NzlkMzQzNjFkMiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn19LCJ0b29sVXNlU3RhdGVzIjp7fSwiZHJhZnRFeGNoYW5nZSI6eyJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIn1dfSwic3RhdHVzIjoiZHJhZnQifSwicmVxdWVzdElkcyI6W10sImlzUGlubmVkIjpmYWxzZSwiaXNTaGFyZWFibGUiOnRydWUsImV4dHJhRGF0YSI6eyJpc0FnZW50Q29udmVyc2F0aW9uIjpmYWxzZSwiaGFzRGlydHlFZGl0cyI6ZmFsc2V9LCJwZXJzb25hVHlwZSI6MH19LCJhZ2VudEV4ZWN1dGlvbk1vZGUiOiJtYW51YWwiLCJpc0FnZW50RWRpdHNDb2xsYXBzZWQiOnRydWV9" />
      </map>
    </option>
  </component>
</project>